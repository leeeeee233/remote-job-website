{"ast":null,"code":"// 公司Logo服务\n// 提供多种方式获取公司logo，确保显示正确的公司标识\nclass LogoService{constructor(){// 多个logo服务提供商，按优先级排序\nthis.logoProviders=['clearbit','brandfetch','logo-dev','favicon'];// 缓存已获取的logo URL，避免重复请求\nthis.logoCache=new Map();// 知名公司的logo映射，确保准确性\nthis.knownCompanyLogos={'google':'https://logo.clearbit.com/google.com','microsoft':'https://logo.clearbit.com/microsoft.com','apple':'https://logo.clearbit.com/apple.com','amazon':'https://logo.clearbit.com/amazon.com','facebook':'https://logo.clearbit.com/facebook.com','meta':'https://logo.clearbit.com/meta.com','netflix':'https://logo.clearbit.com/netflix.com','spotify':'https://logo.clearbit.com/spotify.com','airbnb':'https://logo.clearbit.com/airbnb.com','uber':'https://logo.clearbit.com/uber.com','linkedin':'https://logo.clearbit.com/linkedin.com','twitter':'https://logo.clearbit.com/twitter.com','slack':'https://logo.clearbit.com/slack.com','dropbox':'https://logo.clearbit.com/dropbox.com','github':'https://logo.clearbit.com/github.com','gitlab':'https://logo.clearbit.com/gitlab.com','atlassian':'https://logo.clearbit.com/atlassian.com','shopify':'https://logo.clearbit.com/shopify.com','stripe':'https://logo.clearbit.com/stripe.com','figma':'https://logo.clearbit.com/figma.com','adobe':'https://logo.clearbit.com/adobe.com','salesforce':'https://logo.clearbit.com/salesforce.com','oracle':'https://logo.clearbit.com/oracle.com','ibm':'https://logo.clearbit.com/ibm.com','intel':'https://logo.clearbit.com/intel.com','nvidia':'https://logo.clearbit.com/nvidia.com','tesla':'https://logo.clearbit.com/tesla.com','zoom':'https://logo.clearbit.com/zoom.us','discord':'https://logo.clearbit.com/discord.com','notion':'https://logo.clearbit.com/notion.so','airtable':'https://logo.clearbit.com/airtable.com','asana':'https://logo.clearbit.com/asana.com','trello':'https://logo.clearbit.com/trello.com','monday':'https://logo.clearbit.com/monday.com','canva':'https://logo.clearbit.com/canva.com','miro':'https://logo.clearbit.com/miro.com','invision':'https://logo.clearbit.com/invisionapp.com','sketch':'https://logo.clearbit.com/sketch.com','framer':'https://logo.clearbit.com/framer.com'};}/**\r\n   * 获取公司logo URL\r\n   * @param {string} companyName - 公司名称\r\n   * @param {string} existingLogoUrl - 已有的logo URL（如果有）\r\n   * @returns {Promise<string>} - logo URL\r\n   */async getCompanyLogo(companyName){let existingLogoUrl=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;if(!companyName){return this.getDefaultLogo();}// 如果已有logo URL且有效，直接使用\nif(existingLogoUrl&&(await this.isValidImageUrl(existingLogoUrl))){return existingLogoUrl;}// 检查缓存\nconst cacheKey=companyName.toLowerCase().trim();if(this.logoCache.has(cacheKey)){return this.logoCache.get(cacheKey);}// 检查知名公司映射\nconst knownLogo=this.getKnownCompanyLogo(companyName);if(knownLogo){this.logoCache.set(cacheKey,knownLogo);return knownLogo;}// 尝试从多个提供商获取logo\nconst logoUrl=await this.fetchLogoFromProviders(companyName);// 缓存结果\nthis.logoCache.set(cacheKey,logoUrl);return logoUrl;}/**\r\n   * 从知名公司映射中获取logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {string|null} - logo URL或null\r\n   */getKnownCompanyLogo(companyName){const normalizedName=companyName.toLowerCase().trim();// 直接匹配\nif(this.knownCompanyLogos[normalizedName]){return this.knownCompanyLogos[normalizedName];}// 模糊匹配\nfor(const[key,logoUrl]of Object.entries(this.knownCompanyLogos)){if(normalizedName.includes(key)||key.includes(normalizedName)){return logoUrl;}}return null;}/**\r\n   * 从多个提供商获取logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {Promise<string>} - logo URL\r\n   */async fetchLogoFromProviders(companyName){const cleanCompanyName=this.cleanCompanyName(companyName);// 尝试不同的logo提供商\nconst logoUrls=[// Clearbit Logo API\n`https://logo.clearbit.com/${cleanCompanyName}.com`,// 尝试常见的域名后缀\n`https://logo.clearbit.com/${cleanCompanyName}.io`,`https://logo.clearbit.com/${cleanCompanyName}.co`,`https://logo.clearbit.com/${cleanCompanyName}.net`,// Logo.dev API\n`https://img.logo.dev/${cleanCompanyName}.com?token=pk_X-1ZO13GSgeOoUrIuJ6GMQ`,// Brandfetch API (需要API key，这里使用公共endpoint)\n`https://api.brandfetch.io/v2/brands/${cleanCompanyName}.com`,// Favicon服务\n`https://www.google.com/s2/favicons?domain=${cleanCompanyName}.com&sz=64`,`https://favicon.yandex.net/favicon/${cleanCompanyName}.com`,// 备用方案：使用公司名称首字母生成placeholder\nthis.generatePlaceholderLogo(companyName)];// 依次尝试每个URL\nfor(const logoUrl of logoUrls){if(await this.isValidImageUrl(logoUrl)){return logoUrl;}}// 如果所有方案都失败，返回默认logo\nreturn this.getDefaultLogo(companyName);}/**\r\n   * 清理公司名称，使其适合用作域名\r\n   * @param {string} companyName - 原始公司名称\r\n   * @returns {string} - 清理后的公司名称\r\n   */cleanCompanyName(companyName){return companyName.toLowerCase().replace(/[^a-z0-9]/g,'')// 移除非字母数字字符\n.replace(/inc|corp|ltd|llc|company|co|group|technologies|tech|solutions|systems/g,'')// 移除常见公司后缀\n.trim();}/**\r\n   * 检查图片URL是否有效\r\n   * @param {string} url - 图片URL\r\n   * @returns {Promise<boolean>} - 是否有效\r\n   */async isValidImageUrl(url){try{var _response$headers$get;const response=await fetch(url,{method:'HEAD',timeout:3000// 3秒超时\n});return response.ok&&((_response$headers$get=response.headers.get('content-type'))===null||_response$headers$get===void 0?void 0:_response$headers$get.startsWith('image/'));}catch(error){return false;}}/**\r\n   * 生成placeholder logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {string} - placeholder logo URL\r\n   */generatePlaceholderLogo(companyName){const firstLetter=companyName.charAt(0).toUpperCase();const colors=['4F46E5','7C3AED','DB2777','DC2626','EA580C','059669','0891B2','1D4ED8','7C2D12','BE185D'];const colorIndex=companyName.length%colors.length;const backgroundColor=colors[colorIndex];return`https://ui-avatars.com/api/?name=${encodeURIComponent(firstLetter)}&background=${backgroundColor}&color=fff&size=64&bold=true`;}/**\r\n   * 获取默认logo\r\n   * @param {string} companyName - 公司名称（可选）\r\n   * @returns {string} - 默认logo URL\r\n   */getDefaultLogo(){let companyName=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Company';return this.generatePlaceholderLogo(companyName);}/**\r\n   * 预加载常用公司的logo\r\n   * @returns {Promise<void>}\r\n   */async preloadCommonLogos(){const commonCompanies=Object.keys(this.knownCompanyLogos);// 并行预加载前10个最常见的公司logo\nconst preloadPromises=commonCompanies.slice(0,10).map(async company=>{const logoUrl=this.knownCompanyLogos[company];try{await fetch(logoUrl,{method:'HEAD'});console.log(`Preloaded logo for ${company}`);}catch(error){console.warn(`Failed to preload logo for ${company}:`,error);}});await Promise.allSettled(preloadPromises);}/**\r\n   * 清除logo缓存\r\n   */clearCache(){this.logoCache.clear();}/**\r\n   * 获取缓存统计\r\n   * @returns {Object} - 缓存统计信息\r\n   */getCacheStats(){return{cacheSize:this.logoCache.size,knownCompanies:Object.keys(this.knownCompanyLogos).length};}}// 创建单例实例\nconst logoService=new LogoService();export default logoService;","map":{"version":3,"names":["LogoService","constructor","logoProviders","logoCache","Map","knownCompanyLogos","getCompanyLogo","companyName","existingLogoUrl","arguments","length","undefined","getDefaultLogo","isValidImageUrl","cacheKey","toLowerCase","trim","has","get","knownLogo","getKnownCompanyLogo","set","logoUrl","fetchLogoFromProviders","normalizedName","key","Object","entries","includes","cleanCompanyName","logoUrls","generatePlaceholderLogo","replace","url","_response$headers$get","response","fetch","method","timeout","ok","headers","startsWith","error","firstLetter","charAt","toUpperCase","colors","colorIndex","backgroundColor","encodeURIComponent","preloadCommonLogos","commonCompanies","keys","preloadPromises","slice","map","company","console","log","warn","Promise","allSettled","clearCache","clear","getCacheStats","cacheSize","size","knownCompanies","logoService"],"sources":["D:/Kiro/remote-job-website/src/services/logoService.js"],"sourcesContent":["// 公司Logo服务\r\n// 提供多种方式获取公司logo，确保显示正确的公司标识\r\n\r\nclass LogoService {\r\n  constructor() {\r\n    // 多个logo服务提供商，按优先级排序\r\n    this.logoProviders = [\r\n      'clearbit',\r\n      'brandfetch',\r\n      'logo-dev',\r\n      'favicon'\r\n    ];\r\n    \r\n    // 缓存已获取的logo URL，避免重复请求\r\n    this.logoCache = new Map();\r\n    \r\n    // 知名公司的logo映射，确保准确性\r\n    this.knownCompanyLogos = {\r\n      'google': 'https://logo.clearbit.com/google.com',\r\n      'microsoft': 'https://logo.clearbit.com/microsoft.com',\r\n      'apple': 'https://logo.clearbit.com/apple.com',\r\n      'amazon': 'https://logo.clearbit.com/amazon.com',\r\n      'facebook': 'https://logo.clearbit.com/facebook.com',\r\n      'meta': 'https://logo.clearbit.com/meta.com',\r\n      'netflix': 'https://logo.clearbit.com/netflix.com',\r\n      'spotify': 'https://logo.clearbit.com/spotify.com',\r\n      'airbnb': 'https://logo.clearbit.com/airbnb.com',\r\n      'uber': 'https://logo.clearbit.com/uber.com',\r\n      'linkedin': 'https://logo.clearbit.com/linkedin.com',\r\n      'twitter': 'https://logo.clearbit.com/twitter.com',\r\n      'slack': 'https://logo.clearbit.com/slack.com',\r\n      'dropbox': 'https://logo.clearbit.com/dropbox.com',\r\n      'github': 'https://logo.clearbit.com/github.com',\r\n      'gitlab': 'https://logo.clearbit.com/gitlab.com',\r\n      'atlassian': 'https://logo.clearbit.com/atlassian.com',\r\n      'shopify': 'https://logo.clearbit.com/shopify.com',\r\n      'stripe': 'https://logo.clearbit.com/stripe.com',\r\n      'figma': 'https://logo.clearbit.com/figma.com',\r\n      'adobe': 'https://logo.clearbit.com/adobe.com',\r\n      'salesforce': 'https://logo.clearbit.com/salesforce.com',\r\n      'oracle': 'https://logo.clearbit.com/oracle.com',\r\n      'ibm': 'https://logo.clearbit.com/ibm.com',\r\n      'intel': 'https://logo.clearbit.com/intel.com',\r\n      'nvidia': 'https://logo.clearbit.com/nvidia.com',\r\n      'tesla': 'https://logo.clearbit.com/tesla.com',\r\n      'zoom': 'https://logo.clearbit.com/zoom.us',\r\n      'discord': 'https://logo.clearbit.com/discord.com',\r\n      'notion': 'https://logo.clearbit.com/notion.so',\r\n      'airtable': 'https://logo.clearbit.com/airtable.com',\r\n      'asana': 'https://logo.clearbit.com/asana.com',\r\n      'trello': 'https://logo.clearbit.com/trello.com',\r\n      'monday': 'https://logo.clearbit.com/monday.com',\r\n      'canva': 'https://logo.clearbit.com/canva.com',\r\n      'miro': 'https://logo.clearbit.com/miro.com',\r\n      'invision': 'https://logo.clearbit.com/invisionapp.com',\r\n      'sketch': 'https://logo.clearbit.com/sketch.com',\r\n      'framer': 'https://logo.clearbit.com/framer.com'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 获取公司logo URL\r\n   * @param {string} companyName - 公司名称\r\n   * @param {string} existingLogoUrl - 已有的logo URL（如果有）\r\n   * @returns {Promise<string>} - logo URL\r\n   */\r\n  async getCompanyLogo(companyName, existingLogoUrl = null) {\r\n    if (!companyName) {\r\n      return this.getDefaultLogo();\r\n    }\r\n\r\n    // 如果已有logo URL且有效，直接使用\r\n    if (existingLogoUrl && await this.isValidImageUrl(existingLogoUrl)) {\r\n      return existingLogoUrl;\r\n    }\r\n\r\n    // 检查缓存\r\n    const cacheKey = companyName.toLowerCase().trim();\r\n    if (this.logoCache.has(cacheKey)) {\r\n      return this.logoCache.get(cacheKey);\r\n    }\r\n\r\n    // 检查知名公司映射\r\n    const knownLogo = this.getKnownCompanyLogo(companyName);\r\n    if (knownLogo) {\r\n      this.logoCache.set(cacheKey, knownLogo);\r\n      return knownLogo;\r\n    }\r\n\r\n    // 尝试从多个提供商获取logo\r\n    const logoUrl = await this.fetchLogoFromProviders(companyName);\r\n    \r\n    // 缓存结果\r\n    this.logoCache.set(cacheKey, logoUrl);\r\n    \r\n    return logoUrl;\r\n  }\r\n\r\n  /**\r\n   * 从知名公司映射中获取logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {string|null} - logo URL或null\r\n   */\r\n  getKnownCompanyLogo(companyName) {\r\n    const normalizedName = companyName.toLowerCase().trim();\r\n    \r\n    // 直接匹配\r\n    if (this.knownCompanyLogos[normalizedName]) {\r\n      return this.knownCompanyLogos[normalizedName];\r\n    }\r\n    \r\n    // 模糊匹配\r\n    for (const [key, logoUrl] of Object.entries(this.knownCompanyLogos)) {\r\n      if (normalizedName.includes(key) || key.includes(normalizedName)) {\r\n        return logoUrl;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 从多个提供商获取logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {Promise<string>} - logo URL\r\n   */\r\n  async fetchLogoFromProviders(companyName) {\r\n    const cleanCompanyName = this.cleanCompanyName(companyName);\r\n    \r\n    // 尝试不同的logo提供商\r\n    const logoUrls = [\r\n      // Clearbit Logo API\r\n      `https://logo.clearbit.com/${cleanCompanyName}.com`,\r\n      \r\n      // 尝试常见的域名后缀\r\n      `https://logo.clearbit.com/${cleanCompanyName}.io`,\r\n      `https://logo.clearbit.com/${cleanCompanyName}.co`,\r\n      `https://logo.clearbit.com/${cleanCompanyName}.net`,\r\n      \r\n      // Logo.dev API\r\n      `https://img.logo.dev/${cleanCompanyName}.com?token=pk_X-1ZO13GSgeOoUrIuJ6GMQ`,\r\n      \r\n      // Brandfetch API (需要API key，这里使用公共endpoint)\r\n      `https://api.brandfetch.io/v2/brands/${cleanCompanyName}.com`,\r\n      \r\n      // Favicon服务\r\n      `https://www.google.com/s2/favicons?domain=${cleanCompanyName}.com&sz=64`,\r\n      `https://favicon.yandex.net/favicon/${cleanCompanyName}.com`,\r\n      \r\n      // 备用方案：使用公司名称首字母生成placeholder\r\n      this.generatePlaceholderLogo(companyName)\r\n    ];\r\n\r\n    // 依次尝试每个URL\r\n    for (const logoUrl of logoUrls) {\r\n      if (await this.isValidImageUrl(logoUrl)) {\r\n        return logoUrl;\r\n      }\r\n    }\r\n\r\n    // 如果所有方案都失败，返回默认logo\r\n    return this.getDefaultLogo(companyName);\r\n  }\r\n\r\n  /**\r\n   * 清理公司名称，使其适合用作域名\r\n   * @param {string} companyName - 原始公司名称\r\n   * @returns {string} - 清理后的公司名称\r\n   */\r\n  cleanCompanyName(companyName) {\r\n    return companyName\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9]/g, '') // 移除非字母数字字符\r\n      .replace(/inc|corp|ltd|llc|company|co|group|technologies|tech|solutions|systems/g, '') // 移除常见公司后缀\r\n      .trim();\r\n  }\r\n\r\n  /**\r\n   * 检查图片URL是否有效\r\n   * @param {string} url - 图片URL\r\n   * @returns {Promise<boolean>} - 是否有效\r\n   */\r\n  async isValidImageUrl(url) {\r\n    try {\r\n      const response = await fetch(url, { \r\n        method: 'HEAD',\r\n        timeout: 3000 // 3秒超时\r\n      });\r\n      \r\n      return response.ok && response.headers.get('content-type')?.startsWith('image/');\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成placeholder logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {string} - placeholder logo URL\r\n   */\r\n  generatePlaceholderLogo(companyName) {\r\n    const firstLetter = companyName.charAt(0).toUpperCase();\r\n    const colors = [\r\n      '4F46E5', '7C3AED', 'DB2777', 'DC2626', 'EA580C',\r\n      '059669', '0891B2', '1D4ED8', '7C2D12', 'BE185D'\r\n    ];\r\n    const colorIndex = companyName.length % colors.length;\r\n    const backgroundColor = colors[colorIndex];\r\n    \r\n    return `https://ui-avatars.com/api/?name=${encodeURIComponent(firstLetter)}&background=${backgroundColor}&color=fff&size=64&bold=true`;\r\n  }\r\n\r\n  /**\r\n   * 获取默认logo\r\n   * @param {string} companyName - 公司名称（可选）\r\n   * @returns {string} - 默认logo URL\r\n   */\r\n  getDefaultLogo(companyName = 'Company') {\r\n    return this.generatePlaceholderLogo(companyName);\r\n  }\r\n\r\n  /**\r\n   * 预加载常用公司的logo\r\n   * @returns {Promise<void>}\r\n   */\r\n  async preloadCommonLogos() {\r\n    const commonCompanies = Object.keys(this.knownCompanyLogos);\r\n    \r\n    // 并行预加载前10个最常见的公司logo\r\n    const preloadPromises = commonCompanies.slice(0, 10).map(async (company) => {\r\n      const logoUrl = this.knownCompanyLogos[company];\r\n      try {\r\n        await fetch(logoUrl, { method: 'HEAD' });\r\n        console.log(`Preloaded logo for ${company}`);\r\n      } catch (error) {\r\n        console.warn(`Failed to preload logo for ${company}:`, error);\r\n      }\r\n    });\r\n    \r\n    await Promise.allSettled(preloadPromises);\r\n  }\r\n\r\n  /**\r\n   * 清除logo缓存\r\n   */\r\n  clearCache() {\r\n    this.logoCache.clear();\r\n  }\r\n\r\n  /**\r\n   * 获取缓存统计\r\n   * @returns {Object} - 缓存统计信息\r\n   */\r\n  getCacheStats() {\r\n    return {\r\n      cacheSize: this.logoCache.size,\r\n      knownCompanies: Object.keys(this.knownCompanyLogos).length\r\n    };\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst logoService = new LogoService();\r\n\r\nexport default logoService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}