{"ast":null,"code":"// 实时刷新服务 - 确保每次刷新都获取最新数据\nimport{searchRemoteJobs,fetchJobspressoJobs,fetchWeWorkRemotelyJobs}from'./jobService';import{fetchRemoteOKJobs}from'./realJobAPI';import{config}from'../config/production';class RefreshService{constructor(){this.isRefreshing=false;this.lastRefresh=null;this.refreshListeners=new Set();this.cacheBypass=true;// 强制绕过缓存\nthis.refreshStats={totalRefreshes:0,successfulRefreshes:0,failedRefreshes:0,averageRefreshTime:0};}// 强制刷新所有数据源\nasync forceRefreshAllSources(){let searchTerm=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(this.isRefreshing){console.log('🔄 刷新正在进行中，请稍候...');return{success:false,message:'刷新正在进行中'};}this.isRefreshing=true;const startTime=Date.now();this.refreshStats.totalRefreshes++;try{console.log('🚀 开始强制刷新所有数据源...');// 清除所有缓存，确保获取最新数据\nawait this.clearAllCaches();// 并行调用所有数据源，每个都带上时间戳防止缓存\nconst timestamp=Date.now();const refreshPromises=[this.refreshJobspresso(searchTerm,filters,timestamp),this.refreshRemoteOK(timestamp),this.refreshWeWorkRemotely(searchTerm,filters,timestamp)];console.log('📡 并行请求所有数据源...');const results=await Promise.allSettled(refreshPromises);// 处理结果\nlet allJobs=[];let successfulSources=[];let failedSources=[];results.forEach((result,index)=>{const sourceNames=['Jobspresso','RemoteOK','WeWorkRemotely'];const sourceName=sourceNames[index];if(result.status==='fulfilled'&&result.value.success){allJobs=[...allJobs,...result.value.jobs];successfulSources.push(sourceName);console.log(`✅ ${sourceName}: ${result.value.jobs.length} 个最新工作`);}else{var _result$reason,_result$value;failedSources.push(sourceName);console.warn(`❌ ${sourceName} 刷新失败:`,((_result$reason=result.reason)===null||_result$reason===void 0?void 0:_result$reason.message)||((_result$value=result.value)===null||_result$value===void 0?void 0:_result$value.error));}});// 去重和排序\nconst uniqueJobs=this.deduplicateJobs(allJobs);const sortedJobs=this.sortJobsByFreshness(uniqueJobs);// 添加刷新时间戳\nconst jobsWithRefreshInfo=sortedJobs.map(job=>({...job,refreshedAt:new Date().toISOString(),isFresh:true,refreshId:timestamp}));const refreshTime=Date.now()-startTime;this.refreshStats.successfulRefreshes++;this.refreshStats.averageRefreshTime=(this.refreshStats.averageRefreshTime+refreshTime)/2;this.lastRefresh=new Date();console.log(`🎉 刷新完成! 获取到 ${jobsWithRefreshInfo.length} 个最新工作`);console.log(`📊 成功源: ${successfulSources.join(', ')}`);console.log(`⏱️ 刷新耗时: ${refreshTime}ms`);// 通知所有监听器\nthis.notifyRefreshListeners({jobs:jobsWithRefreshInfo,sources:successfulSources,failedSources,refreshTime,timestamp:this.lastRefresh});return{success:true,jobs:jobsWithRefreshInfo,sources:successfulSources,failedSources,refreshTime,total:jobsWithRefreshInfo.length};}catch(error){console.error('❌ 强制刷新失败:',error);this.refreshStats.failedRefreshes++;return{success:false,error:error.message,jobs:[],sources:[]};}finally{this.isRefreshing=false;}}// 刷新Jobspresso数据\nasync refreshJobspresso(searchTerm,filters,timestamp){try{console.log('🔍 刷新Jobspresso数据...');// 添加时间戳参数防止缓存\nconst jobs=await fetchJobspressoJobs(searchTerm,filters.category);return{success:true,jobs:jobs.map(job=>({...job,source:'Jobspresso',fetchedAt:new Date().toISOString(),refreshTimestamp:timestamp})),source:'Jobspresso'};}catch(error){return{success:false,error:error.message,jobs:[],source:'Jobspresso'};}}// 刷新RemoteOK数据\nasync refreshRemoteOK(timestamp){try{console.log('🔍 刷新RemoteOK数据...');const jobs=await fetchRemoteOKJobs();return{success:true,jobs:jobs.map(job=>({...job,source:'RemoteOK',fetchedAt:new Date().toISOString(),refreshTimestamp:timestamp})),source:'RemoteOK'};}catch(error){return{success:false,error:error.message,jobs:[],source:'RemoteOK'};}}// 刷新WeWorkRemotely数据\nasync refreshWeWorkRemotely(searchTerm,filters,timestamp){try{console.log('🔍 刷新WeWorkRemotely数据...');const jobs=await fetchWeWorkRemotelyJobs(searchTerm,filters.category);return{success:true,jobs:jobs.map(job=>({...job,source:'WeWorkRemotely',fetchedAt:new Date().toISOString(),refreshTimestamp:timestamp})),source:'WeWorkRemotely'};}catch(error){return{success:false,error:error.message,jobs:[],source:'WeWorkRemotely'};}}// 清除所有缓存\nasync clearAllCaches(){try{console.log('🗑️ 清除所有缓存...');// 清除浏览器缓存\nif('caches'in window){const cacheNames=await caches.keys();await Promise.all(cacheNames.map(cacheName=>caches.delete(cacheName)));}// 清除localStorage中的缓存\nconst keysToRemove=[];for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key&&(key.includes('job')||key.includes('cache'))){keysToRemove.push(key);}}keysToRemove.forEach(key=>localStorage.removeItem(key));// 清除sessionStorage中的缓存\nconst sessionKeysToRemove=[];for(let i=0;i<sessionStorage.length;i++){const key=sessionStorage.key(i);if(key&&(key.includes('job')||key.includes('cache'))){sessionKeysToRemove.push(key);}}sessionKeysToRemove.forEach(key=>sessionStorage.removeItem(key));console.log('✅ 缓存清除完成');}catch(error){console.warn('⚠️ 缓存清除失败:',error);}}// 去重处理\ndeduplicateJobs(jobs){const seen=new Map();const uniqueJobs=[];for(const job of jobs){const key=`${job.title.toLowerCase().trim()}-${job.company.toLowerCase().trim()}`;if(!seen.has(key)){seen.set(key,true);uniqueJobs.push(job);}}return uniqueJobs;}// 按新鲜度排序\nsortJobsByFreshness(jobs){return jobs.sort((a,b)=>{// 优先显示今天发布的工作\nif(a.postedDate==='Today'&&b.postedDate!=='Today')return-1;if(a.postedDate!=='Today'&&b.postedDate==='Today')return 1;// 按数据源优先级排序 (Jobspresso > RemoteOK > WeWorkRemotely)\nconst sourcePriority={'Jobspresso':1,'RemoteOK':2,'WeWorkRemotely':3};const priorityA=sourcePriority[a.source]||999;const priorityB=sourcePriority[b.source]||999;if(priorityA!==priorityB)return priorityA-priorityB;// 按获取时间排序（最新的在前）\nconst timeA=new Date(a.fetchedAt||0).getTime();const timeB=new Date(b.fetchedAt||0).getTime();return timeB-timeA;});}// 添加刷新监听器\naddRefreshListener(callback){this.refreshListeners.add(callback);return()=>this.refreshListeners.delete(callback);}// 通知刷新监听器\nnotifyRefreshListeners(data){this.refreshListeners.forEach(callback=>{try{callback(data);}catch(error){console.error('刷新监听器错误:',error);}});}// 获取刷新状态\ngetRefreshStatus(){return{isRefreshing:this.isRefreshing,lastRefresh:this.lastRefresh,stats:this.refreshStats};}// 检查是否需要刷新\nshouldRefresh(){if(!this.lastRefresh)return true;const timeSinceLastRefresh=Date.now()-this.lastRefresh.getTime();const refreshThreshold=30*1000;// 30秒\nreturn timeSinceLastRefresh>refreshThreshold;}// 页面加载时的自动刷新\nasync autoRefreshOnPageLoad(){let searchTerm=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};console.log('🔄 页面加载，自动刷新数据...');return await this.forceRefreshAllSources(searchTerm,filters);}}// 创建全局实例\nconst refreshService=new RefreshService();export default refreshService;","map":{"version":3,"names":["searchRemoteJobs","fetchJobspressoJobs","fetchWeWorkRemotelyJobs","fetchRemoteOKJobs","config","RefreshService","constructor","isRefreshing","lastRefresh","refreshListeners","Set","cacheBypass","refreshStats","totalRefreshes","successfulRefreshes","failedRefreshes","averageRefreshTime","forceRefreshAllSources","searchTerm","arguments","length","undefined","filters","console","log","success","message","startTime","Date","now","clearAllCaches","timestamp","refreshPromises","refreshJobspresso","refreshRemoteOK","refreshWeWorkRemotely","results","Promise","allSettled","allJobs","successfulSources","failedSources","forEach","result","index","sourceNames","sourceName","status","value","jobs","push","_result$reason","_result$value","warn","reason","error","uniqueJobs","deduplicateJobs","sortedJobs","sortJobsByFreshness","jobsWithRefreshInfo","map","job","refreshedAt","toISOString","isFresh","refreshId","refreshTime","join","notifyRefreshListeners","sources","total","category","source","fetchedAt","refreshTimestamp","window","cacheNames","caches","keys","all","cacheName","delete","keysToRemove","i","localStorage","key","includes","removeItem","sessionKeysToRemove","sessionStorage","seen","Map","title","toLowerCase","trim","company","has","set","sort","a","b","postedDate","sourcePriority","priorityA","priorityB","timeA","getTime","timeB","addRefreshListener","callback","add","data","getRefreshStatus","stats","shouldRefresh","timeSinceLastRefresh","refreshThreshold","autoRefreshOnPageLoad","refreshService"],"sources":["D:/Kiro/remote-job-website/src/services/RefreshService.js"],"sourcesContent":["// 实时刷新服务 - 确保每次刷新都获取最新数据\r\nimport { searchRemoteJobs, fetchJobspressoJobs, fetchWeWorkRemotelyJobs } from './jobService';\r\nimport { fetchRemoteOKJobs } from './realJobAPI';\r\nimport { config } from '../config/production';\r\n\r\nclass RefreshService {\r\n  constructor() {\r\n    this.isRefreshing = false;\r\n    this.lastRefresh = null;\r\n    this.refreshListeners = new Set();\r\n    this.cacheBypass = true; // 强制绕过缓存\r\n    this.refreshStats = {\r\n      totalRefreshes: 0,\r\n      successfulRefreshes: 0,\r\n      failedRefreshes: 0,\r\n      averageRefreshTime: 0\r\n    };\r\n  }\r\n\r\n  // 强制刷新所有数据源\r\n  async forceRefreshAllSources(searchTerm = '', filters = {}) {\r\n    if (this.isRefreshing) {\r\n      console.log('🔄 刷新正在进行中，请稍候...');\r\n      return { success: false, message: '刷新正在进行中' };\r\n    }\r\n\r\n    this.isRefreshing = true;\r\n    const startTime = Date.now();\r\n    this.refreshStats.totalRefreshes++;\r\n\r\n    try {\r\n      console.log('🚀 开始强制刷新所有数据源...');\r\n      \r\n      // 清除所有缓存，确保获取最新数据\r\n      await this.clearAllCaches();\r\n      \r\n      // 并行调用所有数据源，每个都带上时间戳防止缓存\r\n      const timestamp = Date.now();\r\n      const refreshPromises = [\r\n        this.refreshJobspresso(searchTerm, filters, timestamp),\r\n        this.refreshRemoteOK(timestamp),\r\n        this.refreshWeWorkRemotely(searchTerm, filters, timestamp)\r\n      ];\r\n\r\n      console.log('📡 并行请求所有数据源...');\r\n      const results = await Promise.allSettled(refreshPromises);\r\n      \r\n      // 处理结果\r\n      let allJobs = [];\r\n      let successfulSources = [];\r\n      let failedSources = [];\r\n      \r\n      results.forEach((result, index) => {\r\n        const sourceNames = ['Jobspresso', 'RemoteOK', 'WeWorkRemotely'];\r\n        const sourceName = sourceNames[index];\r\n        \r\n        if (result.status === 'fulfilled' && result.value.success) {\r\n          allJobs = [...allJobs, ...result.value.jobs];\r\n          successfulSources.push(sourceName);\r\n          console.log(`✅ ${sourceName}: ${result.value.jobs.length} 个最新工作`);\r\n        } else {\r\n          failedSources.push(sourceName);\r\n          console.warn(`❌ ${sourceName} 刷新失败:`, result.reason?.message || result.value?.error);\r\n        }\r\n      });\r\n\r\n      // 去重和排序\r\n      const uniqueJobs = this.deduplicateJobs(allJobs);\r\n      const sortedJobs = this.sortJobsByFreshness(uniqueJobs);\r\n      \r\n      // 添加刷新时间戳\r\n      const jobsWithRefreshInfo = sortedJobs.map(job => ({\r\n        ...job,\r\n        refreshedAt: new Date().toISOString(),\r\n        isFresh: true,\r\n        refreshId: timestamp\r\n      }));\r\n\r\n      const refreshTime = Date.now() - startTime;\r\n      this.refreshStats.successfulRefreshes++;\r\n      this.refreshStats.averageRefreshTime = \r\n        (this.refreshStats.averageRefreshTime + refreshTime) / 2;\r\n      \r\n      this.lastRefresh = new Date();\r\n\r\n      console.log(`🎉 刷新完成! 获取到 ${jobsWithRefreshInfo.length} 个最新工作`);\r\n      console.log(`📊 成功源: ${successfulSources.join(', ')}`);\r\n      console.log(`⏱️ 刷新耗时: ${refreshTime}ms`);\r\n\r\n      // 通知所有监听器\r\n      this.notifyRefreshListeners({\r\n        jobs: jobsWithRefreshInfo,\r\n        sources: successfulSources,\r\n        failedSources,\r\n        refreshTime,\r\n        timestamp: this.lastRefresh\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        jobs: jobsWithRefreshInfo,\r\n        sources: successfulSources,\r\n        failedSources,\r\n        refreshTime,\r\n        total: jobsWithRefreshInfo.length\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('❌ 强制刷新失败:', error);\r\n      this.refreshStats.failedRefreshes++;\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        jobs: [],\r\n        sources: []\r\n      };\r\n    } finally {\r\n      this.isRefreshing = false;\r\n    }\r\n  }\r\n\r\n  // 刷新Jobspresso数据\r\n  async refreshJobspresso(searchTerm, filters, timestamp) {\r\n    try {\r\n      console.log('🔍 刷新Jobspresso数据...');\r\n      \r\n      // 添加时间戳参数防止缓存\r\n      const jobs = await fetchJobspressoJobs(searchTerm, filters.category);\r\n      \r\n      return {\r\n        success: true,\r\n        jobs: jobs.map(job => ({\r\n          ...job,\r\n          source: 'Jobspresso',\r\n          fetchedAt: new Date().toISOString(),\r\n          refreshTimestamp: timestamp\r\n        })),\r\n        source: 'Jobspresso'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        jobs: [],\r\n        source: 'Jobspresso'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 刷新RemoteOK数据\r\n  async refreshRemoteOK(timestamp) {\r\n    try {\r\n      console.log('🔍 刷新RemoteOK数据...');\r\n      \r\n      const jobs = await fetchRemoteOKJobs();\r\n      \r\n      return {\r\n        success: true,\r\n        jobs: jobs.map(job => ({\r\n          ...job,\r\n          source: 'RemoteOK',\r\n          fetchedAt: new Date().toISOString(),\r\n          refreshTimestamp: timestamp\r\n        })),\r\n        source: 'RemoteOK'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        jobs: [],\r\n        source: 'RemoteOK'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 刷新WeWorkRemotely数据\r\n  async refreshWeWorkRemotely(searchTerm, filters, timestamp) {\r\n    try {\r\n      console.log('🔍 刷新WeWorkRemotely数据...');\r\n      \r\n      const jobs = await fetchWeWorkRemotelyJobs(searchTerm, filters.category);\r\n      \r\n      return {\r\n        success: true,\r\n        jobs: jobs.map(job => ({\r\n          ...job,\r\n          source: 'WeWorkRemotely',\r\n          fetchedAt: new Date().toISOString(),\r\n          refreshTimestamp: timestamp\r\n        })),\r\n        source: 'WeWorkRemotely'\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        jobs: [],\r\n        source: 'WeWorkRemotely'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 清除所有缓存\r\n  async clearAllCaches() {\r\n    try {\r\n      console.log('🗑️ 清除所有缓存...');\r\n      \r\n      // 清除浏览器缓存\r\n      if ('caches' in window) {\r\n        const cacheNames = await caches.keys();\r\n        await Promise.all(\r\n          cacheNames.map(cacheName => caches.delete(cacheName))\r\n        );\r\n      }\r\n      \r\n      // 清除localStorage中的缓存\r\n      const keysToRemove = [];\r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key && (key.includes('job') || key.includes('cache'))) {\r\n          keysToRemove.push(key);\r\n        }\r\n      }\r\n      keysToRemove.forEach(key => localStorage.removeItem(key));\r\n      \r\n      // 清除sessionStorage中的缓存\r\n      const sessionKeysToRemove = [];\r\n      for (let i = 0; i < sessionStorage.length; i++) {\r\n        const key = sessionStorage.key(i);\r\n        if (key && (key.includes('job') || key.includes('cache'))) {\r\n          sessionKeysToRemove.push(key);\r\n        }\r\n      }\r\n      sessionKeysToRemove.forEach(key => sessionStorage.removeItem(key));\r\n      \r\n      console.log('✅ 缓存清除完成');\r\n    } catch (error) {\r\n      console.warn('⚠️ 缓存清除失败:', error);\r\n    }\r\n  }\r\n\r\n  // 去重处理\r\n  deduplicateJobs(jobs) {\r\n    const seen = new Map();\r\n    const uniqueJobs = [];\r\n\r\n    for (const job of jobs) {\r\n      const key = `${job.title.toLowerCase().trim()}-${job.company.toLowerCase().trim()}`;\r\n      \r\n      if (!seen.has(key)) {\r\n        seen.set(key, true);\r\n        uniqueJobs.push(job);\r\n      }\r\n    }\r\n\r\n    return uniqueJobs;\r\n  }\r\n\r\n  // 按新鲜度排序\r\n  sortJobsByFreshness(jobs) {\r\n    return jobs.sort((a, b) => {\r\n      // 优先显示今天发布的工作\r\n      if (a.postedDate === 'Today' && b.postedDate !== 'Today') return -1;\r\n      if (a.postedDate !== 'Today' && b.postedDate === 'Today') return 1;\r\n      \r\n      // 按数据源优先级排序 (Jobspresso > RemoteOK > WeWorkRemotely)\r\n      const sourcePriority = { 'Jobspresso': 1, 'RemoteOK': 2, 'WeWorkRemotely': 3 };\r\n      const priorityA = sourcePriority[a.source] || 999;\r\n      const priorityB = sourcePriority[b.source] || 999;\r\n      \r\n      if (priorityA !== priorityB) return priorityA - priorityB;\r\n      \r\n      // 按获取时间排序（最新的在前）\r\n      const timeA = new Date(a.fetchedAt || 0).getTime();\r\n      const timeB = new Date(b.fetchedAt || 0).getTime();\r\n      \r\n      return timeB - timeA;\r\n    });\r\n  }\r\n\r\n  // 添加刷新监听器\r\n  addRefreshListener(callback) {\r\n    this.refreshListeners.add(callback);\r\n    return () => this.refreshListeners.delete(callback);\r\n  }\r\n\r\n  // 通知刷新监听器\r\n  notifyRefreshListeners(data) {\r\n    this.refreshListeners.forEach(callback => {\r\n      try {\r\n        callback(data);\r\n      } catch (error) {\r\n        console.error('刷新监听器错误:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // 获取刷新状态\r\n  getRefreshStatus() {\r\n    return {\r\n      isRefreshing: this.isRefreshing,\r\n      lastRefresh: this.lastRefresh,\r\n      stats: this.refreshStats\r\n    };\r\n  }\r\n\r\n  // 检查是否需要刷新\r\n  shouldRefresh() {\r\n    if (!this.lastRefresh) return true;\r\n    \r\n    const timeSinceLastRefresh = Date.now() - this.lastRefresh.getTime();\r\n    const refreshThreshold = 30 * 1000; // 30秒\r\n    \r\n    return timeSinceLastRefresh > refreshThreshold;\r\n  }\r\n\r\n  // 页面加载时的自动刷新\r\n  async autoRefreshOnPageLoad(searchTerm = '', filters = {}) {\r\n    console.log('🔄 页面加载，自动刷新数据...');\r\n    return await this.forceRefreshAllSources(searchTerm, filters);\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nconst refreshService = new RefreshService();\r\n\r\nexport default refreshService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}