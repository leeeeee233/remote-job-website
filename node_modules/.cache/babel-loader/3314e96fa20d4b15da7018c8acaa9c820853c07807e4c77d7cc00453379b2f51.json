{"ast":null,"code":"// 数据加载器\n// 处理并行API请求、数据合并和去重\n\nimport DeduplicationService from './DeduplicationService';\nclass DataLoader {\n  constructor(apiAdapters, cacheService) {\n    this.apiAdapters = apiAdapters;\n    this.cacheService = cacheService;\n    this.deduplicationService = new DeduplicationService();\n    this.requestQueue = [];\n    this.maxConcurrentRequests = 3;\n    this.loadedJobsGlobal = new Set(); // 全局已加载工作追踪\n  }\n\n  /**\r\n   * 从所有来源加载工作\r\n   * @param {string} searchTerm - 搜索关键词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {Promise<Object>} - 加载结果\r\n   */\n  async loadJobsFromAllSources(searchTerm = '', filters = {}, page = 0, pageSize = 20) {\n    console.log(`加载工作数据 - 搜索词: \"${searchTerm}\", 页码: ${page}, 页面大小: ${pageSize}`);\n    try {\n      // 为每个页面创建新的去重服务实例，但保持全局追踪\n      const pageDeduplicationService = new DeduplicationService();\n\n      // 将已知的全局工作添加到页面去重服务中\n      for (const jobId of this.loadedJobsGlobal) {\n        pageDeduplicationService.seenJobIds.add(jobId);\n      }\n\n      // 并行从所有来源获取数据\n      const sourcePromises = Object.entries(this.apiAdapters).map(([sourceName, adapter]) => this.loadJobsFromSource(sourceName, adapter, searchTerm, filters, page, pageSize));\n      const sourceResults = await Promise.allSettled(sourcePromises);\n\n      // 收集成功的结果\n      const jobsBySource = {};\n      let totalAvailable = 0;\n      sourceResults.forEach((result, index) => {\n        const sourceName = Object.keys(this.apiAdapters)[index];\n        if (result.status === 'fulfilled' && result.value.jobs.length > 0) {\n          jobsBySource[sourceName] = result.value.jobs;\n          totalAvailable += result.value.total || result.value.jobs.length;\n          console.log(`来源 ${sourceName}: 获取到 ${result.value.jobs.length} 个工作`);\n        } else if (result.status === 'rejected') {\n          console.error(`来源 ${sourceName} 加载失败:`, result.reason);\n          jobsBySource[sourceName] = [];\n        }\n      });\n\n      // 使用增强的去重服务处理多源数据\n      const uniqueJobs = pageDeduplicationService.deduplicateMultipleSources(jobsBySource);\n\n      // 更新全局已加载工作追踪\n      uniqueJobs.forEach(job => {\n        if (job.id) {\n          this.loadedJobsGlobal.add(job.id);\n        }\n      });\n\n      // 应用额外的筛选和排序\n      const filteredJobs = this.applyFilters(uniqueJobs, filters);\n      const sortedJobs = this.sortJobs(filteredJobs, filters.sort || 'date');\n\n      // 分页处理\n      const startIndex = 0; // 因为我们已经在API层面处理了分页\n      const endIndex = pageSize;\n      const paginatedJobs = sortedJobs.slice(startIndex, endIndex);\n      const result = {\n        jobs: paginatedJobs,\n        total: sortedJobs.length,\n        totalAvailable: totalAvailable,\n        page: page,\n        pageSize: pageSize,\n        hasMore: sortedJobs.length > pageSize,\n        sources: Object.keys(jobsBySource).filter(source => jobsBySource[source].length > 0),\n        deduplicationStats: pageDeduplicationService.getStats()\n      };\n      console.log(`数据加载完成 - 返回 ${paginatedJobs.length} 个唯一工作`);\n      console.log('去重统计:', pageDeduplicationService.getStats());\n      return result;\n    } catch (error) {\n      console.error('数据加载失败:', error);\n      return {\n        jobs: [],\n        total: 0,\n        totalAvailable: 0,\n        page: page,\n        pageSize: pageSize,\n        hasMore: false,\n        sources: [],\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * 从单个来源加载工作\r\n   * @param {string} sourceName - 来源名称\r\n   * @param {Object} adapter - API适配器\r\n   * @param {string} searchTerm - 搜索关键词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {Promise<Object>} - 加载结果\r\n   */\n  async loadJobsFromSource(sourceName, adapter, searchTerm, filters, page, pageSize) {\n    try {\n      console.log(`从 ${sourceName} 加载数据...`);\n\n      // 生成缓存键\n      const cacheKey = this.generateCacheKey(sourceName, searchTerm, filters, page, pageSize);\n\n      // 检查缓存\n      if (this.cacheService) {\n        const cachedData = await this.cacheService.get(cacheKey);\n        if (cachedData) {\n          console.log(`使用 ${sourceName} 的缓存数据`);\n          return cachedData;\n        }\n      }\n\n      // 调用API\n      let result;\n      if (adapter.searchJobsPaginated) {\n        // 使用分页方法\n        result = await adapter.searchJobsPaginated(searchTerm, filters, page, pageSize);\n      } else if (adapter.searchJobs) {\n        // 使用标准方法\n        result = await adapter.searchJobs(searchTerm, filters, page);\n      } else {\n        throw new Error(`${sourceName} 适配器不支持工作搜索`);\n      }\n\n      // 确保结果格式正确\n      if (!result || !Array.isArray(result.jobs)) {\n        console.warn(`${sourceName} 返回了无效的数据格式`);\n        return {\n          jobs: [],\n          total: 0\n        };\n      }\n\n      // 缓存结果\n      if (this.cacheService && result.jobs.length > 0) {\n        await this.cacheService.set(cacheKey, result);\n      }\n      return result;\n    } catch (error) {\n      console.error(`从 ${sourceName} 加载数据失败:`, error);\n      return {\n        jobs: [],\n        total: 0,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * 应用筛选条件\r\n   * @param {Array} jobs - 工作列表\r\n   * @param {Object} filters - 筛选条件\r\n   * @returns {Array} - 筛选后的工作列表\r\n   */\n  applyFilters(jobs, filters) {\n    let filteredJobs = [...jobs];\n\n    // 工作类型筛选\n    if (filters.jobType) {\n      filteredJobs = filteredJobs.filter(job => job.type && job.type.toLowerCase() === filters.jobType.toLowerCase());\n    }\n\n    // 薪资范围筛选\n    if (filters.salary) {\n      const {\n        min,\n        max\n      } = filters.salary;\n      filteredJobs = filteredJobs.filter(job => {\n        const salary = job.salary || 0;\n        return (!min || salary >= min) && (!max || salary <= max);\n      });\n    }\n\n    // 位置筛选\n    if (filters.location && filters.location !== 'remote') {\n      filteredJobs = filteredJobs.filter(job => job.location && job.location.toLowerCase().includes(filters.location.toLowerCase()));\n    }\n\n    // 技能筛选\n    if (filters.skills && filters.skills.length > 0) {\n      filteredJobs = filteredJobs.filter(job => {\n        if (!job.skills || !Array.isArray(job.skills)) return false;\n        return filters.skills.some(skill => job.skills.some(jobSkill => jobSkill.toLowerCase().includes(skill.toLowerCase())));\n      });\n    }\n\n    // 公司筛选\n    if (filters.company) {\n      filteredJobs = filteredJobs.filter(job => job.company && job.company.toLowerCase().includes(filters.company.toLowerCase()));\n    }\n\n    // 发布时间筛选\n    if (filters.dateRange) {\n      filteredJobs = filteredJobs.filter(job => {\n        if (!job.postedDate) return true;\n        const daysAgo = this.parseDateToDaysAgo(job.postedDate);\n        return daysAgo <= filters.dateRange;\n      });\n    }\n    return filteredJobs;\n  }\n\n  /**\r\n   * 排序工作列表\r\n   * @param {Array} jobs - 工作列表\r\n   * @param {string} sortBy - 排序方式\r\n   * @returns {Array} - 排序后的工作列表\r\n   */\n  sortJobs(jobs, sortBy = 'date') {\n    const sortedJobs = [...jobs];\n    switch (sortBy) {\n      case 'date':\n        return sortedJobs.sort((a, b) => {\n          const aDays = this.parseDateToDaysAgo(a.postedDate);\n          const bDays = this.parseDateToDaysAgo(b.postedDate);\n          return aDays - bDays; // 最新的在前面\n        });\n      case 'salary':\n        return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\n      case 'company':\n        return sortedJobs.sort((a, b) => (a.company || '').localeCompare(b.company || ''));\n      case 'title':\n        return sortedJobs.sort((a, b) => (a.title || '').localeCompare(b.title || ''));\n      case 'relevance':\n        // 基于来源优先级和其他因素排序\n        return sortedJobs.sort((a, b) => {\n          const sourcePriority = {\n            'LinkedIn': 3,\n            'RemoteOK': 2,\n            'WeWorkRemotely': 1\n          };\n          const aPriority = sourcePriority[a.source] || 0;\n          const bPriority = sourcePriority[b.source] || 0;\n          if (aPriority !== bPriority) {\n            return bPriority - aPriority;\n          }\n\n          // 如果来源优先级相同，按日期排序\n          const aDays = this.parseDateToDaysAgo(a.postedDate);\n          const bDays = this.parseDateToDaysAgo(b.postedDate);\n          return aDays - bDays;\n        });\n      default:\n        return sortedJobs;\n    }\n  }\n\n  /**\r\n   * 解析日期字符串为天数\r\n   * @param {string} dateStr - 日期字符串\r\n   * @returns {number} - 天数\r\n   */\n  parseDateToDaysAgo(dateStr) {\n    if (!dateStr) return 999;\n    if (dateStr === 'Today') return 0;\n    if (dateStr === 'Yesterday') return 1;\n    const daysMatch = dateStr.match(/(\\d+)\\s*days?\\s*ago/i);\n    if (daysMatch) return parseInt(daysMatch[1], 10);\n    const weeksMatch = dateStr.match(/(\\d+)\\s*weeks?\\s*ago/i);\n    if (weeksMatch) return parseInt(weeksMatch[1], 10) * 7;\n    const monthsMatch = dateStr.match(/(\\d+)\\s*months?\\s*ago/i);\n    if (monthsMatch) return parseInt(monthsMatch[1], 10) * 30;\n    return 999; // 未知日期排在最后\n  }\n\n  /**\r\n   * 生成缓存键\r\n   * @param {string} source - 数据源\r\n   * @param {string} searchTerm - 搜索词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {string} - 缓存键\r\n   */\n  generateCacheKey(source, searchTerm, filters, page, pageSize) {\n    const filterStr = JSON.stringify(filters);\n    return `jobs_${source}_${searchTerm}_${filterStr}_${page}_${pageSize}`;\n  }\n\n  /**\r\n   * 批量处理请求\r\n   * @param {Array} requests - 请求列表\r\n   * @returns {Promise<Array>} - 处理结果\r\n   */\n  async processBatchRequests(requests) {\n    const batches = [];\n    for (let i = 0; i < requests.length; i += this.maxConcurrentRequests) {\n      batches.push(requests.slice(i, i + this.maxConcurrentRequests));\n    }\n    const results = [];\n    for (const batch of batches) {\n      const batchResults = await Promise.allSettled(batch);\n      results.push(...batchResults);\n    }\n    return results;\n  }\n\n  /**\r\n   * 优化批量大小\r\n   * @param {string} networkSpeed - 网络速度\r\n   * @param {number} responseTime - 响应时间\r\n   * @returns {number} - 优化后的批量大小\r\n   */\n  optimizeBatchSize(networkSpeed, responseTime) {\n    let batchSize = 20; // 默认批量大小\n\n    if (networkSpeed === 'fast' && responseTime < 1000) {\n      batchSize = 50;\n    } else if (networkSpeed === 'slow' || responseTime > 5000) {\n      batchSize = 10;\n    }\n    return Math.min(batchSize, 100); // 最大不超过100\n  }\n\n  /**\r\n   * 重置加载状态\r\n   */\n  reset() {\n    this.requestQueue = [];\n    this.loadedJobsGlobal.clear();\n    this.deduplicationService.reset();\n    console.log('DataLoader 状态已重置');\n  }\n\n  /**\r\n   * 获取加载统计\r\n   * @returns {Object} - 统计信息\r\n   */\n  getStats() {\n    return {\n      loadedJobsCount: this.loadedJobsGlobal.size,\n      queueLength: this.requestQueue.length,\n      deduplicationStats: this.deduplicationService.getStats()\n    };\n  }\n\n  /**\r\n   * 设置最大并发请求数\r\n   * @param {number} maxRequests - 最大并发数\r\n   */\n  setMaxConcurrentRequests(maxRequests) {\n    this.maxConcurrentRequests = Math.max(1, Math.min(maxRequests, 10));\n  }\n}\nexport default DataLoader;","map":{"version":3,"names":["DeduplicationService","DataLoader","constructor","apiAdapters","cacheService","deduplicationService","requestQueue","maxConcurrentRequests","loadedJobsGlobal","Set","loadJobsFromAllSources","searchTerm","filters","page","pageSize","console","log","pageDeduplicationService","jobId","seenJobIds","add","sourcePromises","Object","entries","map","sourceName","adapter","loadJobsFromSource","sourceResults","Promise","allSettled","jobsBySource","totalAvailable","forEach","result","index","keys","status","value","jobs","length","total","error","reason","uniqueJobs","deduplicateMultipleSources","job","id","filteredJobs","applyFilters","sortedJobs","sortJobs","sort","startIndex","endIndex","paginatedJobs","slice","hasMore","sources","filter","source","deduplicationStats","getStats","message","cacheKey","generateCacheKey","cachedData","get","searchJobsPaginated","searchJobs","Error","Array","isArray","warn","set","jobType","type","toLowerCase","salary","min","max","location","includes","skills","some","skill","jobSkill","company","dateRange","postedDate","daysAgo","parseDateToDaysAgo","sortBy","a","b","aDays","bDays","localeCompare","title","sourcePriority","aPriority","bPriority","dateStr","daysMatch","match","parseInt","weeksMatch","monthsMatch","filterStr","JSON","stringify","processBatchRequests","requests","batches","i","push","results","batch","batchResults","optimizeBatchSize","networkSpeed","responseTime","batchSize","Math","reset","clear","loadedJobsCount","size","queueLength","setMaxConcurrentRequests","maxRequests"],"sources":["D:/Kiro/remote-job-website/src/services/DataLoader.js"],"sourcesContent":["// 数据加载器\r\n// 处理并行API请求、数据合并和去重\r\n\r\nimport DeduplicationService from './DeduplicationService';\r\n\r\nclass DataLoader {\r\n  constructor(apiAdapters, cacheService) {\r\n    this.apiAdapters = apiAdapters;\r\n    this.cacheService = cacheService;\r\n    this.deduplicationService = new DeduplicationService();\r\n    this.requestQueue = [];\r\n    this.maxConcurrentRequests = 3;\r\n    this.loadedJobsGlobal = new Set(); // 全局已加载工作追踪\r\n  }\r\n\r\n  /**\r\n   * 从所有来源加载工作\r\n   * @param {string} searchTerm - 搜索关键词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {Promise<Object>} - 加载结果\r\n   */\r\n  async loadJobsFromAllSources(searchTerm = '', filters = {}, page = 0, pageSize = 20) {\r\n    console.log(`加载工作数据 - 搜索词: \"${searchTerm}\", 页码: ${page}, 页面大小: ${pageSize}`);\r\n    \r\n    try {\r\n      // 为每个页面创建新的去重服务实例，但保持全局追踪\r\n      const pageDeduplicationService = new DeduplicationService();\r\n      \r\n      // 将已知的全局工作添加到页面去重服务中\r\n      for (const jobId of this.loadedJobsGlobal) {\r\n        pageDeduplicationService.seenJobIds.add(jobId);\r\n      }\r\n      \r\n      // 并行从所有来源获取数据\r\n      const sourcePromises = Object.entries(this.apiAdapters).map(([sourceName, adapter]) => \r\n        this.loadJobsFromSource(sourceName, adapter, searchTerm, filters, page, pageSize)\r\n      );\r\n      \r\n      const sourceResults = await Promise.allSettled(sourcePromises);\r\n      \r\n      // 收集成功的结果\r\n      const jobsBySource = {};\r\n      let totalAvailable = 0;\r\n      \r\n      sourceResults.forEach((result, index) => {\r\n        const sourceName = Object.keys(this.apiAdapters)[index];\r\n        \r\n        if (result.status === 'fulfilled' && result.value.jobs.length > 0) {\r\n          jobsBySource[sourceName] = result.value.jobs;\r\n          totalAvailable += result.value.total || result.value.jobs.length;\r\n          console.log(`来源 ${sourceName}: 获取到 ${result.value.jobs.length} 个工作`);\r\n        } else if (result.status === 'rejected') {\r\n          console.error(`来源 ${sourceName} 加载失败:`, result.reason);\r\n          jobsBySource[sourceName] = [];\r\n        }\r\n      });\r\n      \r\n      // 使用增强的去重服务处理多源数据\r\n      const uniqueJobs = pageDeduplicationService.deduplicateMultipleSources(jobsBySource);\r\n      \r\n      // 更新全局已加载工作追踪\r\n      uniqueJobs.forEach(job => {\r\n        if (job.id) {\r\n          this.loadedJobsGlobal.add(job.id);\r\n        }\r\n      });\r\n      \r\n      // 应用额外的筛选和排序\r\n      const filteredJobs = this.applyFilters(uniqueJobs, filters);\r\n      const sortedJobs = this.sortJobs(filteredJobs, filters.sort || 'date');\r\n      \r\n      // 分页处理\r\n      const startIndex = 0; // 因为我们已经在API层面处理了分页\r\n      const endIndex = pageSize;\r\n      const paginatedJobs = sortedJobs.slice(startIndex, endIndex);\r\n      \r\n      const result = {\r\n        jobs: paginatedJobs,\r\n        total: sortedJobs.length,\r\n        totalAvailable: totalAvailable,\r\n        page: page,\r\n        pageSize: pageSize,\r\n        hasMore: sortedJobs.length > pageSize,\r\n        sources: Object.keys(jobsBySource).filter(source => jobsBySource[source].length > 0),\r\n        deduplicationStats: pageDeduplicationService.getStats()\r\n      };\r\n      \r\n      console.log(`数据加载完成 - 返回 ${paginatedJobs.length} 个唯一工作`);\r\n      console.log('去重统计:', pageDeduplicationService.getStats());\r\n      \r\n      return result;\r\n      \r\n    } catch (error) {\r\n      console.error('数据加载失败:', error);\r\n      return {\r\n        jobs: [],\r\n        total: 0,\r\n        totalAvailable: 0,\r\n        page: page,\r\n        pageSize: pageSize,\r\n        hasMore: false,\r\n        sources: [],\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从单个来源加载工作\r\n   * @param {string} sourceName - 来源名称\r\n   * @param {Object} adapter - API适配器\r\n   * @param {string} searchTerm - 搜索关键词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {Promise<Object>} - 加载结果\r\n   */\r\n  async loadJobsFromSource(sourceName, adapter, searchTerm, filters, page, pageSize) {\r\n    try {\r\n      console.log(`从 ${sourceName} 加载数据...`);\r\n      \r\n      // 生成缓存键\r\n      const cacheKey = this.generateCacheKey(sourceName, searchTerm, filters, page, pageSize);\r\n      \r\n      // 检查缓存\r\n      if (this.cacheService) {\r\n        const cachedData = await this.cacheService.get(cacheKey);\r\n        if (cachedData) {\r\n          console.log(`使用 ${sourceName} 的缓存数据`);\r\n          return cachedData;\r\n        }\r\n      }\r\n      \r\n      // 调用API\r\n      let result;\r\n      if (adapter.searchJobsPaginated) {\r\n        // 使用分页方法\r\n        result = await adapter.searchJobsPaginated(searchTerm, filters, page, pageSize);\r\n      } else if (adapter.searchJobs) {\r\n        // 使用标准方法\r\n        result = await adapter.searchJobs(searchTerm, filters, page);\r\n      } else {\r\n        throw new Error(`${sourceName} 适配器不支持工作搜索`);\r\n      }\r\n      \r\n      // 确保结果格式正确\r\n      if (!result || !Array.isArray(result.jobs)) {\r\n        console.warn(`${sourceName} 返回了无效的数据格式`);\r\n        return { jobs: [], total: 0 };\r\n      }\r\n      \r\n      // 缓存结果\r\n      if (this.cacheService && result.jobs.length > 0) {\r\n        await this.cacheService.set(cacheKey, result);\r\n      }\r\n      \r\n      return result;\r\n      \r\n    } catch (error) {\r\n      console.error(`从 ${sourceName} 加载数据失败:`, error);\r\n      return { jobs: [], total: 0, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用筛选条件\r\n   * @param {Array} jobs - 工作列表\r\n   * @param {Object} filters - 筛选条件\r\n   * @returns {Array} - 筛选后的工作列表\r\n   */\r\n  applyFilters(jobs, filters) {\r\n    let filteredJobs = [...jobs];\r\n    \r\n    // 工作类型筛选\r\n    if (filters.jobType) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.type && job.type.toLowerCase() === filters.jobType.toLowerCase()\r\n      );\r\n    }\r\n    \r\n    // 薪资范围筛选\r\n    if (filters.salary) {\r\n      const { min, max } = filters.salary;\r\n      filteredJobs = filteredJobs.filter(job => {\r\n        const salary = job.salary || 0;\r\n        return (!min || salary >= min) && (!max || salary <= max);\r\n      });\r\n    }\r\n    \r\n    // 位置筛选\r\n    if (filters.location && filters.location !== 'remote') {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.location && job.location.toLowerCase().includes(filters.location.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    // 技能筛选\r\n    if (filters.skills && filters.skills.length > 0) {\r\n      filteredJobs = filteredJobs.filter(job => {\r\n        if (!job.skills || !Array.isArray(job.skills)) return false;\r\n        return filters.skills.some(skill => \r\n          job.skills.some(jobSkill => \r\n            jobSkill.toLowerCase().includes(skill.toLowerCase())\r\n          )\r\n        );\r\n      });\r\n    }\r\n    \r\n    // 公司筛选\r\n    if (filters.company) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.company && job.company.toLowerCase().includes(filters.company.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    // 发布时间筛选\r\n    if (filters.dateRange) {\r\n      filteredJobs = filteredJobs.filter(job => {\r\n        if (!job.postedDate) return true;\r\n        \r\n        const daysAgo = this.parseDateToDaysAgo(job.postedDate);\r\n        return daysAgo <= filters.dateRange;\r\n      });\r\n    }\r\n    \r\n    return filteredJobs;\r\n  }\r\n\r\n  /**\r\n   * 排序工作列表\r\n   * @param {Array} jobs - 工作列表\r\n   * @param {string} sortBy - 排序方式\r\n   * @returns {Array} - 排序后的工作列表\r\n   */\r\n  sortJobs(jobs, sortBy = 'date') {\r\n    const sortedJobs = [...jobs];\r\n    \r\n    switch (sortBy) {\r\n      case 'date':\r\n        return sortedJobs.sort((a, b) => {\r\n          const aDays = this.parseDateToDaysAgo(a.postedDate);\r\n          const bDays = this.parseDateToDaysAgo(b.postedDate);\r\n          return aDays - bDays; // 最新的在前面\r\n        });\r\n      \r\n      case 'salary':\r\n        return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\r\n      \r\n      case 'company':\r\n        return sortedJobs.sort((a, b) => (a.company || '').localeCompare(b.company || ''));\r\n      \r\n      case 'title':\r\n        return sortedJobs.sort((a, b) => (a.title || '').localeCompare(b.title || ''));\r\n      \r\n      case 'relevance':\r\n        // 基于来源优先级和其他因素排序\r\n        return sortedJobs.sort((a, b) => {\r\n          const sourcePriority = { 'LinkedIn': 3, 'RemoteOK': 2, 'WeWorkRemotely': 1 };\r\n          const aPriority = sourcePriority[a.source] || 0;\r\n          const bPriority = sourcePriority[b.source] || 0;\r\n          \r\n          if (aPriority !== bPriority) {\r\n            return bPriority - aPriority;\r\n          }\r\n          \r\n          // 如果来源优先级相同，按日期排序\r\n          const aDays = this.parseDateToDaysAgo(a.postedDate);\r\n          const bDays = this.parseDateToDaysAgo(b.postedDate);\r\n          return aDays - bDays;\r\n        });\r\n      \r\n      default:\r\n        return sortedJobs;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析日期字符串为天数\r\n   * @param {string} dateStr - 日期字符串\r\n   * @returns {number} - 天数\r\n   */\r\n  parseDateToDaysAgo(dateStr) {\r\n    if (!dateStr) return 999;\r\n    \r\n    if (dateStr === 'Today') return 0;\r\n    if (dateStr === 'Yesterday') return 1;\r\n    \r\n    const daysMatch = dateStr.match(/(\\d+)\\s*days?\\s*ago/i);\r\n    if (daysMatch) return parseInt(daysMatch[1], 10);\r\n    \r\n    const weeksMatch = dateStr.match(/(\\d+)\\s*weeks?\\s*ago/i);\r\n    if (weeksMatch) return parseInt(weeksMatch[1], 10) * 7;\r\n    \r\n    const monthsMatch = dateStr.match(/(\\d+)\\s*months?\\s*ago/i);\r\n    if (monthsMatch) return parseInt(monthsMatch[1], 10) * 30;\r\n    \r\n    return 999; // 未知日期排在最后\r\n  }\r\n\r\n  /**\r\n   * 生成缓存键\r\n   * @param {string} source - 数据源\r\n   * @param {string} searchTerm - 搜索词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {string} - 缓存键\r\n   */\r\n  generateCacheKey(source, searchTerm, filters, page, pageSize) {\r\n    const filterStr = JSON.stringify(filters);\r\n    return `jobs_${source}_${searchTerm}_${filterStr}_${page}_${pageSize}`;\r\n  }\r\n\r\n  /**\r\n   * 批量处理请求\r\n   * @param {Array} requests - 请求列表\r\n   * @returns {Promise<Array>} - 处理结果\r\n   */\r\n  async processBatchRequests(requests) {\r\n    const batches = [];\r\n    for (let i = 0; i < requests.length; i += this.maxConcurrentRequests) {\r\n      batches.push(requests.slice(i, i + this.maxConcurrentRequests));\r\n    }\r\n    \r\n    const results = [];\r\n    for (const batch of batches) {\r\n      const batchResults = await Promise.allSettled(batch);\r\n      results.push(...batchResults);\r\n    }\r\n    \r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * 优化批量大小\r\n   * @param {string} networkSpeed - 网络速度\r\n   * @param {number} responseTime - 响应时间\r\n   * @returns {number} - 优化后的批量大小\r\n   */\r\n  optimizeBatchSize(networkSpeed, responseTime) {\r\n    let batchSize = 20; // 默认批量大小\r\n    \r\n    if (networkSpeed === 'fast' && responseTime < 1000) {\r\n      batchSize = 50;\r\n    } else if (networkSpeed === 'slow' || responseTime > 5000) {\r\n      batchSize = 10;\r\n    }\r\n    \r\n    return Math.min(batchSize, 100); // 最大不超过100\r\n  }\r\n\r\n  /**\r\n   * 重置加载状态\r\n   */\r\n  reset() {\r\n    this.requestQueue = [];\r\n    this.loadedJobsGlobal.clear();\r\n    this.deduplicationService.reset();\r\n    console.log('DataLoader 状态已重置');\r\n  }\r\n\r\n  /**\r\n   * 获取加载统计\r\n   * @returns {Object} - 统计信息\r\n   */\r\n  getStats() {\r\n    return {\r\n      loadedJobsCount: this.loadedJobsGlobal.size,\r\n      queueLength: this.requestQueue.length,\r\n      deduplicationStats: this.deduplicationService.getStats()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 设置最大并发请求数\r\n   * @param {number} maxRequests - 最大并发数\r\n   */\r\n  setMaxConcurrentRequests(maxRequests) {\r\n    this.maxConcurrentRequests = Math.max(1, Math.min(maxRequests, 10));\r\n  }\r\n}\r\n\r\nexport default DataLoader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}