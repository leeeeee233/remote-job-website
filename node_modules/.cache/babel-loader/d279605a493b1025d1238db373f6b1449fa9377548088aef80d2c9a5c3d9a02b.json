{"ast":null,"code":"// 真实的工作数据服务\n// 使用公开的API和RSS feed获取远程工作数据\nimport { LinkedInApiAdapter, WWRApiAdapter, CacheService } from './api';\n\n// 导入RemoteOK API服务\nimport { fetchRemoteOKJobs } from './realJobAPI';\n\n// 导入新的数据加载器和去重服务\nimport DataLoader from './DataLoader';\nimport DeduplicationService from './DeduplicationService';\n\n// 创建API适配器实例\nconst linkedInAdapter = new LinkedInApiAdapter({\n  clientId: process.env.REACT_APP_LINKEDIN_CLIENT_ID,\n  clientSecret: process.env.REACT_APP_LINKEDIN_CLIENT_SECRET\n});\nconst wwrAdapter = new WWRApiAdapter({\n  apiKey: process.env.REACT_APP_RSS2JSON_API_KEY\n});\n\n// 创建缓存服务实例\nconst cacheService = new CacheService({\n  memoryTTL: 5 * 60 * 1000,\n  // 5分钟\n  storageTTL: 60 * 60 * 1000 // 1小时\n});\n\n// 创建数据加载器实例\nconst dataLoader = new DataLoader({\n  LinkedIn: linkedInAdapter,\n  WeWorkRemotely: wwrAdapter,\n  RemoteOK: {\n    searchJobs: async (searchTerm, filters, page) => {\n      const jobs = await fetchRemoteOKJobs();\n      return {\n        jobs,\n        total: jobs.length,\n        page,\n        pageSize: jobs.length\n      };\n    }\n  }\n}, cacheService);\n\n// 创建全局去重服务实例\nconst globalDeduplicationService = new DeduplicationService();\n\n// WeWorkRemotely API 集成\nexport const fetchWeWorkRemotelyJobs = async (searchTerm = '', category = '') => {\n  try {\n    // 生成缓存键\n    const cacheKey = CacheService.generateKey('wwr_jobs', {\n      searchTerm,\n      category\n    });\n\n    // 检查缓存\n    const cachedData = await cacheService.get(cacheKey);\n    if (cachedData) {\n      console.log('Using cached WeWorkRemotely jobs');\n      return cachedData;\n    }\n\n    // 调用API\n    console.log('Fetching WeWorkRemotely jobs with search term:', searchTerm, 'and category:', category);\n    const result = await wwrAdapter.searchJobs(searchTerm, category);\n\n    // 缓存结果\n    await cacheService.set(cacheKey, result.jobs);\n    return result.jobs;\n  } catch (error) {\n    console.error('Error fetching WeWorkRemotely jobs:', error);\n    // 返回空数组\n    return [];\n  }\n};\n\n// LinkedIn Jobs API 集成\nexport const fetchLinkedInJobs = async (searchTerm = '', location = 'remote') => {\n  try {\n    // 生成缓存键\n    const cacheKey = CacheService.generateKey('linkedin_jobs', {\n      searchTerm,\n      location\n    });\n\n    // 检查缓存\n    const cachedData = await cacheService.get(cacheKey);\n    if (cachedData) {\n      console.log('Using cached LinkedIn jobs');\n      return cachedData;\n    }\n\n    // 调用API\n    console.log('Fetching LinkedIn jobs with search term:', searchTerm, 'and location:', location);\n    const result = await linkedInAdapter.searchJobs(searchTerm, {\n      location\n    }, 0);\n\n    // 缓存结果\n    await cacheService.set(cacheKey, result.jobs);\n    return result.jobs;\n  } catch (error) {\n    console.error('Error fetching LinkedIn jobs:', error);\n    // 返回空数组\n    return [];\n  }\n};\n\n// 通用的远程工作搜索函数 - 使用新的DataLoader确保无重复\nexport const searchRemoteJobs = async (searchTerm = '', filters = {}, page = 0, pageSize = 50) => {\n  try {\n    console.log(`搜索远程工作 - 关键词: \"${searchTerm}\", 页码: ${page}, 页面大小: ${pageSize}`);\n\n    // 使用DataLoader获取去重后的数据\n    const result = await dataLoader.loadJobsFromAllSources(searchTerm, filters, page, pageSize);\n\n    // 如果没有数据，尝试使用旧的方法作为备选\n    if (result.jobs.length === 0 && page === 0) {\n      console.log('DataLoader未返回数据，尝试备选方法...');\n      return await searchRemoteJobsFallback(searchTerm, filters);\n    }\n\n    // 记录去重统计信息\n    if (result.deduplicationStats) {\n      console.log('去重统计:', result.deduplicationStats);\n    }\n    return {\n      jobs: result.jobs,\n      total: result.total,\n      totalAvailable: result.totalAvailable,\n      page: result.page,\n      pageSize: result.pageSize,\n      hasMore: result.hasMore,\n      sources: result.sources || [],\n      deduplicationStats: result.deduplicationStats\n    };\n  } catch (error) {\n    console.error('Error searching remote jobs:', error);\n\n    // 错误时尝试备选方法\n    if (page === 0) {\n      console.log('主要方法失败，尝试备选方法...');\n      return await searchRemoteJobsFallback(searchTerm, filters);\n    }\n\n    // 返回空结果\n    return {\n      jobs: [],\n      total: 0,\n      totalAvailable: 0,\n      page: page,\n      pageSize: pageSize,\n      hasMore: false,\n      sources: [],\n      error: error.message\n    };\n  }\n};\n\n// 备选的搜索方法（保持向后兼容）\nconst searchRemoteJobsFallback = async (searchTerm = '', filters = {}) => {\n  try {\n    var _weWorkJobs$reason, _linkedInJobs$reason, _remoteOKJobs$reason;\n    console.log('使用备选搜索方法...');\n\n    // 首先尝试从mockData获取数据作为基础\n    const {\n      mockJobs\n    } = await import('./mockData');\n    console.log('加载了', mockJobs.length, '个模拟工作作为基础数据');\n\n    // 并行调用多个API，但设置较短的超时时间\n    const apiPromises = [Promise.race([fetchWeWorkRemotelyJobs(searchTerm, filters.category), new Promise((_, reject) => setTimeout(() => reject(new Error('WeWorkRemotely API timeout')), 8000))]), Promise.race([fetchLinkedInJobs(searchTerm, filters.location || 'remote'), new Promise((_, reject) => setTimeout(() => reject(new Error('LinkedIn API timeout')), 8000))]), Promise.race([fetchRemoteOKJobs(), new Promise((_, reject) => setTimeout(() => reject(new Error('RemoteOK API timeout')), 8000))])];\n    const [weWorkJobs, linkedInJobs, remoteOKJobs] = await Promise.allSettled(apiPromises);\n\n    // 合并结果，包括模拟数据\n    const allJobs = [...mockJobs,\n    // 始终包含模拟数据作为基础\n    ...(weWorkJobs.status === 'fulfilled' ? weWorkJobs.value : []), ...(linkedInJobs.status === 'fulfilled' ? linkedInJobs.value : []), ...(remoteOKJobs.status === 'fulfilled' ? remoteOKJobs.value : [])];\n    console.log('API调用结果:');\n    console.log('- WeWorkRemotely:', weWorkJobs.status === 'fulfilled' ? `${weWorkJobs.value.length} jobs` : `失败: ${(_weWorkJobs$reason = weWorkJobs.reason) === null || _weWorkJobs$reason === void 0 ? void 0 : _weWorkJobs$reason.message}`);\n    console.log('- LinkedIn:', linkedInJobs.status === 'fulfilled' ? `${linkedInJobs.value.length} jobs` : `失败: ${(_linkedInJobs$reason = linkedInJobs.reason) === null || _linkedInJobs$reason === void 0 ? void 0 : _linkedInJobs$reason.message}`);\n    console.log('- RemoteOK:', remoteOKJobs.status === 'fulfilled' ? `${remoteOKJobs.value.length} jobs` : `失败: ${(_remoteOKJobs$reason = remoteOKJobs.reason) === null || _remoteOKJobs$reason === void 0 ? void 0 : _remoteOKJobs$reason.message}`);\n    console.log('- 模拟数据:', mockJobs.length, 'jobs');\n    console.log('- 总计:', allJobs.length, 'jobs');\n\n    // 即使所有API都失败，我们仍然有模拟数据\n    if (allJobs.length === 0) {\n      console.error('No jobs available, including mock data');\n      return {\n        jobs: [],\n        total: 0,\n        sources: ['No Data Available']\n      };\n    }\n\n    // 使用全局去重服务进行去重\n    const uniqueJobs = globalDeduplicationService.deduplicateJobs(allJobs);\n\n    // 按搜索词过滤\n    let filteredJobs = uniqueJobs;\n    if (searchTerm) {\n      filteredJobs = uniqueJobs.filter(job => job.title.toLowerCase().includes(searchTerm.toLowerCase()) || job.company.toLowerCase().includes(searchTerm.toLowerCase()) || job.description.toLowerCase().includes(searchTerm.toLowerCase()) || job.skills && job.skills.some(skill => skill.toLowerCase().includes(searchTerm.toLowerCase())));\n    }\n\n    // 应用其他筛选条件\n    if (filters.jobType) {\n      filteredJobs = filteredJobs.filter(job => job.type && job.type.toLowerCase() === filters.jobType.toLowerCase());\n    }\n    if (filters.salary) {\n      const {\n        min,\n        max\n      } = filters.salary;\n      filteredJobs = filteredJobs.filter(job => (!min || job.salary >= min) && (!max || job.salary <= max));\n    }\n\n    // 排序\n    const sortedJobs = sortJobs(filteredJobs, filters.sort || 'date');\n\n    // 获取数据来源，确保模拟数据也有正确的source标记\n    const jobsWithSource = sortedJobs.map(job => ({\n      ...job,\n      source: job.source || 'Mock Data' // 确保每个工作都有source标记\n    }));\n    const sources = [...new Set(jobsWithSource.map(job => job.source))];\n    const result = {\n      jobs: jobsWithSource,\n      total: jobsWithSource.length,\n      sources,\n      deduplicationStats: globalDeduplicationService.getStats()\n    };\n    console.log(`备选方法完成 - 返回 ${sortedJobs.length} 个唯一工作`);\n    console.log('去重统计:', globalDeduplicationService.getStats());\n    return result;\n  } catch (error) {\n    console.error('Error in fallback search:', error);\n    return {\n      jobs: [],\n      total: 0,\n      sources: [],\n      error: error.message\n    };\n  }\n};\n\n// 获取工作详情\nexport const getJobDetails = async (jobId, source) => {\n  try {\n    // 生成缓存键\n    const cacheKey = `job_detail_${jobId}`;\n\n    // 检查缓存\n    const cachedData = await cacheService.get(cacheKey);\n    if (cachedData) {\n      console.log('Using cached job details');\n      return cachedData;\n    }\n\n    // 根据来源选择适当的API适配器\n    let jobDetail;\n    switch (source) {\n      case 'LinkedIn':\n        jobDetail = await linkedInAdapter.getJobDetails(jobId);\n        break;\n      case 'WeWorkRemotely':\n        jobDetail = await wwrAdapter.getJobDetails(jobId);\n        break;\n      default:\n        // 如果没有指定来源或来源不支持，尝试从所有适配器获取\n        const results = await Promise.allSettled([linkedInAdapter.getJobDetails(jobId), wwrAdapter.getJobDetails(jobId)]);\n\n        // 使用第一个成功的结果\n        const successResult = results.find(result => result.status === 'fulfilled');\n        if (successResult) {\n          jobDetail = successResult.value;\n        } else {\n          throw new Error(`Job with ID ${jobId} not found`);\n        }\n    }\n\n    // 缓存结果\n    await cacheService.set(cacheKey, jobDetail);\n    return jobDetail;\n  } catch (error) {\n    console.error(`Error fetching job details for ${jobId}:`, error);\n    throw error;\n  }\n};\n\n// 刷新缓存\nexport const refreshCache = async () => {\n  try {\n    await cacheService.clear();\n    console.log('Job cache cleared');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error clearing job cache:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// 获取缓存统计\nexport const getCacheStats = () => {\n  return cacheService.getStats();\n};\n\n// 增强的去重函数\nconst removeDuplicateJobs = jobs => {\n  const seen = new Set();\n  const seenIds = new Set();\n  return jobs.filter(job => {\n    // 首先检查ID是否重复\n    if (job.id && seenIds.has(job.id)) {\n      console.log(`Duplicate job ID found: ${job.id} - ${job.title} at ${job.company}`);\n      return false;\n    }\n\n    // 创建多个唯一标识符来检查重复\n    const titleCompanyKey = `${job.title}-${job.company}`.toLowerCase().replace(/\\s+/g, '');\n    const titleLocationKey = `${job.title}-${job.location}`.toLowerCase().replace(/\\s+/g, '');\n    const companyTitleKey = `${job.company}-${job.title}`.toLowerCase().replace(/\\s+/g, '');\n\n    // 检查是否已存在相似的工作\n    if (seen.has(titleCompanyKey) || seen.has(titleLocationKey) || seen.has(companyTitleKey)) {\n      console.log(`Duplicate job found: ${job.title} at ${job.company}`);\n      return false;\n    }\n\n    // 额外检查：如果标题和公司名称非常相似，也认为是重复\n    for (const existingKey of seen) {\n      const similarity = calculateSimilarity(titleCompanyKey, existingKey);\n      if (similarity > 0.85) {\n        // 85%相似度阈值\n        console.log(`Similar job found (${Math.round(similarity * 100)}% similarity): ${job.title} at ${job.company}`);\n        return false;\n      }\n    }\n\n    // 记录所有标识符\n    if (job.id) seenIds.add(job.id);\n    seen.add(titleCompanyKey);\n    seen.add(titleLocationKey);\n    seen.add(companyTitleKey);\n    return true;\n  });\n};\n\n// 计算字符串相似度的简单函数\nconst calculateSimilarity = (str1, str2) => {\n  const longer = str1.length > str2.length ? str1 : str2;\n  const shorter = str1.length > str2.length ? str2 : str1;\n  if (longer.length === 0) return 1.0;\n  const editDistance = levenshteinDistance(longer, shorter);\n  return (longer.length - editDistance) / longer.length;\n};\n\n// 计算编辑距离\nconst levenshteinDistance = (str1, str2) => {\n  const matrix = [];\n  for (let i = 0; i <= str2.length; i++) {\n    matrix[i] = [i];\n  }\n  for (let j = 0; j <= str1.length; j++) {\n    matrix[0][j] = j;\n  }\n  for (let i = 1; i <= str2.length; i++) {\n    for (let j = 1; j <= str1.length; j++) {\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(matrix[i - 1][j - 1] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j] + 1);\n      }\n    }\n  }\n  return matrix[str2.length][str1.length];\n};\n\n// 排序函数\nconst sortJobs = (jobs, sortBy = 'date') => {\n  const sortedJobs = [...jobs];\n  switch (sortBy) {\n    case 'date':\n      // 按发布日期排序（最新的在前面）\n      return sortedJobs.sort((a, b) => {\n        // 优先显示\"Today\"\n        if (a.postedDate === 'Today' && b.postedDate !== 'Today') return -1;\n        if (a.postedDate !== 'Today' && b.postedDate === 'Today') return 1;\n\n        // 优先显示\"Yesterday\"\n        if (a.postedDate === 'Yesterday' && b.postedDate !== 'Yesterday' && b.postedDate !== 'Today') return -1;\n        if (a.postedDate !== 'Yesterday' && a.postedDate !== 'Today' && b.postedDate === 'Yesterday') return 1;\n\n        // 比较天数\n        const getNumericDays = dateStr => {\n          if (dateStr.includes('days ago')) {\n            return parseInt(dateStr.split(' ')[0], 10);\n          }\n          if (dateStr.includes('weeks ago')) {\n            return parseInt(dateStr.split(' ')[0], 10) * 7;\n          }\n          if (dateStr.includes('months ago')) {\n            return parseInt(dateStr.split(' ')[0], 10) * 30;\n          }\n          return 0;\n        };\n        return getNumericDays(a.postedDate) - getNumericDays(b.postedDate);\n      });\n    case 'salary':\n      // 按薪资排序（高的在前面）\n      return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\n    case 'company':\n      // 按公司名称排序\n      return sortedJobs.sort((a, b) => a.company.localeCompare(b.company));\n    case 'title':\n      // 按职位名称排序\n      return sortedJobs.sort((a, b) => a.title.localeCompare(b.title));\n    default:\n      return sortedJobs;\n  }\n};\nexport default {\n  searchRemoteJobs,\n  fetchWeWorkRemotelyJobs,\n  fetchLinkedInJobs,\n  getJobDetails,\n  refreshCache,\n  getCacheStats\n};","map":{"version":3,"names":["LinkedInApiAdapter","WWRApiAdapter","CacheService","fetchRemoteOKJobs","DataLoader","DeduplicationService","linkedInAdapter","clientId","process","env","REACT_APP_LINKEDIN_CLIENT_ID","clientSecret","REACT_APP_LINKEDIN_CLIENT_SECRET","wwrAdapter","apiKey","REACT_APP_RSS2JSON_API_KEY","cacheService","memoryTTL","storageTTL","dataLoader","LinkedIn","WeWorkRemotely","RemoteOK","searchJobs","searchTerm","filters","page","jobs","total","length","pageSize","globalDeduplicationService","fetchWeWorkRemotelyJobs","category","cacheKey","generateKey","cachedData","get","console","log","result","set","error","fetchLinkedInJobs","location","searchRemoteJobs","loadJobsFromAllSources","searchRemoteJobsFallback","deduplicationStats","totalAvailable","hasMore","sources","message","_weWorkJobs$reason","_linkedInJobs$reason","_remoteOKJobs$reason","mockJobs","apiPromises","Promise","race","_","reject","setTimeout","Error","weWorkJobs","linkedInJobs","remoteOKJobs","allSettled","allJobs","status","value","reason","uniqueJobs","deduplicateJobs","filteredJobs","filter","job","title","toLowerCase","includes","company","description","skills","some","skill","jobType","type","salary","min","max","sortedJobs","sortJobs","sort","jobsWithSource","map","source","Set","getStats","getJobDetails","jobId","jobDetail","results","successResult","find","refreshCache","clear","success","getCacheStats","removeDuplicateJobs","seen","seenIds","id","has","titleCompanyKey","replace","titleLocationKey","companyTitleKey","existingKey","similarity","calculateSimilarity","Math","round","add","str1","str2","longer","shorter","editDistance","levenshteinDistance","matrix","i","j","charAt","sortBy","a","b","postedDate","getNumericDays","dateStr","parseInt","split","localeCompare"],"sources":["D:/Kiro/remote-job-website/src/services/jobService.js"],"sourcesContent":["// 真实的工作数据服务\r\n// 使用公开的API和RSS feed获取远程工作数据\r\nimport { \r\n  LinkedInApiAdapter, \r\n  WWRApiAdapter, \r\n  CacheService \r\n} from './api';\r\n\r\n// 导入RemoteOK API服务\r\nimport { fetchRemoteOKJobs } from './realJobAPI';\r\n\r\n// 导入新的数据加载器和去重服务\r\nimport DataLoader from './DataLoader';\r\nimport DeduplicationService from './DeduplicationService';\r\n\r\n// 创建API适配器实例\r\nconst linkedInAdapter = new LinkedInApiAdapter({\r\n  clientId: process.env.REACT_APP_LINKEDIN_CLIENT_ID,\r\n  clientSecret: process.env.REACT_APP_LINKEDIN_CLIENT_SECRET\r\n});\r\n\r\nconst wwrAdapter = new WWRApiAdapter({\r\n  apiKey: process.env.REACT_APP_RSS2JSON_API_KEY\r\n});\r\n\r\n// 创建缓存服务实例\r\nconst cacheService = new CacheService({\r\n  memoryTTL: 5 * 60 * 1000, // 5分钟\r\n  storageTTL: 60 * 60 * 1000 // 1小时\r\n});\r\n\r\n// 创建数据加载器实例\r\nconst dataLoader = new DataLoader({\r\n  LinkedIn: linkedInAdapter,\r\n  WeWorkRemotely: wwrAdapter,\r\n  RemoteOK: { \r\n    searchJobs: async (searchTerm, filters, page) => {\r\n      const jobs = await fetchRemoteOKJobs();\r\n      return { jobs, total: jobs.length, page, pageSize: jobs.length };\r\n    }\r\n  }\r\n}, cacheService);\r\n\r\n// 创建全局去重服务实例\r\nconst globalDeduplicationService = new DeduplicationService();\r\n\r\n// WeWorkRemotely API 集成\r\nexport const fetchWeWorkRemotelyJobs = async (searchTerm = '', category = '') => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = CacheService.generateKey('wwr_jobs', { searchTerm, category });\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached WeWorkRemotely jobs');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 调用API\r\n    console.log('Fetching WeWorkRemotely jobs with search term:', searchTerm, 'and category:', category);\r\n    const result = await wwrAdapter.searchJobs(searchTerm, category);\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, result.jobs);\r\n    \r\n    return result.jobs;\r\n  } catch (error) {\r\n    console.error('Error fetching WeWorkRemotely jobs:', error);\r\n    // 返回空数组\r\n    return [];\r\n  }\r\n};\r\n\r\n// LinkedIn Jobs API 集成\r\nexport const fetchLinkedInJobs = async (searchTerm = '', location = 'remote') => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = CacheService.generateKey('linkedin_jobs', { searchTerm, location });\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached LinkedIn jobs');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 调用API\r\n    console.log('Fetching LinkedIn jobs with search term:', searchTerm, 'and location:', location);\r\n    const result = await linkedInAdapter.searchJobs(searchTerm, { location }, 0);\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, result.jobs);\r\n    \r\n    return result.jobs;\r\n  } catch (error) {\r\n    console.error('Error fetching LinkedIn jobs:', error);\r\n    // 返回空数组\r\n    return [];\r\n  }\r\n};\r\n\r\n// 通用的远程工作搜索函数 - 使用新的DataLoader确保无重复\r\nexport const searchRemoteJobs = async (searchTerm = '', filters = {}, page = 0, pageSize = 50) => {\r\n  try {\r\n    console.log(`搜索远程工作 - 关键词: \"${searchTerm}\", 页码: ${page}, 页面大小: ${pageSize}`);\r\n    \r\n    // 使用DataLoader获取去重后的数据\r\n    const result = await dataLoader.loadJobsFromAllSources(searchTerm, filters, page, pageSize);\r\n    \r\n    // 如果没有数据，尝试使用旧的方法作为备选\r\n    if (result.jobs.length === 0 && page === 0) {\r\n      console.log('DataLoader未返回数据，尝试备选方法...');\r\n      return await searchRemoteJobsFallback(searchTerm, filters);\r\n    }\r\n    \r\n    // 记录去重统计信息\r\n    if (result.deduplicationStats) {\r\n      console.log('去重统计:', result.deduplicationStats);\r\n    }\r\n    \r\n    return {\r\n      jobs: result.jobs,\r\n      total: result.total,\r\n      totalAvailable: result.totalAvailable,\r\n      page: result.page,\r\n      pageSize: result.pageSize,\r\n      hasMore: result.hasMore,\r\n      sources: result.sources || [],\r\n      deduplicationStats: result.deduplicationStats\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error searching remote jobs:', error);\r\n    \r\n    // 错误时尝试备选方法\r\n    if (page === 0) {\r\n      console.log('主要方法失败，尝试备选方法...');\r\n      return await searchRemoteJobsFallback(searchTerm, filters);\r\n    }\r\n    \r\n    // 返回空结果\r\n    return {\r\n      jobs: [],\r\n      total: 0,\r\n      totalAvailable: 0,\r\n      page: page,\r\n      pageSize: pageSize,\r\n      hasMore: false,\r\n      sources: [],\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// 备选的搜索方法（保持向后兼容）\r\nconst searchRemoteJobsFallback = async (searchTerm = '', filters = {}) => {\r\n  try {\r\n    console.log('使用备选搜索方法...');\r\n    \r\n    // 首先尝试从mockData获取数据作为基础\r\n    const { mockJobs } = await import('./mockData');\r\n    console.log('加载了', mockJobs.length, '个模拟工作作为基础数据');\r\n    \r\n    // 并行调用多个API，但设置较短的超时时间\r\n    const apiPromises = [\r\n      Promise.race([\r\n        fetchWeWorkRemotelyJobs(searchTerm, filters.category),\r\n        new Promise((_, reject) => setTimeout(() => reject(new Error('WeWorkRemotely API timeout')), 8000))\r\n      ]),\r\n      Promise.race([\r\n        fetchLinkedInJobs(searchTerm, filters.location || 'remote'),\r\n        new Promise((_, reject) => setTimeout(() => reject(new Error('LinkedIn API timeout')), 8000))\r\n      ]),\r\n      Promise.race([\r\n        fetchRemoteOKJobs(),\r\n        new Promise((_, reject) => setTimeout(() => reject(new Error('RemoteOK API timeout')), 8000))\r\n      ])\r\n    ];\r\n    \r\n    const [weWorkJobs, linkedInJobs, remoteOKJobs] = await Promise.allSettled(apiPromises);\r\n    \r\n    // 合并结果，包括模拟数据\r\n    const allJobs = [\r\n      ...mockJobs, // 始终包含模拟数据作为基础\r\n      ...(weWorkJobs.status === 'fulfilled' ? weWorkJobs.value : []),\r\n      ...(linkedInJobs.status === 'fulfilled' ? linkedInJobs.value : []),\r\n      ...(remoteOKJobs.status === 'fulfilled' ? remoteOKJobs.value : [])\r\n    ];\r\n    \r\n    console.log('API调用结果:');\r\n    console.log('- WeWorkRemotely:', weWorkJobs.status === 'fulfilled' ? `${weWorkJobs.value.length} jobs` : `失败: ${weWorkJobs.reason?.message}`);\r\n    console.log('- LinkedIn:', linkedInJobs.status === 'fulfilled' ? `${linkedInJobs.value.length} jobs` : `失败: ${linkedInJobs.reason?.message}`);\r\n    console.log('- RemoteOK:', remoteOKJobs.status === 'fulfilled' ? `${remoteOKJobs.value.length} jobs` : `失败: ${remoteOKJobs.reason?.message}`);\r\n    console.log('- 模拟数据:', mockJobs.length, 'jobs');\r\n    console.log('- 总计:', allJobs.length, 'jobs');\r\n    \r\n    // 即使所有API都失败，我们仍然有模拟数据\r\n    if (allJobs.length === 0) {\r\n      console.error('No jobs available, including mock data');\r\n      return {\r\n        jobs: [],\r\n        total: 0,\r\n        sources: ['No Data Available']\r\n      };\r\n    }\r\n    \r\n    // 使用全局去重服务进行去重\r\n    const uniqueJobs = globalDeduplicationService.deduplicateJobs(allJobs);\r\n    \r\n    // 按搜索词过滤\r\n    let filteredJobs = uniqueJobs;\r\n    if (searchTerm) {\r\n      filteredJobs = uniqueJobs.filter(job => \r\n        job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        (job.skills && job.skills.some(skill => \r\n          skill.toLowerCase().includes(searchTerm.toLowerCase())\r\n        ))\r\n      );\r\n    }\r\n    \r\n    // 应用其他筛选条件\r\n    if (filters.jobType) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.type && job.type.toLowerCase() === filters.jobType.toLowerCase()\r\n      );\r\n    }\r\n    \r\n    if (filters.salary) {\r\n      const { min, max } = filters.salary;\r\n      filteredJobs = filteredJobs.filter(job => \r\n        (!min || job.salary >= min) && (!max || job.salary <= max)\r\n      );\r\n    }\r\n    \r\n    // 排序\r\n    const sortedJobs = sortJobs(filteredJobs, filters.sort || 'date');\r\n    \r\n    // 获取数据来源，确保模拟数据也有正确的source标记\r\n    const jobsWithSource = sortedJobs.map(job => ({\r\n      ...job,\r\n      source: job.source || 'Mock Data' // 确保每个工作都有source标记\r\n    }));\r\n    \r\n    const sources = [...new Set(jobsWithSource.map(job => job.source))];\r\n    \r\n    const result = {\r\n      jobs: jobsWithSource,\r\n      total: jobsWithSource.length,\r\n      sources,\r\n      deduplicationStats: globalDeduplicationService.getStats()\r\n    };\r\n    \r\n    console.log(`备选方法完成 - 返回 ${sortedJobs.length} 个唯一工作`);\r\n    console.log('去重统计:', globalDeduplicationService.getStats());\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('Error in fallback search:', error);\r\n    return {\r\n      jobs: [],\r\n      total: 0,\r\n      sources: [],\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// 获取工作详情\r\nexport const getJobDetails = async (jobId, source) => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = `job_detail_${jobId}`;\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached job details');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 根据来源选择适当的API适配器\r\n    let jobDetail;\r\n    switch (source) {\r\n      case 'LinkedIn':\r\n        jobDetail = await linkedInAdapter.getJobDetails(jobId);\r\n        break;\r\n      case 'WeWorkRemotely':\r\n        jobDetail = await wwrAdapter.getJobDetails(jobId);\r\n        break;\r\n      default:\r\n        // 如果没有指定来源或来源不支持，尝试从所有适配器获取\r\n        const results = await Promise.allSettled([\r\n          linkedInAdapter.getJobDetails(jobId),\r\n          wwrAdapter.getJobDetails(jobId)\r\n        ]);\r\n        \r\n        // 使用第一个成功的结果\r\n        const successResult = results.find(result => result.status === 'fulfilled');\r\n        if (successResult) {\r\n          jobDetail = successResult.value;\r\n        } else {\r\n          throw new Error(`Job with ID ${jobId} not found`);\r\n        }\r\n    }\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, jobDetail);\r\n    \r\n    return jobDetail;\r\n  } catch (error) {\r\n    console.error(`Error fetching job details for ${jobId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 刷新缓存\r\nexport const refreshCache = async () => {\r\n  try {\r\n    await cacheService.clear();\r\n    console.log('Job cache cleared');\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error clearing job cache:', error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\n// 获取缓存统计\r\nexport const getCacheStats = () => {\r\n  return cacheService.getStats();\r\n};\r\n\r\n// 增强的去重函数\r\nconst removeDuplicateJobs = (jobs) => {\r\n  const seen = new Set();\r\n  const seenIds = new Set();\r\n  \r\n  return jobs.filter(job => {\r\n    // 首先检查ID是否重复\r\n    if (job.id && seenIds.has(job.id)) {\r\n      console.log(`Duplicate job ID found: ${job.id} - ${job.title} at ${job.company}`);\r\n      return false;\r\n    }\r\n    \r\n    // 创建多个唯一标识符来检查重复\r\n    const titleCompanyKey = `${job.title}-${job.company}`.toLowerCase().replace(/\\s+/g, '');\r\n    const titleLocationKey = `${job.title}-${job.location}`.toLowerCase().replace(/\\s+/g, '');\r\n    const companyTitleKey = `${job.company}-${job.title}`.toLowerCase().replace(/\\s+/g, '');\r\n    \r\n    // 检查是否已存在相似的工作\r\n    if (seen.has(titleCompanyKey) || seen.has(titleLocationKey) || seen.has(companyTitleKey)) {\r\n      console.log(`Duplicate job found: ${job.title} at ${job.company}`);\r\n      return false;\r\n    }\r\n    \r\n    // 额外检查：如果标题和公司名称非常相似，也认为是重复\r\n    for (const existingKey of seen) {\r\n      const similarity = calculateSimilarity(titleCompanyKey, existingKey);\r\n      if (similarity > 0.85) { // 85%相似度阈值\r\n        console.log(`Similar job found (${Math.round(similarity * 100)}% similarity): ${job.title} at ${job.company}`);\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    // 记录所有标识符\r\n    if (job.id) seenIds.add(job.id);\r\n    seen.add(titleCompanyKey);\r\n    seen.add(titleLocationKey);\r\n    seen.add(companyTitleKey);\r\n    \r\n    return true;\r\n  });\r\n};\r\n\r\n// 计算字符串相似度的简单函数\r\nconst calculateSimilarity = (str1, str2) => {\r\n  const longer = str1.length > str2.length ? str1 : str2;\r\n  const shorter = str1.length > str2.length ? str2 : str1;\r\n  \r\n  if (longer.length === 0) return 1.0;\r\n  \r\n  const editDistance = levenshteinDistance(longer, shorter);\r\n  return (longer.length - editDistance) / longer.length;\r\n};\r\n\r\n// 计算编辑距离\r\nconst levenshteinDistance = (str1, str2) => {\r\n  const matrix = [];\r\n  \r\n  for (let i = 0; i <= str2.length; i++) {\r\n    matrix[i] = [i];\r\n  }\r\n  \r\n  for (let j = 0; j <= str1.length; j++) {\r\n    matrix[0][j] = j;\r\n  }\r\n  \r\n  for (let i = 1; i <= str2.length; i++) {\r\n    for (let j = 1; j <= str1.length; j++) {\r\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\r\n        matrix[i][j] = matrix[i - 1][j - 1];\r\n      } else {\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j - 1] + 1,\r\n          matrix[i][j - 1] + 1,\r\n          matrix[i - 1][j] + 1\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  return matrix[str2.length][str1.length];\r\n};\r\n\r\n// 排序函数\r\nconst sortJobs = (jobs, sortBy = 'date') => {\r\n  const sortedJobs = [...jobs];\r\n  \r\n  switch (sortBy) {\r\n    case 'date':\r\n      // 按发布日期排序（最新的在前面）\r\n      return sortedJobs.sort((a, b) => {\r\n        // 优先显示\"Today\"\r\n        if (a.postedDate === 'Today' && b.postedDate !== 'Today') return -1;\r\n        if (a.postedDate !== 'Today' && b.postedDate === 'Today') return 1;\r\n        \r\n        // 优先显示\"Yesterday\"\r\n        if (a.postedDate === 'Yesterday' && b.postedDate !== 'Yesterday' && b.postedDate !== 'Today') return -1;\r\n        if (a.postedDate !== 'Yesterday' && a.postedDate !== 'Today' && b.postedDate === 'Yesterday') return 1;\r\n        \r\n        // 比较天数\r\n        const getNumericDays = (dateStr) => {\r\n          if (dateStr.includes('days ago')) {\r\n            return parseInt(dateStr.split(' ')[0], 10);\r\n          }\r\n          if (dateStr.includes('weeks ago')) {\r\n            return parseInt(dateStr.split(' ')[0], 10) * 7;\r\n          }\r\n          if (dateStr.includes('months ago')) {\r\n            return parseInt(dateStr.split(' ')[0], 10) * 30;\r\n          }\r\n          return 0;\r\n        };\r\n        \r\n        return getNumericDays(a.postedDate) - getNumericDays(b.postedDate);\r\n      });\r\n    \r\n    case 'salary':\r\n      // 按薪资排序（高的在前面）\r\n      return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\r\n    \r\n    case 'company':\r\n      // 按公司名称排序\r\n      return sortedJobs.sort((a, b) => a.company.localeCompare(b.company));\r\n    \r\n    case 'title':\r\n      // 按职位名称排序\r\n      return sortedJobs.sort((a, b) => a.title.localeCompare(b.title));\r\n    \r\n    default:\r\n      return sortedJobs;\r\n  }\r\n};\r\n\r\nexport default {\r\n  searchRemoteJobs,\r\n  fetchWeWorkRemotelyJobs,\r\n  fetchLinkedInJobs,\r\n  getJobDetails,\r\n  refreshCache,\r\n  getCacheStats\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}