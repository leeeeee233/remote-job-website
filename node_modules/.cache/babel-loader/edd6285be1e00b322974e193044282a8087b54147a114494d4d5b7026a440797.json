{"ast":null,"code":"// 实时工作数据刷新服务\nimport { fetchRealRemoteJobs, fetchRemoteOKJobs, fetchWeWorkRemotelyJobs } from './realJobAPI';\nimport { mockJobs } from './mockData';\nclass RealTimeJobService {\n  constructor() {\n    this.jobs = [];\n    this.lastUpdate = null;\n    this.updateInterval = null;\n    this.listeners = new Set();\n    this.isUpdating = false;\n    this.updateFrequency = 5 * 60 * 1000; // 5分钟更新一次\n    this.sources = [];\n    this.stats = {\n      totalUpdates: 0,\n      successfulUpdates: 0,\n      failedUpdates: 0,\n      lastError: null\n    };\n  }\n\n  // 开始实时更新\n  startRealTimeUpdates() {\n    console.log('🚀 启动实时工作数据更新服务');\n\n    // 立即执行一次更新\n    this.updateJobs();\n\n    // 设置定期更新\n    this.updateInterval = setInterval(() => {\n      this.updateJobs();\n    }, this.updateFrequency);\n    return this;\n  }\n\n  // 停止实时更新\n  stopRealTimeUpdates() {\n    console.log('⏹️ 停止实时工作数据更新服务');\n    if (this.updateInterval) {\n      clearInterval(this.updateInterval);\n      this.updateInterval = null;\n    }\n    return this;\n  }\n\n  // 手动触发更新\n  async forceUpdate() {\n    console.log('🔄 手动触发工作数据更新');\n    return await this.updateJobs(true);\n  }\n\n  // 更新工作数据\n  async updateJobs(force = false) {\n    if (this.isUpdating && !force) {\n      console.log('⏳ 更新正在进行中，跳过此次更新');\n      return;\n    }\n    this.isUpdating = true;\n    this.stats.totalUpdates++;\n    try {\n      console.log('🔄 开始获取最新工作数据...');\n\n      // 并行调用多个数据源\n      const dataPromises = [this.fetchFromRemoteOK(), this.fetchFromWeWorkRemotely(), this.fetchMockData()];\n      const results = await Promise.allSettled(dataPromises);\n\n      // 合并所有成功的结果\n      let newJobs = [];\n      let activeSources = [];\n      results.forEach((result, index) => {\n        if (result.status === 'fulfilled' && result.value.jobs.length > 0) {\n          newJobs = [...newJobs, ...result.value.jobs];\n          activeSources.push(result.value.source);\n          console.log(`✅ ${result.value.source}: ${result.value.jobs.length} 个工作`);\n        } else {\n          var _result$reason;\n          const sources = ['RemoteOK', 'WeWorkRemotely', 'Mock Data'];\n          console.warn(`❌ ${sources[index]} 获取失败:`, (_result$reason = result.reason) === null || _result$reason === void 0 ? void 0 : _result$reason.message);\n        }\n      });\n\n      // 去重处理\n      const uniqueJobs = this.deduplicateJobs(newJobs);\n\n      // 添加时间戳和新工作标记\n      const jobsWithTimestamp = uniqueJobs.map(job => ({\n        ...job,\n        fetchedAt: new Date().toISOString(),\n        isNew: this.isNewJob(job)\n      }));\n\n      // 更新内部状态\n      this.jobs = jobsWithTimestamp;\n      this.sources = activeSources;\n      this.lastUpdate = new Date();\n      this.stats.successfulUpdates++;\n      this.stats.lastError = null;\n      console.log(`✅ 数据更新完成: ${uniqueJobs.length} 个唯一工作`);\n      console.log(`📊 数据源: ${activeSources.join(', ')}`);\n\n      // 通知所有监听器\n      this.notifyListeners({\n        jobs: this.jobs,\n        sources: this.sources,\n        lastUpdate: this.lastUpdate,\n        stats: this.getStats()\n      });\n      return {\n        success: true,\n        jobs: this.jobs,\n        sources: this.sources,\n        count: this.jobs.length\n      };\n    } catch (error) {\n      console.error('❌ 工作数据更新失败:', error);\n      this.stats.failedUpdates++;\n      this.stats.lastError = error.message;\n\n      // 如果完全失败，至少返回模拟数据\n      if (this.jobs.length === 0) {\n        this.jobs = mockJobs.map(job => ({\n          ...job,\n          fetchedAt: new Date().toISOString(),\n          isNew: false\n        }));\n        this.sources = ['Mock Data'];\n      }\n      return {\n        success: false,\n        error: error.message,\n        jobs: this.jobs,\n        sources: this.sources\n      };\n    } finally {\n      this.isUpdating = false;\n    }\n  }\n\n  // 从RemoteOK获取数据\n  async fetchFromRemoteOK() {\n    try {\n      const jobs = await fetchRemoteOKJobs();\n      return {\n        jobs: jobs.map(job => ({\n          ...job,\n          dataSource: 'RemoteOK'\n        })),\n        source: 'RemoteOK'\n      };\n    } catch (error) {\n      throw new Error(`RemoteOK API 失败: ${error.message}`);\n    }\n  }\n\n  // 从WeWorkRemotely获取数据\n  async fetchFromWeWorkRemotely() {\n    try {\n      const jobs = await fetchWeWorkRemotelyJobs();\n      return {\n        jobs: jobs.map(job => ({\n          ...job,\n          dataSource: 'WeWorkRemotely'\n        })),\n        source: 'WeWorkRemotely'\n      };\n    } catch (error) {\n      throw new Error(`WeWorkRemotely API 失败: ${error.message}`);\n    }\n  }\n\n  // 获取模拟数据作为备用\n  async fetchMockData() {\n    return {\n      jobs: mockJobs.map(job => ({\n        ...job,\n        dataSource: 'Mock Data',\n        fetchedAt: new Date().toISOString()\n      })),\n      source: 'Mock Data'\n    };\n  }\n\n  // 去重处理\n  deduplicateJobs(jobs) {\n    const seen = new Map();\n    const uniqueJobs = [];\n    for (const job of jobs) {\n      // 创建唯一标识符\n      const key = `${job.title.toLowerCase().trim()}-${job.company.toLowerCase().trim()}`;\n      if (!seen.has(key)) {\n        seen.set(key, true);\n        uniqueJobs.push(job);\n      } else {\n        console.log(`🔄 去重: ${job.title} @ ${job.company}`);\n      }\n    }\n    return uniqueJobs;\n  }\n\n  // 检查是否为新工作\n  isNewJob(job) {\n    // 简单的新工作检测：发布时间为今天\n    return job.postedDate === 'Today';\n  }\n\n  // 搜索工作\n  searchJobs(searchTerm = '', filters = {}) {\n    let filteredJobs = [...this.jobs];\n\n    // 搜索词过滤\n    if (searchTerm && searchTerm.trim()) {\n      const term = searchTerm.toLowerCase().trim();\n      filteredJobs = filteredJobs.filter(job => {\n        return job.title.toLowerCase().includes(term) || job.company.toLowerCase().includes(term) || job.description.toLowerCase().includes(term) || job.skills && job.skills.some(skill => skill.toLowerCase().includes(term));\n      });\n    }\n\n    // 应用筛选器\n    if (filters.jobType) {\n      filteredJobs = filteredJobs.filter(job => job.type && job.type.toLowerCase() === filters.jobType.toLowerCase());\n    }\n    if (filters.team) {\n      filteredJobs = filteredJobs.filter(job => job.team && job.team.toLowerCase() === filters.team.toLowerCase());\n    }\n    if (filters.salary) {\n      const {\n        min,\n        max\n      } = filters.salary;\n      filteredJobs = filteredJobs.filter(job => (!min || job.salary >= min) && (!max || job.salary <= max));\n    }\n\n    // 排序\n    filteredJobs = this.sortJobs(filteredJobs, filters.sortBy || 'date');\n    return {\n      jobs: filteredJobs,\n      total: filteredJobs.length,\n      sources: this.sources,\n      lastUpdate: this.lastUpdate,\n      hasMore: false\n    };\n  }\n\n  // 排序工作\n  sortJobs(jobs, sortBy = 'date') {\n    const sortedJobs = [...jobs];\n    switch (sortBy) {\n      case 'date':\n        return sortedJobs.sort((a, b) => {\n          // 新工作优先\n          if (a.isNew && !b.isNew) return -1;\n          if (!a.isNew && b.isNew) return 1;\n\n          // 按发布日期排序\n          const dateOrder = ['Today', 'Yesterday', '2 days ago', '3 days ago', '1 week ago'];\n          const indexA = dateOrder.indexOf(a.postedDate);\n          const indexB = dateOrder.indexOf(b.postedDate);\n          if (indexA !== -1 && indexB !== -1) return indexA - indexB;\n          if (indexA !== -1) return -1;\n          if (indexB !== -1) return 1;\n          return 0;\n        });\n      case 'salary':\n        return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\n      case 'company':\n        return sortedJobs.sort((a, b) => a.company.localeCompare(b.company));\n      default:\n        return sortedJobs;\n    }\n  }\n\n  // 添加数据更新监听器\n  addUpdateListener(callback) {\n    this.listeners.add(callback);\n    return () => this.listeners.delete(callback);\n  }\n\n  // 通知所有监听器\n  notifyListeners(data) {\n    this.listeners.forEach(callback => {\n      try {\n        callback(data);\n      } catch (error) {\n        console.error('监听器回调错误:', error);\n      }\n    });\n  }\n\n  // 获取统计信息\n  getStats() {\n    return {\n      ...this.stats,\n      totalJobs: this.jobs.length,\n      newJobs: this.jobs.filter(job => job.isNew).length,\n      sources: this.sources,\n      lastUpdate: this.lastUpdate,\n      isUpdating: this.isUpdating,\n      updateFrequency: this.updateFrequency\n    };\n  }\n\n  // 设置更新频率\n  setUpdateFrequency(minutes) {\n    this.updateFrequency = minutes * 60 * 1000;\n\n    // 如果正在运行，重新启动定时器\n    if (this.updateInterval) {\n      this.stopRealTimeUpdates();\n      this.startRealTimeUpdates();\n    }\n    console.log(`⏰ 更新频率设置为 ${minutes} 分钟`);\n  }\n\n  // 获取当前工作数据\n  getCurrentJobs() {\n    return {\n      jobs: this.jobs,\n      sources: this.sources,\n      lastUpdate: this.lastUpdate,\n      stats: this.getStats()\n    };\n  }\n}\n\n// 创建全局实例\nconst realTimeJobService = new RealTimeJobService();\nexport default realTimeJobService;","map":{"version":3,"names":["fetchRealRemoteJobs","fetchRemoteOKJobs","fetchWeWorkRemotelyJobs","mockJobs","RealTimeJobService","constructor","jobs","lastUpdate","updateInterval","listeners","Set","isUpdating","updateFrequency","sources","stats","totalUpdates","successfulUpdates","failedUpdates","lastError","startRealTimeUpdates","console","log","updateJobs","setInterval","stopRealTimeUpdates","clearInterval","forceUpdate","force","dataPromises","fetchFromRemoteOK","fetchFromWeWorkRemotely","fetchMockData","results","Promise","allSettled","newJobs","activeSources","forEach","result","index","status","value","length","push","source","_result$reason","warn","reason","message","uniqueJobs","deduplicateJobs","jobsWithTimestamp","map","job","fetchedAt","Date","toISOString","isNew","isNewJob","join","notifyListeners","getStats","success","count","error","dataSource","Error","seen","Map","key","title","toLowerCase","trim","company","has","set","postedDate","searchJobs","searchTerm","filters","filteredJobs","term","filter","includes","description","skills","some","skill","jobType","type","team","salary","min","max","sortJobs","sortBy","total","hasMore","sortedJobs","sort","a","b","dateOrder","indexA","indexOf","indexB","localeCompare","addUpdateListener","callback","add","delete","data","totalJobs","setUpdateFrequency","minutes","getCurrentJobs","realTimeJobService"],"sources":["D:/Kiro/remote-job-website/src/services/RealTimeJobService.js"],"sourcesContent":["// 实时工作数据刷新服务\r\nimport { fetchRealRemoteJobs, fetchRemoteOKJobs, fetchWeWorkRemotelyJobs } from './realJobAPI';\r\nimport { mockJobs } from './mockData';\r\n\r\nclass RealTimeJobService {\r\n  constructor() {\r\n    this.jobs = [];\r\n    this.lastUpdate = null;\r\n    this.updateInterval = null;\r\n    this.listeners = new Set();\r\n    this.isUpdating = false;\r\n    this.updateFrequency = 5 * 60 * 1000; // 5分钟更新一次\r\n    this.sources = [];\r\n    this.stats = {\r\n      totalUpdates: 0,\r\n      successfulUpdates: 0,\r\n      failedUpdates: 0,\r\n      lastError: null\r\n    };\r\n  }\r\n\r\n  // 开始实时更新\r\n  startRealTimeUpdates() {\r\n    console.log('🚀 启动实时工作数据更新服务');\r\n    \r\n    // 立即执行一次更新\r\n    this.updateJobs();\r\n    \r\n    // 设置定期更新\r\n    this.updateInterval = setInterval(() => {\r\n      this.updateJobs();\r\n    }, this.updateFrequency);\r\n    \r\n    return this;\r\n  }\r\n\r\n  // 停止实时更新\r\n  stopRealTimeUpdates() {\r\n    console.log('⏹️ 停止实时工作数据更新服务');\r\n    \r\n    if (this.updateInterval) {\r\n      clearInterval(this.updateInterval);\r\n      this.updateInterval = null;\r\n    }\r\n    \r\n    return this;\r\n  }\r\n\r\n  // 手动触发更新\r\n  async forceUpdate() {\r\n    console.log('🔄 手动触发工作数据更新');\r\n    return await this.updateJobs(true);\r\n  }\r\n\r\n  // 更新工作数据\r\n  async updateJobs(force = false) {\r\n    if (this.isUpdating && !force) {\r\n      console.log('⏳ 更新正在进行中，跳过此次更新');\r\n      return;\r\n    }\r\n\r\n    this.isUpdating = true;\r\n    this.stats.totalUpdates++;\r\n    \r\n    try {\r\n      console.log('🔄 开始获取最新工作数据...');\r\n      \r\n      // 并行调用多个数据源\r\n      const dataPromises = [\r\n        this.fetchFromRemoteOK(),\r\n        this.fetchFromWeWorkRemotely(),\r\n        this.fetchMockData()\r\n      ];\r\n\r\n      const results = await Promise.allSettled(dataPromises);\r\n      \r\n      // 合并所有成功的结果\r\n      let newJobs = [];\r\n      let activeSources = [];\r\n      \r\n      results.forEach((result, index) => {\r\n        if (result.status === 'fulfilled' && result.value.jobs.length > 0) {\r\n          newJobs = [...newJobs, ...result.value.jobs];\r\n          activeSources.push(result.value.source);\r\n          console.log(`✅ ${result.value.source}: ${result.value.jobs.length} 个工作`);\r\n        } else {\r\n          const sources = ['RemoteOK', 'WeWorkRemotely', 'Mock Data'];\r\n          console.warn(`❌ ${sources[index]} 获取失败:`, result.reason?.message);\r\n        }\r\n      });\r\n\r\n      // 去重处理\r\n      const uniqueJobs = this.deduplicateJobs(newJobs);\r\n      \r\n      // 添加时间戳和新工作标记\r\n      const jobsWithTimestamp = uniqueJobs.map(job => ({\r\n        ...job,\r\n        fetchedAt: new Date().toISOString(),\r\n        isNew: this.isNewJob(job)\r\n      }));\r\n\r\n      // 更新内部状态\r\n      this.jobs = jobsWithTimestamp;\r\n      this.sources = activeSources;\r\n      this.lastUpdate = new Date();\r\n      this.stats.successfulUpdates++;\r\n      this.stats.lastError = null;\r\n\r\n      console.log(`✅ 数据更新完成: ${uniqueJobs.length} 个唯一工作`);\r\n      console.log(`📊 数据源: ${activeSources.join(', ')}`);\r\n\r\n      // 通知所有监听器\r\n      this.notifyListeners({\r\n        jobs: this.jobs,\r\n        sources: this.sources,\r\n        lastUpdate: this.lastUpdate,\r\n        stats: this.getStats()\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        jobs: this.jobs,\r\n        sources: this.sources,\r\n        count: this.jobs.length\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('❌ 工作数据更新失败:', error);\r\n      this.stats.failedUpdates++;\r\n      this.stats.lastError = error.message;\r\n      \r\n      // 如果完全失败，至少返回模拟数据\r\n      if (this.jobs.length === 0) {\r\n        this.jobs = mockJobs.map(job => ({\r\n          ...job,\r\n          fetchedAt: new Date().toISOString(),\r\n          isNew: false\r\n        }));\r\n        this.sources = ['Mock Data'];\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        jobs: this.jobs,\r\n        sources: this.sources\r\n      };\r\n    } finally {\r\n      this.isUpdating = false;\r\n    }\r\n  }\r\n\r\n  // 从RemoteOK获取数据\r\n  async fetchFromRemoteOK() {\r\n    try {\r\n      const jobs = await fetchRemoteOKJobs();\r\n      return {\r\n        jobs: jobs.map(job => ({ ...job, dataSource: 'RemoteOK' })),\r\n        source: 'RemoteOK'\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`RemoteOK API 失败: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // 从WeWorkRemotely获取数据\r\n  async fetchFromWeWorkRemotely() {\r\n    try {\r\n      const jobs = await fetchWeWorkRemotelyJobs();\r\n      return {\r\n        jobs: jobs.map(job => ({ ...job, dataSource: 'WeWorkRemotely' })),\r\n        source: 'WeWorkRemotely'\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`WeWorkRemotely API 失败: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // 获取模拟数据作为备用\r\n  async fetchMockData() {\r\n    return {\r\n      jobs: mockJobs.map(job => ({ \r\n        ...job, \r\n        dataSource: 'Mock Data',\r\n        fetchedAt: new Date().toISOString()\r\n      })),\r\n      source: 'Mock Data'\r\n    };\r\n  }\r\n\r\n  // 去重处理\r\n  deduplicateJobs(jobs) {\r\n    const seen = new Map();\r\n    const uniqueJobs = [];\r\n\r\n    for (const job of jobs) {\r\n      // 创建唯一标识符\r\n      const key = `${job.title.toLowerCase().trim()}-${job.company.toLowerCase().trim()}`;\r\n      \r\n      if (!seen.has(key)) {\r\n        seen.set(key, true);\r\n        uniqueJobs.push(job);\r\n      } else {\r\n        console.log(`🔄 去重: ${job.title} @ ${job.company}`);\r\n      }\r\n    }\r\n\r\n    return uniqueJobs;\r\n  }\r\n\r\n  // 检查是否为新工作\r\n  isNewJob(job) {\r\n    // 简单的新工作检测：发布时间为今天\r\n    return job.postedDate === 'Today';\r\n  }\r\n\r\n  // 搜索工作\r\n  searchJobs(searchTerm = '', filters = {}) {\r\n    let filteredJobs = [...this.jobs];\r\n\r\n    // 搜索词过滤\r\n    if (searchTerm && searchTerm.trim()) {\r\n      const term = searchTerm.toLowerCase().trim();\r\n      filteredJobs = filteredJobs.filter(job => {\r\n        return (\r\n          job.title.toLowerCase().includes(term) ||\r\n          job.company.toLowerCase().includes(term) ||\r\n          job.description.toLowerCase().includes(term) ||\r\n          (job.skills && job.skills.some(skill => skill.toLowerCase().includes(term)))\r\n        );\r\n      });\r\n    }\r\n\r\n    // 应用筛选器\r\n    if (filters.jobType) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.type && job.type.toLowerCase() === filters.jobType.toLowerCase()\r\n      );\r\n    }\r\n\r\n    if (filters.team) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.team && job.team.toLowerCase() === filters.team.toLowerCase()\r\n      );\r\n    }\r\n\r\n    if (filters.salary) {\r\n      const { min, max } = filters.salary;\r\n      filteredJobs = filteredJobs.filter(job => \r\n        (!min || job.salary >= min) && (!max || job.salary <= max)\r\n      );\r\n    }\r\n\r\n    // 排序\r\n    filteredJobs = this.sortJobs(filteredJobs, filters.sortBy || 'date');\r\n\r\n    return {\r\n      jobs: filteredJobs,\r\n      total: filteredJobs.length,\r\n      sources: this.sources,\r\n      lastUpdate: this.lastUpdate,\r\n      hasMore: false\r\n    };\r\n  }\r\n\r\n  // 排序工作\r\n  sortJobs(jobs, sortBy = 'date') {\r\n    const sortedJobs = [...jobs];\r\n    \r\n    switch (sortBy) {\r\n      case 'date':\r\n        return sortedJobs.sort((a, b) => {\r\n          // 新工作优先\r\n          if (a.isNew && !b.isNew) return -1;\r\n          if (!a.isNew && b.isNew) return 1;\r\n          \r\n          // 按发布日期排序\r\n          const dateOrder = ['Today', 'Yesterday', '2 days ago', '3 days ago', '1 week ago'];\r\n          const indexA = dateOrder.indexOf(a.postedDate);\r\n          const indexB = dateOrder.indexOf(b.postedDate);\r\n          \r\n          if (indexA !== -1 && indexB !== -1) return indexA - indexB;\r\n          if (indexA !== -1) return -1;\r\n          if (indexB !== -1) return 1;\r\n          \r\n          return 0;\r\n        });\r\n      \r\n      case 'salary':\r\n        return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\r\n      \r\n      case 'company':\r\n        return sortedJobs.sort((a, b) => a.company.localeCompare(b.company));\r\n      \r\n      default:\r\n        return sortedJobs;\r\n    }\r\n  }\r\n\r\n  // 添加数据更新监听器\r\n  addUpdateListener(callback) {\r\n    this.listeners.add(callback);\r\n    return () => this.listeners.delete(callback);\r\n  }\r\n\r\n  // 通知所有监听器\r\n  notifyListeners(data) {\r\n    this.listeners.forEach(callback => {\r\n      try {\r\n        callback(data);\r\n      } catch (error) {\r\n        console.error('监听器回调错误:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // 获取统计信息\r\n  getStats() {\r\n    return {\r\n      ...this.stats,\r\n      totalJobs: this.jobs.length,\r\n      newJobs: this.jobs.filter(job => job.isNew).length,\r\n      sources: this.sources,\r\n      lastUpdate: this.lastUpdate,\r\n      isUpdating: this.isUpdating,\r\n      updateFrequency: this.updateFrequency\r\n    };\r\n  }\r\n\r\n  // 设置更新频率\r\n  setUpdateFrequency(minutes) {\r\n    this.updateFrequency = minutes * 60 * 1000;\r\n    \r\n    // 如果正在运行，重新启动定时器\r\n    if (this.updateInterval) {\r\n      this.stopRealTimeUpdates();\r\n      this.startRealTimeUpdates();\r\n    }\r\n    \r\n    console.log(`⏰ 更新频率设置为 ${minutes} 分钟`);\r\n  }\r\n\r\n  // 获取当前工作数据\r\n  getCurrentJobs() {\r\n    return {\r\n      jobs: this.jobs,\r\n      sources: this.sources,\r\n      lastUpdate: this.lastUpdate,\r\n      stats: this.getStats()\r\n    };\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nconst realTimeJobService = new RealTimeJobService();\r\n\r\nexport default realTimeJobService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}