{"ast":null,"code":"// 真实的工作数据服务\n// 使用公开的API和RSS feed获取远程工作数据\nimport{LinkedInApiAdapter,WWRApiAdapter,CacheService}from'./api';// 导入RemoteOK API服务\nimport{fetchRemoteOKJobs}from'./realJobAPI';// 导入新的数据加载器和去重服务\nimport DataLoader from'./DataLoader';import DeduplicationService from'./DeduplicationService';// 创建API适配器实例\nconst linkedInAdapter=new LinkedInApiAdapter({clientId:process.env.REACT_APP_LINKEDIN_CLIENT_ID,clientSecret:process.env.REACT_APP_LINKEDIN_CLIENT_SECRET});const wwrAdapter=new WWRApiAdapter({apiKey:process.env.REACT_APP_RSS2JSON_API_KEY});// 创建缓存服务实例\nconst cacheService=new CacheService({memoryTTL:5*60*1000,// 5分钟\nstorageTTL:60*60*1000// 1小时\n});// 创建数据加载器实例\nconst dataLoader=new DataLoader({LinkedIn:linkedInAdapter,WeWorkRemotely:wwrAdapter,RemoteOK:{searchJobs:async(searchTerm,filters,page)=>{const jobs=await fetchRemoteOKJobs();return{jobs,total:jobs.length,page,pageSize:jobs.length};}}},cacheService);// 创建全局去重服务实例\nconst globalDeduplicationService=new DeduplicationService();// WeWorkRemotely API 集成\nexport const fetchWeWorkRemotelyJobs=async function(){let searchTerm=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let category=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';try{// 生成缓存键\nconst cacheKey=CacheService.generateKey('wwr_jobs',{searchTerm,category});// 检查缓存\nconst cachedData=await cacheService.get(cacheKey);if(cachedData){console.log('Using cached WeWorkRemotely jobs');return cachedData;}// 调用API\nconsole.log('Fetching WeWorkRemotely jobs with search term:',searchTerm,'and category:',category);const result=await wwrAdapter.searchJobs(searchTerm,category);// 缓存结果\nawait cacheService.set(cacheKey,result.jobs);return result.jobs;}catch(error){console.error('Error fetching WeWorkRemotely jobs:',error);// 返回空数组\nreturn[];}};// LinkedIn Jobs API 集成\nexport const fetchLinkedInJobs=async function(){let searchTerm=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let location=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'remote';try{// 生成缓存键\nconst cacheKey=CacheService.generateKey('linkedin_jobs',{searchTerm,location});// 检查缓存\nconst cachedData=await cacheService.get(cacheKey);if(cachedData){console.log('Using cached LinkedIn jobs');return cachedData;}// 调用API\nconsole.log('Fetching LinkedIn jobs with search term:',searchTerm,'and location:',location);const result=await linkedInAdapter.searchJobs(searchTerm,{location},0);// 缓存结果\nawait cacheService.set(cacheKey,result.jobs);return result.jobs;}catch(error){console.error('Error fetching LinkedIn jobs:',error);// 返回空数组\nreturn[];}};// 通用的远程工作搜索函数 - 使用新的DataLoader确保无重复\nexport const searchRemoteJobs=async function(){let searchTerm=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let page=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let pageSize=arguments.length>3&&arguments[3]!==undefined?arguments[3]:50;try{console.log(`搜索远程工作 - 关键词: \"${searchTerm}\", 页码: ${page}, 页面大小: ${pageSize}`);// 使用DataLoader获取去重后的数据\nconst result=await dataLoader.loadJobsFromAllSources(searchTerm,filters,page,pageSize);// 如果没有数据，尝试使用旧的方法作为备选\nif(result.jobs.length===0&&page===0){console.log('DataLoader未返回数据，尝试备选方法...');return await searchRemoteJobsFallback(searchTerm,filters);}// 记录去重统计信息\nif(result.deduplicationStats){console.log('去重统计:',result.deduplicationStats);}return{jobs:result.jobs,total:result.total,totalAvailable:result.totalAvailable,page:result.page,pageSize:result.pageSize,hasMore:result.hasMore,sources:result.sources||[],deduplicationStats:result.deduplicationStats};}catch(error){console.error('Error searching remote jobs:',error);// 错误时尝试备选方法\nif(page===0){console.log('主要方法失败，尝试备选方法...');return await searchRemoteJobsFallback(searchTerm,filters);}// 返回空结果\nreturn{jobs:[],total:0,totalAvailable:0,page:page,pageSize:pageSize,hasMore:false,sources:[],error:error.message};}};// 备选的搜索方法（保持向后兼容）\nconst searchRemoteJobsFallback=async function(){let searchTerm=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{var _weWorkJobs$reason,_linkedInJobs$reason,_remoteOKJobs$reason;console.log('使用备选搜索方法...');// 首先尝试从mockData获取数据作为基础\nconst{mockJobs}=await import('./mockData');console.log('加载了',mockJobs.length,'个模拟工作作为基础数据');// 并行调用多个API，但设置较短的超时时间\nconst apiPromises=[Promise.race([fetchWeWorkRemotelyJobs(searchTerm,filters.category),new Promise((_,reject)=>setTimeout(()=>reject(new Error('WeWorkRemotely API timeout')),8000))]),Promise.race([fetchLinkedInJobs(searchTerm,filters.location||'remote'),new Promise((_,reject)=>setTimeout(()=>reject(new Error('LinkedIn API timeout')),8000))]),Promise.race([fetchRemoteOKJobs(),new Promise((_,reject)=>setTimeout(()=>reject(new Error('RemoteOK API timeout')),8000))])];const[weWorkJobs,linkedInJobs,remoteOKJobs]=await Promise.allSettled(apiPromises);// 合并结果，包括模拟数据\nconst allJobs=[...mockJobs,// 始终包含模拟数据作为基础\n...(weWorkJobs.status==='fulfilled'?weWorkJobs.value:[]),...(linkedInJobs.status==='fulfilled'?linkedInJobs.value:[]),...(remoteOKJobs.status==='fulfilled'?remoteOKJobs.value:[])];console.log('API调用结果:');console.log('- WeWorkRemotely:',weWorkJobs.status==='fulfilled'?`${weWorkJobs.value.length} jobs`:`失败: ${(_weWorkJobs$reason=weWorkJobs.reason)===null||_weWorkJobs$reason===void 0?void 0:_weWorkJobs$reason.message}`);console.log('- LinkedIn:',linkedInJobs.status==='fulfilled'?`${linkedInJobs.value.length} jobs`:`失败: ${(_linkedInJobs$reason=linkedInJobs.reason)===null||_linkedInJobs$reason===void 0?void 0:_linkedInJobs$reason.message}`);console.log('- RemoteOK:',remoteOKJobs.status==='fulfilled'?`${remoteOKJobs.value.length} jobs`:`失败: ${(_remoteOKJobs$reason=remoteOKJobs.reason)===null||_remoteOKJobs$reason===void 0?void 0:_remoteOKJobs$reason.message}`);console.log('- 模拟数据:',mockJobs.length,'jobs');console.log('- 总计:',allJobs.length,'jobs');// 即使所有API都失败，我们仍然有模拟数据\nif(allJobs.length===0){console.error('No jobs available, including mock data');return{jobs:[],total:0,sources:['No Data Available']};}// 使用全局去重服务进行去重\nconst uniqueJobs=globalDeduplicationService.deduplicateJobs(allJobs);// 按搜索词过滤\nlet filteredJobs=uniqueJobs;if(searchTerm){filteredJobs=uniqueJobs.filter(job=>job.title.toLowerCase().includes(searchTerm.toLowerCase())||job.company.toLowerCase().includes(searchTerm.toLowerCase())||job.description.toLowerCase().includes(searchTerm.toLowerCase())||job.skills&&job.skills.some(skill=>skill.toLowerCase().includes(searchTerm.toLowerCase())));}// 应用其他筛选条件\nif(filters.jobType){filteredJobs=filteredJobs.filter(job=>job.type&&job.type.toLowerCase()===filters.jobType.toLowerCase());}if(filters.salary){const{min,max}=filters.salary;filteredJobs=filteredJobs.filter(job=>(!min||job.salary>=min)&&(!max||job.salary<=max));}// 排序\nconst sortedJobs=sortJobs(filteredJobs,filters.sort||'date');// 获取数据来源，确保模拟数据也有正确的source标记\nconst jobsWithSource=sortedJobs.map(job=>({...job,source:job.source||'Mock Data'// 确保每个工作都有source标记\n}));const sources=[...new Set(jobsWithSource.map(job=>job.source))];const result={jobs:jobsWithSource,total:jobsWithSource.length,sources,deduplicationStats:globalDeduplicationService.getStats()};console.log(`备选方法完成 - 返回 ${sortedJobs.length} 个唯一工作`);console.log('去重统计:',globalDeduplicationService.getStats());return result;}catch(error){console.error('Error in fallback search:',error);return{jobs:[],total:0,sources:[],error:error.message};}};// 获取工作详情\nexport const getJobDetails=async(jobId,source)=>{try{// 生成缓存键\nconst cacheKey=`job_detail_${jobId}`;// 检查缓存\nconst cachedData=await cacheService.get(cacheKey);if(cachedData){console.log('Using cached job details');return cachedData;}// 根据来源选择适当的API适配器\nlet jobDetail;switch(source){case'LinkedIn':jobDetail=await linkedInAdapter.getJobDetails(jobId);break;case'WeWorkRemotely':jobDetail=await wwrAdapter.getJobDetails(jobId);break;default:// 如果没有指定来源或来源不支持，尝试从所有适配器获取\nconst results=await Promise.allSettled([linkedInAdapter.getJobDetails(jobId),wwrAdapter.getJobDetails(jobId)]);// 使用第一个成功的结果\nconst successResult=results.find(result=>result.status==='fulfilled');if(successResult){jobDetail=successResult.value;}else{throw new Error(`Job with ID ${jobId} not found`);}}// 缓存结果\nawait cacheService.set(cacheKey,jobDetail);return jobDetail;}catch(error){console.error(`Error fetching job details for ${jobId}:`,error);throw error;}};// 刷新缓存\nexport const refreshCache=async()=>{try{await cacheService.clear();console.log('Job cache cleared');return{success:true};}catch(error){console.error('Error clearing job cache:',error);return{success:false,error:error.message};}};// 获取缓存统计\nexport const getCacheStats=()=>{return cacheService.getStats();};// 增强的去重函数\nconst removeDuplicateJobs=jobs=>{const seen=new Set();const seenIds=new Set();return jobs.filter(job=>{// 首先检查ID是否重复\nif(job.id&&seenIds.has(job.id)){console.log(`Duplicate job ID found: ${job.id} - ${job.title} at ${job.company}`);return false;}// 创建多个唯一标识符来检查重复\nconst titleCompanyKey=`${job.title}-${job.company}`.toLowerCase().replace(/\\s+/g,'');const titleLocationKey=`${job.title}-${job.location}`.toLowerCase().replace(/\\s+/g,'');const companyTitleKey=`${job.company}-${job.title}`.toLowerCase().replace(/\\s+/g,'');// 检查是否已存在相似的工作\nif(seen.has(titleCompanyKey)||seen.has(titleLocationKey)||seen.has(companyTitleKey)){console.log(`Duplicate job found: ${job.title} at ${job.company}`);return false;}// 额外检查：如果标题和公司名称非常相似，也认为是重复\nfor(const existingKey of seen){const similarity=calculateSimilarity(titleCompanyKey,existingKey);if(similarity>0.85){// 85%相似度阈值\nconsole.log(`Similar job found (${Math.round(similarity*100)}% similarity): ${job.title} at ${job.company}`);return false;}}// 记录所有标识符\nif(job.id)seenIds.add(job.id);seen.add(titleCompanyKey);seen.add(titleLocationKey);seen.add(companyTitleKey);return true;});};// 计算字符串相似度的简单函数\nconst calculateSimilarity=(str1,str2)=>{const longer=str1.length>str2.length?str1:str2;const shorter=str1.length>str2.length?str2:str1;if(longer.length===0)return 1.0;const editDistance=levenshteinDistance(longer,shorter);return(longer.length-editDistance)/longer.length;};// 计算编辑距离\nconst levenshteinDistance=(str1,str2)=>{const matrix=[];for(let i=0;i<=str2.length;i++){matrix[i]=[i];}for(let j=0;j<=str1.length;j++){matrix[0][j]=j;}for(let i=1;i<=str2.length;i++){for(let j=1;j<=str1.length;j++){if(str2.charAt(i-1)===str1.charAt(j-1)){matrix[i][j]=matrix[i-1][j-1];}else{matrix[i][j]=Math.min(matrix[i-1][j-1]+1,matrix[i][j-1]+1,matrix[i-1][j]+1);}}}return matrix[str2.length][str1.length];};// 排序函数\nconst sortJobs=function(jobs){let sortBy=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'date';const sortedJobs=[...jobs];switch(sortBy){case'date':// 按发布日期排序（最新的在前面）\nreturn sortedJobs.sort((a,b)=>{// 优先显示\"Today\"\nif(a.postedDate==='Today'&&b.postedDate!=='Today')return-1;if(a.postedDate!=='Today'&&b.postedDate==='Today')return 1;// 优先显示\"Yesterday\"\nif(a.postedDate==='Yesterday'&&b.postedDate!=='Yesterday'&&b.postedDate!=='Today')return-1;if(a.postedDate!=='Yesterday'&&a.postedDate!=='Today'&&b.postedDate==='Yesterday')return 1;// 比较天数\nconst getNumericDays=dateStr=>{if(dateStr.includes('days ago')){return parseInt(dateStr.split(' ')[0],10);}if(dateStr.includes('weeks ago')){return parseInt(dateStr.split(' ')[0],10)*7;}if(dateStr.includes('months ago')){return parseInt(dateStr.split(' ')[0],10)*30;}return 0;};return getNumericDays(a.postedDate)-getNumericDays(b.postedDate);});case'salary':// 按薪资排序（高的在前面）\nreturn sortedJobs.sort((a,b)=>(b.salary||0)-(a.salary||0));case'company':// 按公司名称排序\nreturn sortedJobs.sort((a,b)=>a.company.localeCompare(b.company));case'title':// 按职位名称排序\nreturn sortedJobs.sort((a,b)=>a.title.localeCompare(b.title));default:return sortedJobs;}};export default{searchRemoteJobs,fetchWeWorkRemotelyJobs,fetchLinkedInJobs,getJobDetails,refreshCache,getCacheStats};","map":{"version":3,"names":["LinkedInApiAdapter","WWRApiAdapter","CacheService","fetchRemoteOKJobs","DataLoader","DeduplicationService","linkedInAdapter","clientId","process","env","REACT_APP_LINKEDIN_CLIENT_ID","clientSecret","REACT_APP_LINKEDIN_CLIENT_SECRET","wwrAdapter","apiKey","REACT_APP_RSS2JSON_API_KEY","cacheService","memoryTTL","storageTTL","dataLoader","LinkedIn","WeWorkRemotely","RemoteOK","searchJobs","searchTerm","filters","page","jobs","total","length","pageSize","globalDeduplicationService","fetchWeWorkRemotelyJobs","arguments","undefined","category","cacheKey","generateKey","cachedData","get","console","log","result","set","error","fetchLinkedInJobs","location","searchRemoteJobs","loadJobsFromAllSources","searchRemoteJobsFallback","deduplicationStats","totalAvailable","hasMore","sources","message","_weWorkJobs$reason","_linkedInJobs$reason","_remoteOKJobs$reason","mockJobs","apiPromises","Promise","race","_","reject","setTimeout","Error","weWorkJobs","linkedInJobs","remoteOKJobs","allSettled","allJobs","status","value","reason","uniqueJobs","deduplicateJobs","filteredJobs","filter","job","title","toLowerCase","includes","company","description","skills","some","skill","jobType","type","salary","min","max","sortedJobs","sortJobs","sort","jobsWithSource","map","source","Set","getStats","getJobDetails","jobId","jobDetail","results","successResult","find","refreshCache","clear","success","getCacheStats","removeDuplicateJobs","seen","seenIds","id","has","titleCompanyKey","replace","titleLocationKey","companyTitleKey","existingKey","similarity","calculateSimilarity","Math","round","add","str1","str2","longer","shorter","editDistance","levenshteinDistance","matrix","i","j","charAt","sortBy","a","b","postedDate","getNumericDays","dateStr","parseInt","split","localeCompare"],"sources":["D:/Kiro/remote-job-website/src/services/jobService.js"],"sourcesContent":["// 真实的工作数据服务\r\n// 使用公开的API和RSS feed获取远程工作数据\r\nimport { \r\n  LinkedInApiAdapter, \r\n  WWRApiAdapter, \r\n  CacheService \r\n} from './api';\r\n\r\n// 导入RemoteOK API服务\r\nimport { fetchRemoteOKJobs } from './realJobAPI';\r\n\r\n// 导入新的数据加载器和去重服务\r\nimport DataLoader from './DataLoader';\r\nimport DeduplicationService from './DeduplicationService';\r\n\r\n// 创建API适配器实例\r\nconst linkedInAdapter = new LinkedInApiAdapter({\r\n  clientId: process.env.REACT_APP_LINKEDIN_CLIENT_ID,\r\n  clientSecret: process.env.REACT_APP_LINKEDIN_CLIENT_SECRET\r\n});\r\n\r\nconst wwrAdapter = new WWRApiAdapter({\r\n  apiKey: process.env.REACT_APP_RSS2JSON_API_KEY\r\n});\r\n\r\n// 创建缓存服务实例\r\nconst cacheService = new CacheService({\r\n  memoryTTL: 5 * 60 * 1000, // 5分钟\r\n  storageTTL: 60 * 60 * 1000 // 1小时\r\n});\r\n\r\n// 创建数据加载器实例\r\nconst dataLoader = new DataLoader({\r\n  LinkedIn: linkedInAdapter,\r\n  WeWorkRemotely: wwrAdapter,\r\n  RemoteOK: { \r\n    searchJobs: async (searchTerm, filters, page) => {\r\n      const jobs = await fetchRemoteOKJobs();\r\n      return { jobs, total: jobs.length, page, pageSize: jobs.length };\r\n    }\r\n  }\r\n}, cacheService);\r\n\r\n// 创建全局去重服务实例\r\nconst globalDeduplicationService = new DeduplicationService();\r\n\r\n// WeWorkRemotely API 集成\r\nexport const fetchWeWorkRemotelyJobs = async (searchTerm = '', category = '') => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = CacheService.generateKey('wwr_jobs', { searchTerm, category });\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached WeWorkRemotely jobs');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 调用API\r\n    console.log('Fetching WeWorkRemotely jobs with search term:', searchTerm, 'and category:', category);\r\n    const result = await wwrAdapter.searchJobs(searchTerm, category);\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, result.jobs);\r\n    \r\n    return result.jobs;\r\n  } catch (error) {\r\n    console.error('Error fetching WeWorkRemotely jobs:', error);\r\n    // 返回空数组\r\n    return [];\r\n  }\r\n};\r\n\r\n// LinkedIn Jobs API 集成\r\nexport const fetchLinkedInJobs = async (searchTerm = '', location = 'remote') => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = CacheService.generateKey('linkedin_jobs', { searchTerm, location });\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached LinkedIn jobs');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 调用API\r\n    console.log('Fetching LinkedIn jobs with search term:', searchTerm, 'and location:', location);\r\n    const result = await linkedInAdapter.searchJobs(searchTerm, { location }, 0);\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, result.jobs);\r\n    \r\n    return result.jobs;\r\n  } catch (error) {\r\n    console.error('Error fetching LinkedIn jobs:', error);\r\n    // 返回空数组\r\n    return [];\r\n  }\r\n};\r\n\r\n// 通用的远程工作搜索函数 - 使用新的DataLoader确保无重复\r\nexport const searchRemoteJobs = async (searchTerm = '', filters = {}, page = 0, pageSize = 50) => {\r\n  try {\r\n    console.log(`搜索远程工作 - 关键词: \"${searchTerm}\", 页码: ${page}, 页面大小: ${pageSize}`);\r\n    \r\n    // 使用DataLoader获取去重后的数据\r\n    const result = await dataLoader.loadJobsFromAllSources(searchTerm, filters, page, pageSize);\r\n    \r\n    // 如果没有数据，尝试使用旧的方法作为备选\r\n    if (result.jobs.length === 0 && page === 0) {\r\n      console.log('DataLoader未返回数据，尝试备选方法...');\r\n      return await searchRemoteJobsFallback(searchTerm, filters);\r\n    }\r\n    \r\n    // 记录去重统计信息\r\n    if (result.deduplicationStats) {\r\n      console.log('去重统计:', result.deduplicationStats);\r\n    }\r\n    \r\n    return {\r\n      jobs: result.jobs,\r\n      total: result.total,\r\n      totalAvailable: result.totalAvailable,\r\n      page: result.page,\r\n      pageSize: result.pageSize,\r\n      hasMore: result.hasMore,\r\n      sources: result.sources || [],\r\n      deduplicationStats: result.deduplicationStats\r\n    };\r\n    \r\n  } catch (error) {\r\n    console.error('Error searching remote jobs:', error);\r\n    \r\n    // 错误时尝试备选方法\r\n    if (page === 0) {\r\n      console.log('主要方法失败，尝试备选方法...');\r\n      return await searchRemoteJobsFallback(searchTerm, filters);\r\n    }\r\n    \r\n    // 返回空结果\r\n    return {\r\n      jobs: [],\r\n      total: 0,\r\n      totalAvailable: 0,\r\n      page: page,\r\n      pageSize: pageSize,\r\n      hasMore: false,\r\n      sources: [],\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// 备选的搜索方法（保持向后兼容）\r\nconst searchRemoteJobsFallback = async (searchTerm = '', filters = {}) => {\r\n  try {\r\n    console.log('使用备选搜索方法...');\r\n    \r\n    // 首先尝试从mockData获取数据作为基础\r\n    const { mockJobs } = await import('./mockData');\r\n    console.log('加载了', mockJobs.length, '个模拟工作作为基础数据');\r\n    \r\n    // 并行调用多个API，但设置较短的超时时间\r\n    const apiPromises = [\r\n      Promise.race([\r\n        fetchWeWorkRemotelyJobs(searchTerm, filters.category),\r\n        new Promise((_, reject) => setTimeout(() => reject(new Error('WeWorkRemotely API timeout')), 8000))\r\n      ]),\r\n      Promise.race([\r\n        fetchLinkedInJobs(searchTerm, filters.location || 'remote'),\r\n        new Promise((_, reject) => setTimeout(() => reject(new Error('LinkedIn API timeout')), 8000))\r\n      ]),\r\n      Promise.race([\r\n        fetchRemoteOKJobs(),\r\n        new Promise((_, reject) => setTimeout(() => reject(new Error('RemoteOK API timeout')), 8000))\r\n      ])\r\n    ];\r\n    \r\n    const [weWorkJobs, linkedInJobs, remoteOKJobs] = await Promise.allSettled(apiPromises);\r\n    \r\n    // 合并结果，包括模拟数据\r\n    const allJobs = [\r\n      ...mockJobs, // 始终包含模拟数据作为基础\r\n      ...(weWorkJobs.status === 'fulfilled' ? weWorkJobs.value : []),\r\n      ...(linkedInJobs.status === 'fulfilled' ? linkedInJobs.value : []),\r\n      ...(remoteOKJobs.status === 'fulfilled' ? remoteOKJobs.value : [])\r\n    ];\r\n    \r\n    console.log('API调用结果:');\r\n    console.log('- WeWorkRemotely:', weWorkJobs.status === 'fulfilled' ? `${weWorkJobs.value.length} jobs` : `失败: ${weWorkJobs.reason?.message}`);\r\n    console.log('- LinkedIn:', linkedInJobs.status === 'fulfilled' ? `${linkedInJobs.value.length} jobs` : `失败: ${linkedInJobs.reason?.message}`);\r\n    console.log('- RemoteOK:', remoteOKJobs.status === 'fulfilled' ? `${remoteOKJobs.value.length} jobs` : `失败: ${remoteOKJobs.reason?.message}`);\r\n    console.log('- 模拟数据:', mockJobs.length, 'jobs');\r\n    console.log('- 总计:', allJobs.length, 'jobs');\r\n    \r\n    // 即使所有API都失败，我们仍然有模拟数据\r\n    if (allJobs.length === 0) {\r\n      console.error('No jobs available, including mock data');\r\n      return {\r\n        jobs: [],\r\n        total: 0,\r\n        sources: ['No Data Available']\r\n      };\r\n    }\r\n    \r\n    // 使用全局去重服务进行去重\r\n    const uniqueJobs = globalDeduplicationService.deduplicateJobs(allJobs);\r\n    \r\n    // 按搜索词过滤\r\n    let filteredJobs = uniqueJobs;\r\n    if (searchTerm) {\r\n      filteredJobs = uniqueJobs.filter(job => \r\n        job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        (job.skills && job.skills.some(skill => \r\n          skill.toLowerCase().includes(searchTerm.toLowerCase())\r\n        ))\r\n      );\r\n    }\r\n    \r\n    // 应用其他筛选条件\r\n    if (filters.jobType) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.type && job.type.toLowerCase() === filters.jobType.toLowerCase()\r\n      );\r\n    }\r\n    \r\n    if (filters.salary) {\r\n      const { min, max } = filters.salary;\r\n      filteredJobs = filteredJobs.filter(job => \r\n        (!min || job.salary >= min) && (!max || job.salary <= max)\r\n      );\r\n    }\r\n    \r\n    // 排序\r\n    const sortedJobs = sortJobs(filteredJobs, filters.sort || 'date');\r\n    \r\n    // 获取数据来源，确保模拟数据也有正确的source标记\r\n    const jobsWithSource = sortedJobs.map(job => ({\r\n      ...job,\r\n      source: job.source || 'Mock Data' // 确保每个工作都有source标记\r\n    }));\r\n    \r\n    const sources = [...new Set(jobsWithSource.map(job => job.source))];\r\n    \r\n    const result = {\r\n      jobs: jobsWithSource,\r\n      total: jobsWithSource.length,\r\n      sources,\r\n      deduplicationStats: globalDeduplicationService.getStats()\r\n    };\r\n    \r\n    console.log(`备选方法完成 - 返回 ${sortedJobs.length} 个唯一工作`);\r\n    console.log('去重统计:', globalDeduplicationService.getStats());\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('Error in fallback search:', error);\r\n    return {\r\n      jobs: [],\r\n      total: 0,\r\n      sources: [],\r\n      error: error.message\r\n    };\r\n  }\r\n};\r\n\r\n// 获取工作详情\r\nexport const getJobDetails = async (jobId, source) => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = `job_detail_${jobId}`;\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached job details');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 根据来源选择适当的API适配器\r\n    let jobDetail;\r\n    switch (source) {\r\n      case 'LinkedIn':\r\n        jobDetail = await linkedInAdapter.getJobDetails(jobId);\r\n        break;\r\n      case 'WeWorkRemotely':\r\n        jobDetail = await wwrAdapter.getJobDetails(jobId);\r\n        break;\r\n      default:\r\n        // 如果没有指定来源或来源不支持，尝试从所有适配器获取\r\n        const results = await Promise.allSettled([\r\n          linkedInAdapter.getJobDetails(jobId),\r\n          wwrAdapter.getJobDetails(jobId)\r\n        ]);\r\n        \r\n        // 使用第一个成功的结果\r\n        const successResult = results.find(result => result.status === 'fulfilled');\r\n        if (successResult) {\r\n          jobDetail = successResult.value;\r\n        } else {\r\n          throw new Error(`Job with ID ${jobId} not found`);\r\n        }\r\n    }\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, jobDetail);\r\n    \r\n    return jobDetail;\r\n  } catch (error) {\r\n    console.error(`Error fetching job details for ${jobId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 刷新缓存\r\nexport const refreshCache = async () => {\r\n  try {\r\n    await cacheService.clear();\r\n    console.log('Job cache cleared');\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error clearing job cache:', error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\n// 获取缓存统计\r\nexport const getCacheStats = () => {\r\n  return cacheService.getStats();\r\n};\r\n\r\n// 增强的去重函数\r\nconst removeDuplicateJobs = (jobs) => {\r\n  const seen = new Set();\r\n  const seenIds = new Set();\r\n  \r\n  return jobs.filter(job => {\r\n    // 首先检查ID是否重复\r\n    if (job.id && seenIds.has(job.id)) {\r\n      console.log(`Duplicate job ID found: ${job.id} - ${job.title} at ${job.company}`);\r\n      return false;\r\n    }\r\n    \r\n    // 创建多个唯一标识符来检查重复\r\n    const titleCompanyKey = `${job.title}-${job.company}`.toLowerCase().replace(/\\s+/g, '');\r\n    const titleLocationKey = `${job.title}-${job.location}`.toLowerCase().replace(/\\s+/g, '');\r\n    const companyTitleKey = `${job.company}-${job.title}`.toLowerCase().replace(/\\s+/g, '');\r\n    \r\n    // 检查是否已存在相似的工作\r\n    if (seen.has(titleCompanyKey) || seen.has(titleLocationKey) || seen.has(companyTitleKey)) {\r\n      console.log(`Duplicate job found: ${job.title} at ${job.company}`);\r\n      return false;\r\n    }\r\n    \r\n    // 额外检查：如果标题和公司名称非常相似，也认为是重复\r\n    for (const existingKey of seen) {\r\n      const similarity = calculateSimilarity(titleCompanyKey, existingKey);\r\n      if (similarity > 0.85) { // 85%相似度阈值\r\n        console.log(`Similar job found (${Math.round(similarity * 100)}% similarity): ${job.title} at ${job.company}`);\r\n        return false;\r\n      }\r\n    }\r\n    \r\n    // 记录所有标识符\r\n    if (job.id) seenIds.add(job.id);\r\n    seen.add(titleCompanyKey);\r\n    seen.add(titleLocationKey);\r\n    seen.add(companyTitleKey);\r\n    \r\n    return true;\r\n  });\r\n};\r\n\r\n// 计算字符串相似度的简单函数\r\nconst calculateSimilarity = (str1, str2) => {\r\n  const longer = str1.length > str2.length ? str1 : str2;\r\n  const shorter = str1.length > str2.length ? str2 : str1;\r\n  \r\n  if (longer.length === 0) return 1.0;\r\n  \r\n  const editDistance = levenshteinDistance(longer, shorter);\r\n  return (longer.length - editDistance) / longer.length;\r\n};\r\n\r\n// 计算编辑距离\r\nconst levenshteinDistance = (str1, str2) => {\r\n  const matrix = [];\r\n  \r\n  for (let i = 0; i <= str2.length; i++) {\r\n    matrix[i] = [i];\r\n  }\r\n  \r\n  for (let j = 0; j <= str1.length; j++) {\r\n    matrix[0][j] = j;\r\n  }\r\n  \r\n  for (let i = 1; i <= str2.length; i++) {\r\n    for (let j = 1; j <= str1.length; j++) {\r\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\r\n        matrix[i][j] = matrix[i - 1][j - 1];\r\n      } else {\r\n        matrix[i][j] = Math.min(\r\n          matrix[i - 1][j - 1] + 1,\r\n          matrix[i][j - 1] + 1,\r\n          matrix[i - 1][j] + 1\r\n        );\r\n      }\r\n    }\r\n  }\r\n  \r\n  return matrix[str2.length][str1.length];\r\n};\r\n\r\n// 排序函数\r\nconst sortJobs = (jobs, sortBy = 'date') => {\r\n  const sortedJobs = [...jobs];\r\n  \r\n  switch (sortBy) {\r\n    case 'date':\r\n      // 按发布日期排序（最新的在前面）\r\n      return sortedJobs.sort((a, b) => {\r\n        // 优先显示\"Today\"\r\n        if (a.postedDate === 'Today' && b.postedDate !== 'Today') return -1;\r\n        if (a.postedDate !== 'Today' && b.postedDate === 'Today') return 1;\r\n        \r\n        // 优先显示\"Yesterday\"\r\n        if (a.postedDate === 'Yesterday' && b.postedDate !== 'Yesterday' && b.postedDate !== 'Today') return -1;\r\n        if (a.postedDate !== 'Yesterday' && a.postedDate !== 'Today' && b.postedDate === 'Yesterday') return 1;\r\n        \r\n        // 比较天数\r\n        const getNumericDays = (dateStr) => {\r\n          if (dateStr.includes('days ago')) {\r\n            return parseInt(dateStr.split(' ')[0], 10);\r\n          }\r\n          if (dateStr.includes('weeks ago')) {\r\n            return parseInt(dateStr.split(' ')[0], 10) * 7;\r\n          }\r\n          if (dateStr.includes('months ago')) {\r\n            return parseInt(dateStr.split(' ')[0], 10) * 30;\r\n          }\r\n          return 0;\r\n        };\r\n        \r\n        return getNumericDays(a.postedDate) - getNumericDays(b.postedDate);\r\n      });\r\n    \r\n    case 'salary':\r\n      // 按薪资排序（高的在前面）\r\n      return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\r\n    \r\n    case 'company':\r\n      // 按公司名称排序\r\n      return sortedJobs.sort((a, b) => a.company.localeCompare(b.company));\r\n    \r\n    case 'title':\r\n      // 按职位名称排序\r\n      return sortedJobs.sort((a, b) => a.title.localeCompare(b.title));\r\n    \r\n    default:\r\n      return sortedJobs;\r\n  }\r\n};\r\n\r\nexport default {\r\n  searchRemoteJobs,\r\n  fetchWeWorkRemotelyJobs,\r\n  fetchLinkedInJobs,\r\n  getJobDetails,\r\n  refreshCache,\r\n  getCacheStats\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}