{"ast":null,"code":"// 数据加载器\n// 处理并行API请求、数据合并和去重\nimport DeduplicationService from'./DeduplicationService';class DataLoader{constructor(apiAdapters,cacheService){this.apiAdapters=apiAdapters;this.cacheService=cacheService;this.deduplicationService=new DeduplicationService();this.requestQueue=[];this.maxConcurrentRequests=3;this.loadedJobsGlobal=new Set();// 全局已加载工作追踪\n}/**\r\n   * 从所有来源加载工作\r\n   * @param {string} searchTerm - 搜索关键词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {Promise<Object>} - 加载结果\r\n   */async loadJobsFromAllSources(){let searchTerm=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let page=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;let pageSize=arguments.length>3&&arguments[3]!==undefined?arguments[3]:20;console.log(`加载工作数据 - 搜索词: \"${searchTerm}\", 页码: ${page}, 页面大小: ${pageSize}`);try{// 为每个页面创建新的去重服务实例，但保持全局追踪\nconst pageDeduplicationService=new DeduplicationService();// 将已知的全局工作添加到页面去重服务中\nfor(const jobId of this.loadedJobsGlobal){pageDeduplicationService.seenJobIds.add(jobId);}// 并行从所有来源获取数据\nconst sourcePromises=Object.entries(this.apiAdapters).map(_ref=>{let[sourceName,adapter]=_ref;return this.loadJobsFromSource(sourceName,adapter,searchTerm,filters,page,pageSize);});const sourceResults=await Promise.allSettled(sourcePromises);// 收集成功的结果\nconst jobsBySource={};let totalAvailable=0;sourceResults.forEach((result,index)=>{const sourceName=Object.keys(this.apiAdapters)[index];if(result.status==='fulfilled'&&result.value.jobs.length>0){jobsBySource[sourceName]=result.value.jobs;totalAvailable+=result.value.total||result.value.jobs.length;console.log(`来源 ${sourceName}: 获取到 ${result.value.jobs.length} 个工作`);}else if(result.status==='rejected'){console.error(`来源 ${sourceName} 加载失败:`,result.reason);jobsBySource[sourceName]=[];}});// 使用增强的去重服务处理多源数据\nconst uniqueJobs=pageDeduplicationService.deduplicateMultipleSources(jobsBySource);// 更新全局已加载工作追踪\nuniqueJobs.forEach(job=>{if(job.id){this.loadedJobsGlobal.add(job.id);}});// 应用额外的筛选和排序\nconst filteredJobs=this.applyFilters(uniqueJobs,filters);const sortedJobs=this.sortJobs(filteredJobs,filters.sort||'date');// 分页处理\nconst startIndex=0;// 因为我们已经在API层面处理了分页\nconst endIndex=pageSize;const paginatedJobs=sortedJobs.slice(startIndex,endIndex);const result={jobs:paginatedJobs,total:sortedJobs.length,totalAvailable:totalAvailable,page:page,pageSize:pageSize,hasMore:sortedJobs.length>pageSize,sources:Object.keys(jobsBySource).filter(source=>jobsBySource[source].length>0),deduplicationStats:pageDeduplicationService.getStats()};console.log(`数据加载完成 - 返回 ${paginatedJobs.length} 个唯一工作`);console.log('去重统计:',pageDeduplicationService.getStats());return result;}catch(error){console.error('数据加载失败:',error);return{jobs:[],total:0,totalAvailable:0,page:page,pageSize:pageSize,hasMore:false,sources:[],error:error.message};}}/**\r\n   * 从单个来源加载工作\r\n   * @param {string} sourceName - 来源名称\r\n   * @param {Object} adapter - API适配器\r\n   * @param {string} searchTerm - 搜索关键词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {Promise<Object>} - 加载结果\r\n   */async loadJobsFromSource(sourceName,adapter,searchTerm,filters,page,pageSize){try{console.log(`从 ${sourceName} 加载数据...`);// 生成缓存键\nconst cacheKey=this.generateCacheKey(sourceName,searchTerm,filters,page,pageSize);// 检查缓存\nif(this.cacheService){const cachedData=await this.cacheService.get(cacheKey);if(cachedData){console.log(`使用 ${sourceName} 的缓存数据`);return cachedData;}}// 调用API\nlet result;if(adapter.searchJobsPaginated){// 使用分页方法\nresult=await adapter.searchJobsPaginated(searchTerm,filters,page,pageSize);}else if(adapter.searchJobs){// 使用标准方法\nresult=await adapter.searchJobs(searchTerm,filters,page);}else{throw new Error(`${sourceName} 适配器不支持工作搜索`);}// 确保结果格式正确\nif(!result||!Array.isArray(result.jobs)){console.warn(`${sourceName} 返回了无效的数据格式`);return{jobs:[],total:0};}// 缓存结果\nif(this.cacheService&&result.jobs.length>0){await this.cacheService.set(cacheKey,result);}return result;}catch(error){console.error(`从 ${sourceName} 加载数据失败:`,error);return{jobs:[],total:0,error:error.message};}}/**\r\n   * 应用筛选条件\r\n   * @param {Array} jobs - 工作列表\r\n   * @param {Object} filters - 筛选条件\r\n   * @returns {Array} - 筛选后的工作列表\r\n   */applyFilters(jobs,filters){let filteredJobs=[...jobs];// 工作类型筛选\nif(filters.jobType){filteredJobs=filteredJobs.filter(job=>job.type&&job.type.toLowerCase()===filters.jobType.toLowerCase());}// 薪资范围筛选\nif(filters.salary){const{min,max}=filters.salary;filteredJobs=filteredJobs.filter(job=>{const salary=job.salary||0;return(!min||salary>=min)&&(!max||salary<=max);});}// 位置筛选\nif(filters.location&&filters.location!=='remote'){filteredJobs=filteredJobs.filter(job=>job.location&&job.location.toLowerCase().includes(filters.location.toLowerCase()));}// 技能筛选\nif(filters.skills&&filters.skills.length>0){filteredJobs=filteredJobs.filter(job=>{if(!job.skills||!Array.isArray(job.skills))return false;return filters.skills.some(skill=>job.skills.some(jobSkill=>jobSkill.toLowerCase().includes(skill.toLowerCase())));});}// 公司筛选\nif(filters.company){filteredJobs=filteredJobs.filter(job=>job.company&&job.company.toLowerCase().includes(filters.company.toLowerCase()));}// 发布时间筛选\nif(filters.dateRange){filteredJobs=filteredJobs.filter(job=>{if(!job.postedDate)return true;const daysAgo=this.parseDateToDaysAgo(job.postedDate);return daysAgo<=filters.dateRange;});}return filteredJobs;}/**\r\n   * 排序工作列表\r\n   * @param {Array} jobs - 工作列表\r\n   * @param {string} sortBy - 排序方式\r\n   * @returns {Array} - 排序后的工作列表\r\n   */sortJobs(jobs){let sortBy=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'date';const sortedJobs=[...jobs];switch(sortBy){case'date':return sortedJobs.sort((a,b)=>{const aDays=this.parseDateToDaysAgo(a.postedDate);const bDays=this.parseDateToDaysAgo(b.postedDate);return aDays-bDays;// 最新的在前面\n});case'salary':return sortedJobs.sort((a,b)=>(b.salary||0)-(a.salary||0));case'company':return sortedJobs.sort((a,b)=>(a.company||'').localeCompare(b.company||''));case'title':return sortedJobs.sort((a,b)=>(a.title||'').localeCompare(b.title||''));case'relevance':// 基于来源优先级和其他因素排序\nreturn sortedJobs.sort((a,b)=>{const sourcePriority={'LinkedIn':3,'RemoteOK':2,'WeWorkRemotely':1};const aPriority=sourcePriority[a.source]||0;const bPriority=sourcePriority[b.source]||0;if(aPriority!==bPriority){return bPriority-aPriority;}// 如果来源优先级相同，按日期排序\nconst aDays=this.parseDateToDaysAgo(a.postedDate);const bDays=this.parseDateToDaysAgo(b.postedDate);return aDays-bDays;});default:return sortedJobs;}}/**\r\n   * 解析日期字符串为天数\r\n   * @param {string} dateStr - 日期字符串\r\n   * @returns {number} - 天数\r\n   */parseDateToDaysAgo(dateStr){if(!dateStr)return 999;if(dateStr==='Today')return 0;if(dateStr==='Yesterday')return 1;const daysMatch=dateStr.match(/(\\d+)\\s*days?\\s*ago/i);if(daysMatch)return parseInt(daysMatch[1],10);const weeksMatch=dateStr.match(/(\\d+)\\s*weeks?\\s*ago/i);if(weeksMatch)return parseInt(weeksMatch[1],10)*7;const monthsMatch=dateStr.match(/(\\d+)\\s*months?\\s*ago/i);if(monthsMatch)return parseInt(monthsMatch[1],10)*30;return 999;// 未知日期排在最后\n}/**\r\n   * 生成缓存键\r\n   * @param {string} source - 数据源\r\n   * @param {string} searchTerm - 搜索词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {string} - 缓存键\r\n   */generateCacheKey(source,searchTerm,filters,page,pageSize){const filterStr=JSON.stringify(filters);return`jobs_${source}_${searchTerm}_${filterStr}_${page}_${pageSize}`;}/**\r\n   * 批量处理请求\r\n   * @param {Array} requests - 请求列表\r\n   * @returns {Promise<Array>} - 处理结果\r\n   */async processBatchRequests(requests){const batches=[];for(let i=0;i<requests.length;i+=this.maxConcurrentRequests){batches.push(requests.slice(i,i+this.maxConcurrentRequests));}const results=[];for(const batch of batches){const batchResults=await Promise.allSettled(batch);results.push(...batchResults);}return results;}/**\r\n   * 优化批量大小\r\n   * @param {string} networkSpeed - 网络速度\r\n   * @param {number} responseTime - 响应时间\r\n   * @returns {number} - 优化后的批量大小\r\n   */optimizeBatchSize(networkSpeed,responseTime){let batchSize=20;// 默认批量大小\nif(networkSpeed==='fast'&&responseTime<1000){batchSize=50;}else if(networkSpeed==='slow'||responseTime>5000){batchSize=10;}return Math.min(batchSize,100);// 最大不超过100\n}/**\r\n   * 重置加载状态\r\n   */reset(){this.requestQueue=[];this.loadedJobsGlobal.clear();this.deduplicationService.reset();console.log('DataLoader 状态已重置');}/**\r\n   * 获取加载统计\r\n   * @returns {Object} - 统计信息\r\n   */getStats(){return{loadedJobsCount:this.loadedJobsGlobal.size,queueLength:this.requestQueue.length,deduplicationStats:this.deduplicationService.getStats()};}/**\r\n   * 设置最大并发请求数\r\n   * @param {number} maxRequests - 最大并发数\r\n   */setMaxConcurrentRequests(maxRequests){this.maxConcurrentRequests=Math.max(1,Math.min(maxRequests,10));}}export default DataLoader;","map":{"version":3,"names":["DeduplicationService","DataLoader","constructor","apiAdapters","cacheService","deduplicationService","requestQueue","maxConcurrentRequests","loadedJobsGlobal","Set","loadJobsFromAllSources","searchTerm","arguments","length","undefined","filters","page","pageSize","console","log","pageDeduplicationService","jobId","seenJobIds","add","sourcePromises","Object","entries","map","_ref","sourceName","adapter","loadJobsFromSource","sourceResults","Promise","allSettled","jobsBySource","totalAvailable","forEach","result","index","keys","status","value","jobs","total","error","reason","uniqueJobs","deduplicateMultipleSources","job","id","filteredJobs","applyFilters","sortedJobs","sortJobs","sort","startIndex","endIndex","paginatedJobs","slice","hasMore","sources","filter","source","deduplicationStats","getStats","message","cacheKey","generateCacheKey","cachedData","get","searchJobsPaginated","searchJobs","Error","Array","isArray","warn","set","jobType","type","toLowerCase","salary","min","max","location","includes","skills","some","skill","jobSkill","company","dateRange","postedDate","daysAgo","parseDateToDaysAgo","sortBy","a","b","aDays","bDays","localeCompare","title","sourcePriority","aPriority","bPriority","dateStr","daysMatch","match","parseInt","weeksMatch","monthsMatch","filterStr","JSON","stringify","processBatchRequests","requests","batches","i","push","results","batch","batchResults","optimizeBatchSize","networkSpeed","responseTime","batchSize","Math","reset","clear","loadedJobsCount","size","queueLength","setMaxConcurrentRequests","maxRequests"],"sources":["D:/Kiro/remote-job-website/src/services/DataLoader.js"],"sourcesContent":["// 数据加载器\r\n// 处理并行API请求、数据合并和去重\r\n\r\nimport DeduplicationService from './DeduplicationService';\r\n\r\nclass DataLoader {\r\n  constructor(apiAdapters, cacheService) {\r\n    this.apiAdapters = apiAdapters;\r\n    this.cacheService = cacheService;\r\n    this.deduplicationService = new DeduplicationService();\r\n    this.requestQueue = [];\r\n    this.maxConcurrentRequests = 3;\r\n    this.loadedJobsGlobal = new Set(); // 全局已加载工作追踪\r\n  }\r\n\r\n  /**\r\n   * 从所有来源加载工作\r\n   * @param {string} searchTerm - 搜索关键词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {Promise<Object>} - 加载结果\r\n   */\r\n  async loadJobsFromAllSources(searchTerm = '', filters = {}, page = 0, pageSize = 20) {\r\n    console.log(`加载工作数据 - 搜索词: \"${searchTerm}\", 页码: ${page}, 页面大小: ${pageSize}`);\r\n    \r\n    try {\r\n      // 为每个页面创建新的去重服务实例，但保持全局追踪\r\n      const pageDeduplicationService = new DeduplicationService();\r\n      \r\n      // 将已知的全局工作添加到页面去重服务中\r\n      for (const jobId of this.loadedJobsGlobal) {\r\n        pageDeduplicationService.seenJobIds.add(jobId);\r\n      }\r\n      \r\n      // 并行从所有来源获取数据\r\n      const sourcePromises = Object.entries(this.apiAdapters).map(([sourceName, adapter]) => \r\n        this.loadJobsFromSource(sourceName, adapter, searchTerm, filters, page, pageSize)\r\n      );\r\n      \r\n      const sourceResults = await Promise.allSettled(sourcePromises);\r\n      \r\n      // 收集成功的结果\r\n      const jobsBySource = {};\r\n      let totalAvailable = 0;\r\n      \r\n      sourceResults.forEach((result, index) => {\r\n        const sourceName = Object.keys(this.apiAdapters)[index];\r\n        \r\n        if (result.status === 'fulfilled' && result.value.jobs.length > 0) {\r\n          jobsBySource[sourceName] = result.value.jobs;\r\n          totalAvailable += result.value.total || result.value.jobs.length;\r\n          console.log(`来源 ${sourceName}: 获取到 ${result.value.jobs.length} 个工作`);\r\n        } else if (result.status === 'rejected') {\r\n          console.error(`来源 ${sourceName} 加载失败:`, result.reason);\r\n          jobsBySource[sourceName] = [];\r\n        }\r\n      });\r\n      \r\n      // 使用增强的去重服务处理多源数据\r\n      const uniqueJobs = pageDeduplicationService.deduplicateMultipleSources(jobsBySource);\r\n      \r\n      // 更新全局已加载工作追踪\r\n      uniqueJobs.forEach(job => {\r\n        if (job.id) {\r\n          this.loadedJobsGlobal.add(job.id);\r\n        }\r\n      });\r\n      \r\n      // 应用额外的筛选和排序\r\n      const filteredJobs = this.applyFilters(uniqueJobs, filters);\r\n      const sortedJobs = this.sortJobs(filteredJobs, filters.sort || 'date');\r\n      \r\n      // 分页处理\r\n      const startIndex = 0; // 因为我们已经在API层面处理了分页\r\n      const endIndex = pageSize;\r\n      const paginatedJobs = sortedJobs.slice(startIndex, endIndex);\r\n      \r\n      const result = {\r\n        jobs: paginatedJobs,\r\n        total: sortedJobs.length,\r\n        totalAvailable: totalAvailable,\r\n        page: page,\r\n        pageSize: pageSize,\r\n        hasMore: sortedJobs.length > pageSize,\r\n        sources: Object.keys(jobsBySource).filter(source => jobsBySource[source].length > 0),\r\n        deduplicationStats: pageDeduplicationService.getStats()\r\n      };\r\n      \r\n      console.log(`数据加载完成 - 返回 ${paginatedJobs.length} 个唯一工作`);\r\n      console.log('去重统计:', pageDeduplicationService.getStats());\r\n      \r\n      return result;\r\n      \r\n    } catch (error) {\r\n      console.error('数据加载失败:', error);\r\n      return {\r\n        jobs: [],\r\n        total: 0,\r\n        totalAvailable: 0,\r\n        page: page,\r\n        pageSize: pageSize,\r\n        hasMore: false,\r\n        sources: [],\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 从单个来源加载工作\r\n   * @param {string} sourceName - 来源名称\r\n   * @param {Object} adapter - API适配器\r\n   * @param {string} searchTerm - 搜索关键词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {Promise<Object>} - 加载结果\r\n   */\r\n  async loadJobsFromSource(sourceName, adapter, searchTerm, filters, page, pageSize) {\r\n    try {\r\n      console.log(`从 ${sourceName} 加载数据...`);\r\n      \r\n      // 生成缓存键\r\n      const cacheKey = this.generateCacheKey(sourceName, searchTerm, filters, page, pageSize);\r\n      \r\n      // 检查缓存\r\n      if (this.cacheService) {\r\n        const cachedData = await this.cacheService.get(cacheKey);\r\n        if (cachedData) {\r\n          console.log(`使用 ${sourceName} 的缓存数据`);\r\n          return cachedData;\r\n        }\r\n      }\r\n      \r\n      // 调用API\r\n      let result;\r\n      if (adapter.searchJobsPaginated) {\r\n        // 使用分页方法\r\n        result = await adapter.searchJobsPaginated(searchTerm, filters, page, pageSize);\r\n      } else if (adapter.searchJobs) {\r\n        // 使用标准方法\r\n        result = await adapter.searchJobs(searchTerm, filters, page);\r\n      } else {\r\n        throw new Error(`${sourceName} 适配器不支持工作搜索`);\r\n      }\r\n      \r\n      // 确保结果格式正确\r\n      if (!result || !Array.isArray(result.jobs)) {\r\n        console.warn(`${sourceName} 返回了无效的数据格式`);\r\n        return { jobs: [], total: 0 };\r\n      }\r\n      \r\n      // 缓存结果\r\n      if (this.cacheService && result.jobs.length > 0) {\r\n        await this.cacheService.set(cacheKey, result);\r\n      }\r\n      \r\n      return result;\r\n      \r\n    } catch (error) {\r\n      console.error(`从 ${sourceName} 加载数据失败:`, error);\r\n      return { jobs: [], total: 0, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 应用筛选条件\r\n   * @param {Array} jobs - 工作列表\r\n   * @param {Object} filters - 筛选条件\r\n   * @returns {Array} - 筛选后的工作列表\r\n   */\r\n  applyFilters(jobs, filters) {\r\n    let filteredJobs = [...jobs];\r\n    \r\n    // 工作类型筛选\r\n    if (filters.jobType) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.type && job.type.toLowerCase() === filters.jobType.toLowerCase()\r\n      );\r\n    }\r\n    \r\n    // 薪资范围筛选\r\n    if (filters.salary) {\r\n      const { min, max } = filters.salary;\r\n      filteredJobs = filteredJobs.filter(job => {\r\n        const salary = job.salary || 0;\r\n        return (!min || salary >= min) && (!max || salary <= max);\r\n      });\r\n    }\r\n    \r\n    // 位置筛选\r\n    if (filters.location && filters.location !== 'remote') {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.location && job.location.toLowerCase().includes(filters.location.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    // 技能筛选\r\n    if (filters.skills && filters.skills.length > 0) {\r\n      filteredJobs = filteredJobs.filter(job => {\r\n        if (!job.skills || !Array.isArray(job.skills)) return false;\r\n        return filters.skills.some(skill => \r\n          job.skills.some(jobSkill => \r\n            jobSkill.toLowerCase().includes(skill.toLowerCase())\r\n          )\r\n        );\r\n      });\r\n    }\r\n    \r\n    // 公司筛选\r\n    if (filters.company) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.company && job.company.toLowerCase().includes(filters.company.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    // 发布时间筛选\r\n    if (filters.dateRange) {\r\n      filteredJobs = filteredJobs.filter(job => {\r\n        if (!job.postedDate) return true;\r\n        \r\n        const daysAgo = this.parseDateToDaysAgo(job.postedDate);\r\n        return daysAgo <= filters.dateRange;\r\n      });\r\n    }\r\n    \r\n    return filteredJobs;\r\n  }\r\n\r\n  /**\r\n   * 排序工作列表\r\n   * @param {Array} jobs - 工作列表\r\n   * @param {string} sortBy - 排序方式\r\n   * @returns {Array} - 排序后的工作列表\r\n   */\r\n  sortJobs(jobs, sortBy = 'date') {\r\n    const sortedJobs = [...jobs];\r\n    \r\n    switch (sortBy) {\r\n      case 'date':\r\n        return sortedJobs.sort((a, b) => {\r\n          const aDays = this.parseDateToDaysAgo(a.postedDate);\r\n          const bDays = this.parseDateToDaysAgo(b.postedDate);\r\n          return aDays - bDays; // 最新的在前面\r\n        });\r\n      \r\n      case 'salary':\r\n        return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\r\n      \r\n      case 'company':\r\n        return sortedJobs.sort((a, b) => (a.company || '').localeCompare(b.company || ''));\r\n      \r\n      case 'title':\r\n        return sortedJobs.sort((a, b) => (a.title || '').localeCompare(b.title || ''));\r\n      \r\n      case 'relevance':\r\n        // 基于来源优先级和其他因素排序\r\n        return sortedJobs.sort((a, b) => {\r\n          const sourcePriority = { 'LinkedIn': 3, 'RemoteOK': 2, 'WeWorkRemotely': 1 };\r\n          const aPriority = sourcePriority[a.source] || 0;\r\n          const bPriority = sourcePriority[b.source] || 0;\r\n          \r\n          if (aPriority !== bPriority) {\r\n            return bPriority - aPriority;\r\n          }\r\n          \r\n          // 如果来源优先级相同，按日期排序\r\n          const aDays = this.parseDateToDaysAgo(a.postedDate);\r\n          const bDays = this.parseDateToDaysAgo(b.postedDate);\r\n          return aDays - bDays;\r\n        });\r\n      \r\n      default:\r\n        return sortedJobs;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 解析日期字符串为天数\r\n   * @param {string} dateStr - 日期字符串\r\n   * @returns {number} - 天数\r\n   */\r\n  parseDateToDaysAgo(dateStr) {\r\n    if (!dateStr) return 999;\r\n    \r\n    if (dateStr === 'Today') return 0;\r\n    if (dateStr === 'Yesterday') return 1;\r\n    \r\n    const daysMatch = dateStr.match(/(\\d+)\\s*days?\\s*ago/i);\r\n    if (daysMatch) return parseInt(daysMatch[1], 10);\r\n    \r\n    const weeksMatch = dateStr.match(/(\\d+)\\s*weeks?\\s*ago/i);\r\n    if (weeksMatch) return parseInt(weeksMatch[1], 10) * 7;\r\n    \r\n    const monthsMatch = dateStr.match(/(\\d+)\\s*months?\\s*ago/i);\r\n    if (monthsMatch) return parseInt(monthsMatch[1], 10) * 30;\r\n    \r\n    return 999; // 未知日期排在最后\r\n  }\r\n\r\n  /**\r\n   * 生成缓存键\r\n   * @param {string} source - 数据源\r\n   * @param {string} searchTerm - 搜索词\r\n   * @param {Object} filters - 筛选条件\r\n   * @param {number} page - 页码\r\n   * @param {number} pageSize - 页面大小\r\n   * @returns {string} - 缓存键\r\n   */\r\n  generateCacheKey(source, searchTerm, filters, page, pageSize) {\r\n    const filterStr = JSON.stringify(filters);\r\n    return `jobs_${source}_${searchTerm}_${filterStr}_${page}_${pageSize}`;\r\n  }\r\n\r\n  /**\r\n   * 批量处理请求\r\n   * @param {Array} requests - 请求列表\r\n   * @returns {Promise<Array>} - 处理结果\r\n   */\r\n  async processBatchRequests(requests) {\r\n    const batches = [];\r\n    for (let i = 0; i < requests.length; i += this.maxConcurrentRequests) {\r\n      batches.push(requests.slice(i, i + this.maxConcurrentRequests));\r\n    }\r\n    \r\n    const results = [];\r\n    for (const batch of batches) {\r\n      const batchResults = await Promise.allSettled(batch);\r\n      results.push(...batchResults);\r\n    }\r\n    \r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * 优化批量大小\r\n   * @param {string} networkSpeed - 网络速度\r\n   * @param {number} responseTime - 响应时间\r\n   * @returns {number} - 优化后的批量大小\r\n   */\r\n  optimizeBatchSize(networkSpeed, responseTime) {\r\n    let batchSize = 20; // 默认批量大小\r\n    \r\n    if (networkSpeed === 'fast' && responseTime < 1000) {\r\n      batchSize = 50;\r\n    } else if (networkSpeed === 'slow' || responseTime > 5000) {\r\n      batchSize = 10;\r\n    }\r\n    \r\n    return Math.min(batchSize, 100); // 最大不超过100\r\n  }\r\n\r\n  /**\r\n   * 重置加载状态\r\n   */\r\n  reset() {\r\n    this.requestQueue = [];\r\n    this.loadedJobsGlobal.clear();\r\n    this.deduplicationService.reset();\r\n    console.log('DataLoader 状态已重置');\r\n  }\r\n\r\n  /**\r\n   * 获取加载统计\r\n   * @returns {Object} - 统计信息\r\n   */\r\n  getStats() {\r\n    return {\r\n      loadedJobsCount: this.loadedJobsGlobal.size,\r\n      queueLength: this.requestQueue.length,\r\n      deduplicationStats: this.deduplicationService.getStats()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 设置最大并发请求数\r\n   * @param {number} maxRequests - 最大并发数\r\n   */\r\n  setMaxConcurrentRequests(maxRequests) {\r\n    this.maxConcurrentRequests = Math.max(1, Math.min(maxRequests, 10));\r\n  }\r\n}\r\n\r\nexport default DataLoader;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}