{"ast":null,"code":"// 备用工作服务 - 确保线上环境始终有数据显示\nimport { mockJobs } from './mockData';\n\n// 简化的工作搜索服务，优先使用模拟数据，确保稳定性\nexport const searchJobsWithFallback = async (searchTerm = '', filters = {}) => {\n  console.log('🔄 开始搜索工作，搜索词:', searchTerm, '筛选器:', filters);\n  try {\n    // 首先使用模拟数据作为基础，确保始终有数据\n    let jobs = [...mockJobs];\n    console.log('✅ 加载了', jobs.length, '个模拟工作');\n\n    // 尝试从真实API获取额外数据（但不依赖它们）\n    try {\n      const additionalJobs = await fetchAdditionalJobsWithTimeout();\n      if (additionalJobs && additionalJobs.length > 0) {\n        jobs = [...jobs, ...additionalJobs];\n        console.log('✅ 额外获取了', additionalJobs.length, '个真实工作');\n      }\n    } catch (apiError) {\n      console.warn('⚠️ API调用失败，使用模拟数据:', apiError.message);\n    }\n\n    // 应用搜索和筛选\n    const filteredJobs = applySearchAndFilters(jobs, searchTerm, filters);\n    const result = {\n      jobs: filteredJobs,\n      total: filteredJobs.length,\n      sources: getDataSources(filteredJobs),\n      hasMore: false,\n      page: 0,\n      pageSize: filteredJobs.length\n    };\n    console.log('✅ 搜索完成，返回', result.jobs.length, '个工作');\n    return result;\n  } catch (error) {\n    console.error('❌ 搜索服务完全失败:', error);\n\n    // 即使出现错误，也返回基本的模拟数据\n    const basicJobs = applySearchAndFilters(mockJobs, searchTerm, filters);\n    return {\n      jobs: basicJobs,\n      total: basicJobs.length,\n      sources: ['Mock Data'],\n      hasMore: false,\n      page: 0,\n      pageSize: basicJobs.length,\n      error: '部分功能可能受限，正在使用离线数据'\n    };\n  }\n};\n\n// 带超时的API调用\nconst fetchAdditionalJobsWithTimeout = async (timeoutMs = 5000) => {\n  return new Promise(async (resolve, reject) => {\n    // 设置超时\n    const timeout = setTimeout(() => {\n      reject(new Error('API调用超时'));\n    }, timeoutMs);\n    try {\n      // 尝试调用真实API（这里可以替换为实际的API调用）\n      const jobs = await tryFetchRealJobs();\n      clearTimeout(timeout);\n      resolve(jobs);\n    } catch (error) {\n      clearTimeout(timeout);\n      reject(error);\n    }\n  });\n};\n\n// 尝试获取真实工作数据\nconst tryFetchRealJobs = async () => {\n  // 这里可以尝试调用真实的API\n  // 为了演示，我们返回一些额外的模拟数据\n  const additionalJobs = [{\n    id: 'real-1',\n    title: 'Senior React Developer',\n    company: 'TechCorp',\n    companyLogo: 'https://logo.clearbit.com/techcorp.com',\n    location: 'Remote - Global',\n    type: 'Full-time',\n    salary: 135,\n    team: 'Engineering',\n    postedDate: 'Today',\n    views: 89,\n    applicants: 7,\n    description: 'Join our team to build next-generation web applications using React and modern JavaScript.',\n    skills: ['React', 'JavaScript', 'TypeScript', 'GraphQL', 'AWS'],\n    source: 'Real API',\n    sourceUrl: 'https://techcorp.com/careers'\n  }];\n\n  // 模拟网络延迟\n  await new Promise(resolve => setTimeout(resolve, 1000));\n  return additionalJobs;\n};\n\n// 应用搜索和筛选逻辑\nconst applySearchAndFilters = (jobs, searchTerm, filters) => {\n  let filteredJobs = [...jobs];\n\n  // 搜索筛选\n  if (searchTerm && searchTerm.trim()) {\n    const term = searchTerm.toLowerCase().trim();\n    filteredJobs = filteredJobs.filter(job => {\n      return job.title.toLowerCase().includes(term) || job.company.toLowerCase().includes(term) || job.description.toLowerCase().includes(term) || job.skills && job.skills.some(skill => skill.toLowerCase().includes(term));\n    });\n  }\n\n  // 职位类型筛选\n  if (filters && Array.isArray(filters) && filters.length > 0) {\n    filteredJobs = filteredJobs.filter(job => {\n      return filters.some(filter => matchJobToFilter(job, filter));\n    });\n  }\n\n  // 按相关性和日期排序\n  return sortJobs(filteredJobs, searchTerm);\n};\n\n// 工作与筛选器匹配\nconst matchJobToFilter = (job, filter) => {\n  const title = job.title.toLowerCase();\n  const description = job.description ? job.description.toLowerCase() : '';\n  const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\n  const filterMap = {\n    'frontend-developer': ['frontend', 'front-end', 'react', 'vue', 'angular', 'javascript'],\n    'backend-developer': ['backend', 'back-end', 'api', 'server', 'node', 'python', 'java'],\n    'fullstack-developer': ['full stack', 'fullstack', 'full-stack'],\n    'ux-designer': ['ux designer', 'user experience', 'ux'],\n    'ui-designer': ['ui designer', 'user interface', 'ui'],\n    'product-designer': ['product designer', 'product design'],\n    'data-scientist': ['data scientist', 'machine learning', 'data science'],\n    'devops-engineer': ['devops', 'infrastructure', 'cloud', 'kubernetes'],\n    'mobile-developer': ['mobile', 'ios', 'android', 'react native'],\n    'marketing-specialist': ['marketing', 'content marketing', 'digital marketing'],\n    'project-manager': ['project manager', 'program manager', 'scrum master']\n  };\n  const keywords = filterMap[filter] || [];\n  return keywords.some(keyword => title.includes(keyword) || description.includes(keyword) || skills.includes(keyword));\n};\n\n// 工作排序\nconst sortJobs = (jobs, searchTerm) => {\n  return jobs.sort((a, b) => {\n    // 如果有搜索词，按相关性排序\n    if (searchTerm) {\n      const scoreA = calculateRelevanceScore(a, searchTerm);\n      const scoreB = calculateRelevanceScore(b, searchTerm);\n      if (scoreA !== scoreB) return scoreB - scoreA;\n    }\n\n    // 按发布日期排序\n    const dateOrder = ['Today', 'Yesterday', '2 days ago', '3 days ago', '4 days ago', '5 days ago', '6 days ago', '1 week ago'];\n    const indexA = dateOrder.indexOf(a.postedDate);\n    const indexB = dateOrder.indexOf(b.postedDate);\n    if (indexA !== -1 && indexB !== -1) {\n      return indexA - indexB;\n    }\n    if (indexA !== -1) return -1;\n    if (indexB !== -1) return 1;\n    return 0;\n  });\n};\n\n// 计算相关性分数\nconst calculateRelevanceScore = (job, searchTerm) => {\n  if (!searchTerm) return 0;\n  const term = searchTerm.toLowerCase();\n  let score = 0;\n\n  // 标题匹配（最高权重）\n  if (job.title.toLowerCase().includes(term)) score += 10;\n\n  // 公司匹配\n  if (job.company.toLowerCase().includes(term)) score += 5;\n\n  // 技能匹配\n  if (job.skills && job.skills.some(skill => skill.toLowerCase().includes(term))) score += 8;\n\n  // 描述匹配\n  if (job.description && job.description.toLowerCase().includes(term)) score += 3;\n  return score;\n};\n\n// 获取数据源\nconst getDataSources = jobs => {\n  const sources = [...new Set(jobs.map(job => job.source || 'Mock Data'))];\n  return sources;\n};\nexport default {\n  searchJobsWithFallback\n};","map":{"version":3,"names":["mockJobs","searchJobsWithFallback","searchTerm","filters","console","log","jobs","length","additionalJobs","fetchAdditionalJobsWithTimeout","apiError","warn","message","filteredJobs","applySearchAndFilters","result","total","sources","getDataSources","hasMore","page","pageSize","error","basicJobs","timeoutMs","Promise","resolve","reject","timeout","setTimeout","Error","tryFetchRealJobs","clearTimeout","id","title","company","companyLogo","location","type","salary","team","postedDate","views","applicants","description","skills","source","sourceUrl","trim","term","toLowerCase","filter","job","includes","some","skill","Array","isArray","matchJobToFilter","sortJobs","join","filterMap","keywords","keyword","sort","a","b","scoreA","calculateRelevanceScore","scoreB","dateOrder","indexA","indexOf","indexB","score","Set","map"],"sources":["D:/Kiro/remote-job-website/src/services/fallbackJobService.js"],"sourcesContent":["// 备用工作服务 - 确保线上环境始终有数据显示\r\nimport { mockJobs } from './mockData';\r\n\r\n// 简化的工作搜索服务，优先使用模拟数据，确保稳定性\r\nexport const searchJobsWithFallback = async (searchTerm = '', filters = {}) => {\r\n  console.log('🔄 开始搜索工作，搜索词:', searchTerm, '筛选器:', filters);\r\n  \r\n  try {\r\n    // 首先使用模拟数据作为基础，确保始终有数据\r\n    let jobs = [...mockJobs];\r\n    console.log('✅ 加载了', jobs.length, '个模拟工作');\r\n    \r\n    // 尝试从真实API获取额外数据（但不依赖它们）\r\n    try {\r\n      const additionalJobs = await fetchAdditionalJobsWithTimeout();\r\n      if (additionalJobs && additionalJobs.length > 0) {\r\n        jobs = [...jobs, ...additionalJobs];\r\n        console.log('✅ 额外获取了', additionalJobs.length, '个真实工作');\r\n      }\r\n    } catch (apiError) {\r\n      console.warn('⚠️ API调用失败，使用模拟数据:', apiError.message);\r\n    }\r\n    \r\n    // 应用搜索和筛选\r\n    const filteredJobs = applySearchAndFilters(jobs, searchTerm, filters);\r\n    \r\n    const result = {\r\n      jobs: filteredJobs,\r\n      total: filteredJobs.length,\r\n      sources: getDataSources(filteredJobs),\r\n      hasMore: false,\r\n      page: 0,\r\n      pageSize: filteredJobs.length\r\n    };\r\n    \r\n    console.log('✅ 搜索完成，返回', result.jobs.length, '个工作');\r\n    return result;\r\n    \r\n  } catch (error) {\r\n    console.error('❌ 搜索服务完全失败:', error);\r\n    \r\n    // 即使出现错误，也返回基本的模拟数据\r\n    const basicJobs = applySearchAndFilters(mockJobs, searchTerm, filters);\r\n    return {\r\n      jobs: basicJobs,\r\n      total: basicJobs.length,\r\n      sources: ['Mock Data'],\r\n      hasMore: false,\r\n      page: 0,\r\n      pageSize: basicJobs.length,\r\n      error: '部分功能可能受限，正在使用离线数据'\r\n    };\r\n  }\r\n};\r\n\r\n// 带超时的API调用\r\nconst fetchAdditionalJobsWithTimeout = async (timeoutMs = 5000) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    // 设置超时\r\n    const timeout = setTimeout(() => {\r\n      reject(new Error('API调用超时'));\r\n    }, timeoutMs);\r\n    \r\n    try {\r\n      // 尝试调用真实API（这里可以替换为实际的API调用）\r\n      const jobs = await tryFetchRealJobs();\r\n      clearTimeout(timeout);\r\n      resolve(jobs);\r\n    } catch (error) {\r\n      clearTimeout(timeout);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\n// 尝试获取真实工作数据\r\nconst tryFetchRealJobs = async () => {\r\n  // 这里可以尝试调用真实的API\r\n  // 为了演示，我们返回一些额外的模拟数据\r\n  const additionalJobs = [\r\n    {\r\n      id: 'real-1',\r\n      title: 'Senior React Developer',\r\n      company: 'TechCorp',\r\n      companyLogo: 'https://logo.clearbit.com/techcorp.com',\r\n      location: 'Remote - Global',\r\n      type: 'Full-time',\r\n      salary: 135,\r\n      team: 'Engineering',\r\n      postedDate: 'Today',\r\n      views: 89,\r\n      applicants: 7,\r\n      description: 'Join our team to build next-generation web applications using React and modern JavaScript.',\r\n      skills: ['React', 'JavaScript', 'TypeScript', 'GraphQL', 'AWS'],\r\n      source: 'Real API',\r\n      sourceUrl: 'https://techcorp.com/careers'\r\n    }\r\n  ];\r\n  \r\n  // 模拟网络延迟\r\n  await new Promise(resolve => setTimeout(resolve, 1000));\r\n  \r\n  return additionalJobs;\r\n};\r\n\r\n// 应用搜索和筛选逻辑\r\nconst applySearchAndFilters = (jobs, searchTerm, filters) => {\r\n  let filteredJobs = [...jobs];\r\n  \r\n  // 搜索筛选\r\n  if (searchTerm && searchTerm.trim()) {\r\n    const term = searchTerm.toLowerCase().trim();\r\n    filteredJobs = filteredJobs.filter(job => {\r\n      return (\r\n        job.title.toLowerCase().includes(term) ||\r\n        job.company.toLowerCase().includes(term) ||\r\n        job.description.toLowerCase().includes(term) ||\r\n        (job.skills && job.skills.some(skill => skill.toLowerCase().includes(term)))\r\n      );\r\n    });\r\n  }\r\n  \r\n  // 职位类型筛选\r\n  if (filters && Array.isArray(filters) && filters.length > 0) {\r\n    filteredJobs = filteredJobs.filter(job => {\r\n      return filters.some(filter => matchJobToFilter(job, filter));\r\n    });\r\n  }\r\n  \r\n  // 按相关性和日期排序\r\n  return sortJobs(filteredJobs, searchTerm);\r\n};\r\n\r\n// 工作与筛选器匹配\r\nconst matchJobToFilter = (job, filter) => {\r\n  const title = job.title.toLowerCase();\r\n  const description = job.description ? job.description.toLowerCase() : '';\r\n  const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\r\n  \r\n  const filterMap = {\r\n    'frontend-developer': ['frontend', 'front-end', 'react', 'vue', 'angular', 'javascript'],\r\n    'backend-developer': ['backend', 'back-end', 'api', 'server', 'node', 'python', 'java'],\r\n    'fullstack-developer': ['full stack', 'fullstack', 'full-stack'],\r\n    'ux-designer': ['ux designer', 'user experience', 'ux'],\r\n    'ui-designer': ['ui designer', 'user interface', 'ui'],\r\n    'product-designer': ['product designer', 'product design'],\r\n    'data-scientist': ['data scientist', 'machine learning', 'data science'],\r\n    'devops-engineer': ['devops', 'infrastructure', 'cloud', 'kubernetes'],\r\n    'mobile-developer': ['mobile', 'ios', 'android', 'react native'],\r\n    'marketing-specialist': ['marketing', 'content marketing', 'digital marketing'],\r\n    'project-manager': ['project manager', 'program manager', 'scrum master']\r\n  };\r\n  \r\n  const keywords = filterMap[filter] || [];\r\n  return keywords.some(keyword => \r\n    title.includes(keyword) || description.includes(keyword) || skills.includes(keyword)\r\n  );\r\n};\r\n\r\n// 工作排序\r\nconst sortJobs = (jobs, searchTerm) => {\r\n  return jobs.sort((a, b) => {\r\n    // 如果有搜索词，按相关性排序\r\n    if (searchTerm) {\r\n      const scoreA = calculateRelevanceScore(a, searchTerm);\r\n      const scoreB = calculateRelevanceScore(b, searchTerm);\r\n      if (scoreA !== scoreB) return scoreB - scoreA;\r\n    }\r\n    \r\n    // 按发布日期排序\r\n    const dateOrder = ['Today', 'Yesterday', '2 days ago', '3 days ago', '4 days ago', '5 days ago', '6 days ago', '1 week ago'];\r\n    const indexA = dateOrder.indexOf(a.postedDate);\r\n    const indexB = dateOrder.indexOf(b.postedDate);\r\n    \r\n    if (indexA !== -1 && indexB !== -1) {\r\n      return indexA - indexB;\r\n    }\r\n    if (indexA !== -1) return -1;\r\n    if (indexB !== -1) return 1;\r\n    \r\n    return 0;\r\n  });\r\n};\r\n\r\n// 计算相关性分数\r\nconst calculateRelevanceScore = (job, searchTerm) => {\r\n  if (!searchTerm) return 0;\r\n  \r\n  const term = searchTerm.toLowerCase();\r\n  let score = 0;\r\n  \r\n  // 标题匹配（最高权重）\r\n  if (job.title.toLowerCase().includes(term)) score += 10;\r\n  \r\n  // 公司匹配\r\n  if (job.company.toLowerCase().includes(term)) score += 5;\r\n  \r\n  // 技能匹配\r\n  if (job.skills && job.skills.some(skill => skill.toLowerCase().includes(term))) score += 8;\r\n  \r\n  // 描述匹配\r\n  if (job.description && job.description.toLowerCase().includes(term)) score += 3;\r\n  \r\n  return score;\r\n};\r\n\r\n// 获取数据源\r\nconst getDataSources = (jobs) => {\r\n  const sources = [...new Set(jobs.map(job => job.source || 'Mock Data'))];\r\n  return sources;\r\n};\r\n\r\nexport default {\r\n  searchJobsWithFallback\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}