{"ast":null,"code":"// 收藏工作服务\n// 管理用户收藏的工作列表\n\nclass BookmarkService {\n  constructor() {\n    this.storageKey = 'huntjobs_bookmarks';\n    this.bookmarks = this.loadBookmarks();\n  }\n\n  // 从本地存储加载收藏列表\n  loadBookmarks() {\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.error('Error loading bookmarks:', error);\n      return [];\n    }\n  }\n\n  // 保存收藏列表到本地存储\n  saveBookmarks() {\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(this.bookmarks));\n    } catch (error) {\n      console.error('Error saving bookmarks:', error);\n    }\n  }\n\n  // 添加工作到收藏列表\n  addBookmark(job) {\n    if (!job || !job.id) {\n      console.error('Invalid job object');\n      return false;\n    }\n\n    // 检查是否已经收藏\n    if (this.isBookmarked(job.id)) {\n      console.log('Job already bookmarked');\n      return false;\n    }\n\n    // 添加收藏时间戳\n    const bookmarkedJob = {\n      ...job,\n      bookmarkedAt: new Date().toISOString()\n    };\n    this.bookmarks.unshift(bookmarkedJob); // 添加到开头\n    this.saveBookmarks();\n    console.log(`Job \"${job.title}\" added to bookmarks`);\n    return true;\n  }\n\n  // 从收藏列表移除工作\n  removeBookmark(jobId) {\n    const initialLength = this.bookmarks.length;\n    this.bookmarks = this.bookmarks.filter(job => job.id !== jobId);\n    if (this.bookmarks.length < initialLength) {\n      this.saveBookmarks();\n      console.log(`Job with ID \"${jobId}\" removed from bookmarks`);\n      return true;\n    }\n    return false;\n  }\n\n  // 检查工作是否已收藏\n  isBookmarked(jobId) {\n    return this.bookmarks.some(job => job.id === jobId);\n  }\n\n  // 获取所有收藏的工作\n  getBookmarks() {\n    return [...this.bookmarks];\n  }\n\n  // 获取收藏数量\n  getBookmarkCount() {\n    return this.bookmarks.length;\n  }\n\n  // 切换收藏状态\n  toggleBookmark(job) {\n    if (this.isBookmarked(job.id)) {\n      return this.removeBookmark(job.id);\n    } else {\n      return this.addBookmark(job);\n    }\n  }\n\n  // 清空所有收藏\n  clearAllBookmarks() {\n    this.bookmarks = [];\n    this.saveBookmarks();\n    console.log('All bookmarks cleared');\n  }\n\n  // 搜索收藏的工作\n  searchBookmarks(searchTerm) {\n    if (!searchTerm) return this.getBookmarks();\n    const term = searchTerm.toLowerCase();\n    return this.bookmarks.filter(job => job.title.toLowerCase().includes(term) || job.company.toLowerCase().includes(term) || job.location.toLowerCase().includes(term) || job.description && job.description.toLowerCase().includes(term));\n  }\n\n  // 按分类筛选收藏的工作\n  filterBookmarksByCategory(categoryId) {\n    if (!categoryId) return this.getBookmarks();\n\n    // 这里可以复用JobFeed中的分类匹配逻辑\n    return this.bookmarks.filter(job => {\n      // 简化的分类匹配逻辑\n      const title = job.title.toLowerCase();\n      const description = job.description ? job.description.toLowerCase() : '';\n      switch (categoryId) {\n        case 'ux-designer':\n          return title.includes('ux') || title.includes('user experience');\n        case 'ui-designer':\n          return title.includes('ui') || title.includes('user interface');\n        case 'frontend-developer':\n          return title.includes('frontend') || title.includes('front-end') || title.includes('react');\n        case 'backend-developer':\n          return title.includes('backend') || title.includes('back-end') || title.includes('api');\n        default:\n          return true;\n      }\n    });\n  }\n\n  // 获取收藏统计信息\n  getBookmarkStats() {\n    const stats = {\n      total: this.bookmarks.length,\n      byCompany: {},\n      byCategory: {},\n      recentCount: 0\n    };\n    const oneWeekAgo = new Date();\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n    this.bookmarks.forEach(job => {\n      // 按公司统计\n      stats.byCompany[job.company] = (stats.byCompany[job.company] || 0) + 1;\n\n      // 统计最近一周的收藏\n      if (new Date(job.bookmarkedAt) > oneWeekAgo) {\n        stats.recentCount++;\n      }\n    });\n    return stats;\n  }\n}\n\n// 创建单例实例\nconst bookmarkService = new BookmarkService();\nexport default bookmarkService;","map":{"version":3,"names":["BookmarkService","constructor","storageKey","bookmarks","loadBookmarks","stored","localStorage","getItem","JSON","parse","error","console","saveBookmarks","setItem","stringify","addBookmark","job","id","isBookmarked","log","bookmarkedJob","bookmarkedAt","Date","toISOString","unshift","title","removeBookmark","jobId","initialLength","length","filter","some","getBookmarks","getBookmarkCount","toggleBookmark","clearAllBookmarks","searchBookmarks","searchTerm","term","toLowerCase","includes","company","location","description","filterBookmarksByCategory","categoryId","getBookmarkStats","stats","total","byCompany","byCategory","recentCount","oneWeekAgo","setDate","getDate","forEach","bookmarkService"],"sources":["D:/Kiro/remote-job-website/src/services/bookmarkService.js"],"sourcesContent":["// 收藏工作服务\r\n// 管理用户收藏的工作列表\r\n\r\nclass BookmarkService {\r\n  constructor() {\r\n    this.storageKey = 'huntjobs_bookmarks';\r\n    this.bookmarks = this.loadBookmarks();\r\n  }\r\n\r\n  // 从本地存储加载收藏列表\r\n  loadBookmarks() {\r\n    try {\r\n      const stored = localStorage.getItem(this.storageKey);\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch (error) {\r\n      console.error('Error loading bookmarks:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // 保存收藏列表到本地存储\r\n  saveBookmarks() {\r\n    try {\r\n      localStorage.setItem(this.storageKey, JSON.stringify(this.bookmarks));\r\n    } catch (error) {\r\n      console.error('Error saving bookmarks:', error);\r\n    }\r\n  }\r\n\r\n  // 添加工作到收藏列表\r\n  addBookmark(job) {\r\n    if (!job || !job.id) {\r\n      console.error('Invalid job object');\r\n      return false;\r\n    }\r\n\r\n    // 检查是否已经收藏\r\n    if (this.isBookmarked(job.id)) {\r\n      console.log('Job already bookmarked');\r\n      return false;\r\n    }\r\n\r\n    // 添加收藏时间戳\r\n    const bookmarkedJob = {\r\n      ...job,\r\n      bookmarkedAt: new Date().toISOString()\r\n    };\r\n\r\n    this.bookmarks.unshift(bookmarkedJob); // 添加到开头\r\n    this.saveBookmarks();\r\n    \r\n    console.log(`Job \"${job.title}\" added to bookmarks`);\r\n    return true;\r\n  }\r\n\r\n  // 从收藏列表移除工作\r\n  removeBookmark(jobId) {\r\n    const initialLength = this.bookmarks.length;\r\n    this.bookmarks = this.bookmarks.filter(job => job.id !== jobId);\r\n    \r\n    if (this.bookmarks.length < initialLength) {\r\n      this.saveBookmarks();\r\n      console.log(`Job with ID \"${jobId}\" removed from bookmarks`);\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  // 检查工作是否已收藏\r\n  isBookmarked(jobId) {\r\n    return this.bookmarks.some(job => job.id === jobId);\r\n  }\r\n\r\n  // 获取所有收藏的工作\r\n  getBookmarks() {\r\n    return [...this.bookmarks];\r\n  }\r\n\r\n  // 获取收藏数量\r\n  getBookmarkCount() {\r\n    return this.bookmarks.length;\r\n  }\r\n\r\n  // 切换收藏状态\r\n  toggleBookmark(job) {\r\n    if (this.isBookmarked(job.id)) {\r\n      return this.removeBookmark(job.id);\r\n    } else {\r\n      return this.addBookmark(job);\r\n    }\r\n  }\r\n\r\n  // 清空所有收藏\r\n  clearAllBookmarks() {\r\n    this.bookmarks = [];\r\n    this.saveBookmarks();\r\n    console.log('All bookmarks cleared');\r\n  }\r\n\r\n  // 搜索收藏的工作\r\n  searchBookmarks(searchTerm) {\r\n    if (!searchTerm) return this.getBookmarks();\r\n    \r\n    const term = searchTerm.toLowerCase();\r\n    return this.bookmarks.filter(job => \r\n      job.title.toLowerCase().includes(term) ||\r\n      job.company.toLowerCase().includes(term) ||\r\n      job.location.toLowerCase().includes(term) ||\r\n      (job.description && job.description.toLowerCase().includes(term))\r\n    );\r\n  }\r\n\r\n  // 按分类筛选收藏的工作\r\n  filterBookmarksByCategory(categoryId) {\r\n    if (!categoryId) return this.getBookmarks();\r\n    \r\n    // 这里可以复用JobFeed中的分类匹配逻辑\r\n    return this.bookmarks.filter(job => {\r\n      // 简化的分类匹配逻辑\r\n      const title = job.title.toLowerCase();\r\n      const description = job.description ? job.description.toLowerCase() : '';\r\n      \r\n      switch (categoryId) {\r\n        case 'ux-designer':\r\n          return title.includes('ux') || title.includes('user experience');\r\n        case 'ui-designer':\r\n          return title.includes('ui') || title.includes('user interface');\r\n        case 'frontend-developer':\r\n          return title.includes('frontend') || title.includes('front-end') || title.includes('react');\r\n        case 'backend-developer':\r\n          return title.includes('backend') || title.includes('back-end') || title.includes('api');\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  // 获取收藏统计信息\r\n  getBookmarkStats() {\r\n    const stats = {\r\n      total: this.bookmarks.length,\r\n      byCompany: {},\r\n      byCategory: {},\r\n      recentCount: 0\r\n    };\r\n\r\n    const oneWeekAgo = new Date();\r\n    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\r\n\r\n    this.bookmarks.forEach(job => {\r\n      // 按公司统计\r\n      stats.byCompany[job.company] = (stats.byCompany[job.company] || 0) + 1;\r\n      \r\n      // 统计最近一周的收藏\r\n      if (new Date(job.bookmarkedAt) > oneWeekAgo) {\r\n        stats.recentCount++;\r\n      }\r\n    });\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst bookmarkService = new BookmarkService();\r\n\r\nexport default bookmarkService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}