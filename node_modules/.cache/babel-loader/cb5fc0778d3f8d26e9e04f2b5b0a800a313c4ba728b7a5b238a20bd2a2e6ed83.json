{"ast":null,"code":"// 公司Logo服务\n// 提供多种方式获取公司logo，确保显示正确的公司标识\n\nclass LogoService {\n  constructor() {\n    // 多个logo服务提供商，按优先级排序\n    this.logoProviders = ['clearbit', 'brandfetch', 'logo-dev', 'favicon'];\n\n    // 缓存已获取的logo URL，避免重复请求\n    this.logoCache = new Map();\n\n    // 知名公司的logo映射，确保准确性\n    this.knownCompanyLogos = {\n      'google': 'https://logo.clearbit.com/google.com',\n      'microsoft': 'https://logo.clearbit.com/microsoft.com',\n      'apple': 'https://logo.clearbit.com/apple.com',\n      'amazon': 'https://logo.clearbit.com/amazon.com',\n      'facebook': 'https://logo.clearbit.com/facebook.com',\n      'meta': 'https://logo.clearbit.com/meta.com',\n      'netflix': 'https://logo.clearbit.com/netflix.com',\n      'spotify': 'https://logo.clearbit.com/spotify.com',\n      'airbnb': 'https://logo.clearbit.com/airbnb.com',\n      'uber': 'https://logo.clearbit.com/uber.com',\n      'linkedin': 'https://logo.clearbit.com/linkedin.com',\n      'twitter': 'https://logo.clearbit.com/twitter.com',\n      'slack': 'https://logo.clearbit.com/slack.com',\n      'dropbox': 'https://logo.clearbit.com/dropbox.com',\n      'github': 'https://logo.clearbit.com/github.com',\n      'gitlab': 'https://logo.clearbit.com/gitlab.com',\n      'atlassian': 'https://logo.clearbit.com/atlassian.com',\n      'shopify': 'https://logo.clearbit.com/shopify.com',\n      'stripe': 'https://logo.clearbit.com/stripe.com',\n      'figma': 'https://logo.clearbit.com/figma.com',\n      'adobe': 'https://logo.clearbit.com/adobe.com',\n      'salesforce': 'https://logo.clearbit.com/salesforce.com',\n      'oracle': 'https://logo.clearbit.com/oracle.com',\n      'ibm': 'https://logo.clearbit.com/ibm.com',\n      'intel': 'https://logo.clearbit.com/intel.com',\n      'nvidia': 'https://logo.clearbit.com/nvidia.com',\n      'tesla': 'https://logo.clearbit.com/tesla.com',\n      'zoom': 'https://logo.clearbit.com/zoom.us',\n      'discord': 'https://logo.clearbit.com/discord.com',\n      'notion': 'https://logo.clearbit.com/notion.so',\n      'airtable': 'https://logo.clearbit.com/airtable.com',\n      'asana': 'https://logo.clearbit.com/asana.com',\n      'trello': 'https://logo.clearbit.com/trello.com',\n      'monday': 'https://logo.clearbit.com/monday.com',\n      'canva': 'https://logo.clearbit.com/canva.com',\n      'miro': 'https://logo.clearbit.com/miro.com',\n      'invision': 'https://logo.clearbit.com/invisionapp.com',\n      'sketch': 'https://logo.clearbit.com/sketch.com',\n      'framer': 'https://logo.clearbit.com/framer.com'\n    };\n  }\n\n  /**\r\n   * 获取公司logo URL\r\n   * @param {string} companyName - 公司名称\r\n   * @param {string} existingLogoUrl - 已有的logo URL（如果有）\r\n   * @returns {Promise<string>} - logo URL\r\n   */\n  async getCompanyLogo(companyName, existingLogoUrl = null) {\n    if (!companyName) {\n      return this.getDefaultLogo();\n    }\n\n    // 如果已有logo URL且有效，直接使用\n    if (existingLogoUrl && (await this.isValidImageUrl(existingLogoUrl))) {\n      return existingLogoUrl;\n    }\n\n    // 检查缓存\n    const cacheKey = companyName.toLowerCase().trim();\n    if (this.logoCache.has(cacheKey)) {\n      return this.logoCache.get(cacheKey);\n    }\n\n    // 检查知名公司映射\n    const knownLogo = this.getKnownCompanyLogo(companyName);\n    if (knownLogo) {\n      this.logoCache.set(cacheKey, knownLogo);\n      return knownLogo;\n    }\n\n    // 尝试从多个提供商获取logo\n    const logoUrl = await this.fetchLogoFromProviders(companyName);\n\n    // 缓存结果\n    this.logoCache.set(cacheKey, logoUrl);\n    return logoUrl;\n  }\n\n  /**\r\n   * 从知名公司映射中获取logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {string|null} - logo URL或null\r\n   */\n  getKnownCompanyLogo(companyName) {\n    const normalizedName = companyName.toLowerCase().trim();\n\n    // 直接匹配\n    if (this.knownCompanyLogos[normalizedName]) {\n      return this.knownCompanyLogos[normalizedName];\n    }\n\n    // 模糊匹配\n    for (const [key, logoUrl] of Object.entries(this.knownCompanyLogos)) {\n      if (normalizedName.includes(key) || key.includes(normalizedName)) {\n        return logoUrl;\n      }\n    }\n    return null;\n  }\n\n  /**\r\n   * 从多个提供商获取logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {Promise<string>} - logo URL\r\n   */\n  async fetchLogoFromProviders(companyName) {\n    const cleanCompanyName = this.cleanCompanyName(companyName);\n\n    // 尝试不同的logo提供商\n    const logoUrls = [\n    // Clearbit Logo API\n    `https://logo.clearbit.com/${cleanCompanyName}.com`,\n    // 尝试常见的域名后缀\n    `https://logo.clearbit.com/${cleanCompanyName}.io`, `https://logo.clearbit.com/${cleanCompanyName}.co`, `https://logo.clearbit.com/${cleanCompanyName}.net`,\n    // Logo.dev API\n    `https://img.logo.dev/${cleanCompanyName}.com?token=pk_X-1ZO13GSgeOoUrIuJ6GMQ`,\n    // Brandfetch API (需要API key，这里使用公共endpoint)\n    `https://api.brandfetch.io/v2/brands/${cleanCompanyName}.com`,\n    // Favicon服务\n    `https://www.google.com/s2/favicons?domain=${cleanCompanyName}.com&sz=64`, `https://favicon.yandex.net/favicon/${cleanCompanyName}.com`,\n    // 备用方案：使用公司名称首字母生成placeholder\n    this.generatePlaceholderLogo(companyName)];\n\n    // 依次尝试每个URL\n    for (const logoUrl of logoUrls) {\n      if (await this.isValidImageUrl(logoUrl)) {\n        return logoUrl;\n      }\n    }\n\n    // 如果所有方案都失败，返回默认logo\n    return this.getDefaultLogo(companyName);\n  }\n\n  /**\r\n   * 清理公司名称，使其适合用作域名\r\n   * @param {string} companyName - 原始公司名称\r\n   * @returns {string} - 清理后的公司名称\r\n   */\n  cleanCompanyName(companyName) {\n    return companyName.toLowerCase().replace(/[^a-z0-9]/g, '') // 移除非字母数字字符\n    .replace(/inc|corp|ltd|llc|company|co|group|technologies|tech|solutions|systems/g, '') // 移除常见公司后缀\n    .trim();\n  }\n\n  /**\r\n   * 检查图片URL是否有效\r\n   * @param {string} url - 图片URL\r\n   * @returns {Promise<boolean>} - 是否有效\r\n   */\n  async isValidImageUrl(url) {\n    try {\n      var _response$headers$get;\n      const response = await fetch(url, {\n        method: 'HEAD',\n        timeout: 3000 // 3秒超时\n      });\n      return response.ok && ((_response$headers$get = response.headers.get('content-type')) === null || _response$headers$get === void 0 ? void 0 : _response$headers$get.startsWith('image/'));\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\r\n   * 生成placeholder logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {string} - placeholder logo URL\r\n   */\n  generatePlaceholderLogo(companyName) {\n    const firstLetter = companyName.charAt(0).toUpperCase();\n    const colors = ['4F46E5', '7C3AED', 'DB2777', 'DC2626', 'EA580C', '059669', '0891B2', '1D4ED8', '7C2D12', 'BE185D'];\n    const colorIndex = companyName.length % colors.length;\n    const backgroundColor = colors[colorIndex];\n    return `https://ui-avatars.com/api/?name=${encodeURIComponent(firstLetter)}&background=${backgroundColor}&color=fff&size=64&bold=true`;\n  }\n\n  /**\r\n   * 获取默认logo\r\n   * @param {string} companyName - 公司名称（可选）\r\n   * @returns {string} - 默认logo URL\r\n   */\n  getDefaultLogo(companyName = 'Company') {\n    return this.generatePlaceholderLogo(companyName);\n  }\n\n  /**\r\n   * 预加载常用公司的logo\r\n   * @returns {Promise<void>}\r\n   */\n  async preloadCommonLogos() {\n    const commonCompanies = Object.keys(this.knownCompanyLogos);\n\n    // 并行预加载前10个最常见的公司logo\n    const preloadPromises = commonCompanies.slice(0, 10).map(async company => {\n      const logoUrl = this.knownCompanyLogos[company];\n      try {\n        await fetch(logoUrl, {\n          method: 'HEAD'\n        });\n        console.log(`Preloaded logo for ${company}`);\n      } catch (error) {\n        console.warn(`Failed to preload logo for ${company}:`, error);\n      }\n    });\n    await Promise.allSettled(preloadPromises);\n  }\n\n  /**\r\n   * 清除logo缓存\r\n   */\n  clearCache() {\n    this.logoCache.clear();\n  }\n\n  /**\r\n   * 获取缓存统计\r\n   * @returns {Object} - 缓存统计信息\r\n   */\n  getCacheStats() {\n    return {\n      cacheSize: this.logoCache.size,\n      knownCompanies: Object.keys(this.knownCompanyLogos).length\n    };\n  }\n}\n\n// 创建单例实例\nconst logoService = new LogoService();\nexport default logoService;","map":{"version":3,"names":["LogoService","constructor","logoProviders","logoCache","Map","knownCompanyLogos","getCompanyLogo","companyName","existingLogoUrl","getDefaultLogo","isValidImageUrl","cacheKey","toLowerCase","trim","has","get","knownLogo","getKnownCompanyLogo","set","logoUrl","fetchLogoFromProviders","normalizedName","key","Object","entries","includes","cleanCompanyName","logoUrls","generatePlaceholderLogo","replace","url","_response$headers$get","response","fetch","method","timeout","ok","headers","startsWith","error","firstLetter","charAt","toUpperCase","colors","colorIndex","length","backgroundColor","encodeURIComponent","preloadCommonLogos","commonCompanies","keys","preloadPromises","slice","map","company","console","log","warn","Promise","allSettled","clearCache","clear","getCacheStats","cacheSize","size","knownCompanies","logoService"],"sources":["D:/Kiro/remote-job-website/src/services/logoService.js"],"sourcesContent":["// 公司Logo服务\r\n// 提供多种方式获取公司logo，确保显示正确的公司标识\r\n\r\nclass LogoService {\r\n  constructor() {\r\n    // 多个logo服务提供商，按优先级排序\r\n    this.logoProviders = [\r\n      'clearbit',\r\n      'brandfetch',\r\n      'logo-dev',\r\n      'favicon'\r\n    ];\r\n    \r\n    // 缓存已获取的logo URL，避免重复请求\r\n    this.logoCache = new Map();\r\n    \r\n    // 知名公司的logo映射，确保准确性\r\n    this.knownCompanyLogos = {\r\n      'google': 'https://logo.clearbit.com/google.com',\r\n      'microsoft': 'https://logo.clearbit.com/microsoft.com',\r\n      'apple': 'https://logo.clearbit.com/apple.com',\r\n      'amazon': 'https://logo.clearbit.com/amazon.com',\r\n      'facebook': 'https://logo.clearbit.com/facebook.com',\r\n      'meta': 'https://logo.clearbit.com/meta.com',\r\n      'netflix': 'https://logo.clearbit.com/netflix.com',\r\n      'spotify': 'https://logo.clearbit.com/spotify.com',\r\n      'airbnb': 'https://logo.clearbit.com/airbnb.com',\r\n      'uber': 'https://logo.clearbit.com/uber.com',\r\n      'linkedin': 'https://logo.clearbit.com/linkedin.com',\r\n      'twitter': 'https://logo.clearbit.com/twitter.com',\r\n      'slack': 'https://logo.clearbit.com/slack.com',\r\n      'dropbox': 'https://logo.clearbit.com/dropbox.com',\r\n      'github': 'https://logo.clearbit.com/github.com',\r\n      'gitlab': 'https://logo.clearbit.com/gitlab.com',\r\n      'atlassian': 'https://logo.clearbit.com/atlassian.com',\r\n      'shopify': 'https://logo.clearbit.com/shopify.com',\r\n      'stripe': 'https://logo.clearbit.com/stripe.com',\r\n      'figma': 'https://logo.clearbit.com/figma.com',\r\n      'adobe': 'https://logo.clearbit.com/adobe.com',\r\n      'salesforce': 'https://logo.clearbit.com/salesforce.com',\r\n      'oracle': 'https://logo.clearbit.com/oracle.com',\r\n      'ibm': 'https://logo.clearbit.com/ibm.com',\r\n      'intel': 'https://logo.clearbit.com/intel.com',\r\n      'nvidia': 'https://logo.clearbit.com/nvidia.com',\r\n      'tesla': 'https://logo.clearbit.com/tesla.com',\r\n      'zoom': 'https://logo.clearbit.com/zoom.us',\r\n      'discord': 'https://logo.clearbit.com/discord.com',\r\n      'notion': 'https://logo.clearbit.com/notion.so',\r\n      'airtable': 'https://logo.clearbit.com/airtable.com',\r\n      'asana': 'https://logo.clearbit.com/asana.com',\r\n      'trello': 'https://logo.clearbit.com/trello.com',\r\n      'monday': 'https://logo.clearbit.com/monday.com',\r\n      'canva': 'https://logo.clearbit.com/canva.com',\r\n      'miro': 'https://logo.clearbit.com/miro.com',\r\n      'invision': 'https://logo.clearbit.com/invisionapp.com',\r\n      'sketch': 'https://logo.clearbit.com/sketch.com',\r\n      'framer': 'https://logo.clearbit.com/framer.com'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 获取公司logo URL\r\n   * @param {string} companyName - 公司名称\r\n   * @param {string} existingLogoUrl - 已有的logo URL（如果有）\r\n   * @returns {Promise<string>} - logo URL\r\n   */\r\n  async getCompanyLogo(companyName, existingLogoUrl = null) {\r\n    if (!companyName) {\r\n      return this.getDefaultLogo();\r\n    }\r\n\r\n    // 如果已有logo URL且有效，直接使用\r\n    if (existingLogoUrl && await this.isValidImageUrl(existingLogoUrl)) {\r\n      return existingLogoUrl;\r\n    }\r\n\r\n    // 检查缓存\r\n    const cacheKey = companyName.toLowerCase().trim();\r\n    if (this.logoCache.has(cacheKey)) {\r\n      return this.logoCache.get(cacheKey);\r\n    }\r\n\r\n    // 检查知名公司映射\r\n    const knownLogo = this.getKnownCompanyLogo(companyName);\r\n    if (knownLogo) {\r\n      this.logoCache.set(cacheKey, knownLogo);\r\n      return knownLogo;\r\n    }\r\n\r\n    // 尝试从多个提供商获取logo\r\n    const logoUrl = await this.fetchLogoFromProviders(companyName);\r\n    \r\n    // 缓存结果\r\n    this.logoCache.set(cacheKey, logoUrl);\r\n    \r\n    return logoUrl;\r\n  }\r\n\r\n  /**\r\n   * 从知名公司映射中获取logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {string|null} - logo URL或null\r\n   */\r\n  getKnownCompanyLogo(companyName) {\r\n    const normalizedName = companyName.toLowerCase().trim();\r\n    \r\n    // 直接匹配\r\n    if (this.knownCompanyLogos[normalizedName]) {\r\n      return this.knownCompanyLogos[normalizedName];\r\n    }\r\n    \r\n    // 模糊匹配\r\n    for (const [key, logoUrl] of Object.entries(this.knownCompanyLogos)) {\r\n      if (normalizedName.includes(key) || key.includes(normalizedName)) {\r\n        return logoUrl;\r\n      }\r\n    }\r\n    \r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 从多个提供商获取logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {Promise<string>} - logo URL\r\n   */\r\n  async fetchLogoFromProviders(companyName) {\r\n    const cleanCompanyName = this.cleanCompanyName(companyName);\r\n    \r\n    // 尝试不同的logo提供商\r\n    const logoUrls = [\r\n      // Clearbit Logo API\r\n      `https://logo.clearbit.com/${cleanCompanyName}.com`,\r\n      \r\n      // 尝试常见的域名后缀\r\n      `https://logo.clearbit.com/${cleanCompanyName}.io`,\r\n      `https://logo.clearbit.com/${cleanCompanyName}.co`,\r\n      `https://logo.clearbit.com/${cleanCompanyName}.net`,\r\n      \r\n      // Logo.dev API\r\n      `https://img.logo.dev/${cleanCompanyName}.com?token=pk_X-1ZO13GSgeOoUrIuJ6GMQ`,\r\n      \r\n      // Brandfetch API (需要API key，这里使用公共endpoint)\r\n      `https://api.brandfetch.io/v2/brands/${cleanCompanyName}.com`,\r\n      \r\n      // Favicon服务\r\n      `https://www.google.com/s2/favicons?domain=${cleanCompanyName}.com&sz=64`,\r\n      `https://favicon.yandex.net/favicon/${cleanCompanyName}.com`,\r\n      \r\n      // 备用方案：使用公司名称首字母生成placeholder\r\n      this.generatePlaceholderLogo(companyName)\r\n    ];\r\n\r\n    // 依次尝试每个URL\r\n    for (const logoUrl of logoUrls) {\r\n      if (await this.isValidImageUrl(logoUrl)) {\r\n        return logoUrl;\r\n      }\r\n    }\r\n\r\n    // 如果所有方案都失败，返回默认logo\r\n    return this.getDefaultLogo(companyName);\r\n  }\r\n\r\n  /**\r\n   * 清理公司名称，使其适合用作域名\r\n   * @param {string} companyName - 原始公司名称\r\n   * @returns {string} - 清理后的公司名称\r\n   */\r\n  cleanCompanyName(companyName) {\r\n    return companyName\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9]/g, '') // 移除非字母数字字符\r\n      .replace(/inc|corp|ltd|llc|company|co|group|technologies|tech|solutions|systems/g, '') // 移除常见公司后缀\r\n      .trim();\r\n  }\r\n\r\n  /**\r\n   * 检查图片URL是否有效\r\n   * @param {string} url - 图片URL\r\n   * @returns {Promise<boolean>} - 是否有效\r\n   */\r\n  async isValidImageUrl(url) {\r\n    try {\r\n      const response = await fetch(url, { \r\n        method: 'HEAD',\r\n        timeout: 3000 // 3秒超时\r\n      });\r\n      \r\n      return response.ok && response.headers.get('content-type')?.startsWith('image/');\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成placeholder logo\r\n   * @param {string} companyName - 公司名称\r\n   * @returns {string} - placeholder logo URL\r\n   */\r\n  generatePlaceholderLogo(companyName) {\r\n    const firstLetter = companyName.charAt(0).toUpperCase();\r\n    const colors = [\r\n      '4F46E5', '7C3AED', 'DB2777', 'DC2626', 'EA580C',\r\n      '059669', '0891B2', '1D4ED8', '7C2D12', 'BE185D'\r\n    ];\r\n    const colorIndex = companyName.length % colors.length;\r\n    const backgroundColor = colors[colorIndex];\r\n    \r\n    return `https://ui-avatars.com/api/?name=${encodeURIComponent(firstLetter)}&background=${backgroundColor}&color=fff&size=64&bold=true`;\r\n  }\r\n\r\n  /**\r\n   * 获取默认logo\r\n   * @param {string} companyName - 公司名称（可选）\r\n   * @returns {string} - 默认logo URL\r\n   */\r\n  getDefaultLogo(companyName = 'Company') {\r\n    return this.generatePlaceholderLogo(companyName);\r\n  }\r\n\r\n  /**\r\n   * 预加载常用公司的logo\r\n   * @returns {Promise<void>}\r\n   */\r\n  async preloadCommonLogos() {\r\n    const commonCompanies = Object.keys(this.knownCompanyLogos);\r\n    \r\n    // 并行预加载前10个最常见的公司logo\r\n    const preloadPromises = commonCompanies.slice(0, 10).map(async (company) => {\r\n      const logoUrl = this.knownCompanyLogos[company];\r\n      try {\r\n        await fetch(logoUrl, { method: 'HEAD' });\r\n        console.log(`Preloaded logo for ${company}`);\r\n      } catch (error) {\r\n        console.warn(`Failed to preload logo for ${company}:`, error);\r\n      }\r\n    });\r\n    \r\n    await Promise.allSettled(preloadPromises);\r\n  }\r\n\r\n  /**\r\n   * 清除logo缓存\r\n   */\r\n  clearCache() {\r\n    this.logoCache.clear();\r\n  }\r\n\r\n  /**\r\n   * 获取缓存统计\r\n   * @returns {Object} - 缓存统计信息\r\n   */\r\n  getCacheStats() {\r\n    return {\r\n      cacheSize: this.logoCache.size,\r\n      knownCompanies: Object.keys(this.knownCompanyLogos).length\r\n    };\r\n  }\r\n}\r\n\r\n// 创建单例实例\r\nconst logoService = new LogoService();\r\n\r\nexport default logoService;"],"mappings":"AAAA;AACA;;AAEA,MAAMA,WAAW,CAAC;EAChBC,WAAWA,CAAA,EAAG;IACZ;IACA,IAAI,CAACC,aAAa,GAAG,CACnB,UAAU,EACV,YAAY,EACZ,UAAU,EACV,SAAS,CACV;;IAED;IACA,IAAI,CAACC,SAAS,GAAG,IAAIC,GAAG,CAAC,CAAC;;IAE1B;IACA,IAAI,CAACC,iBAAiB,GAAG;MACvB,QAAQ,EAAE,sCAAsC;MAChD,WAAW,EAAE,yCAAyC;MACtD,OAAO,EAAE,qCAAqC;MAC9C,QAAQ,EAAE,sCAAsC;MAChD,UAAU,EAAE,wCAAwC;MACpD,MAAM,EAAE,oCAAoC;MAC5C,SAAS,EAAE,uCAAuC;MAClD,SAAS,EAAE,uCAAuC;MAClD,QAAQ,EAAE,sCAAsC;MAChD,MAAM,EAAE,oCAAoC;MAC5C,UAAU,EAAE,wCAAwC;MACpD,SAAS,EAAE,uCAAuC;MAClD,OAAO,EAAE,qCAAqC;MAC9C,SAAS,EAAE,uCAAuC;MAClD,QAAQ,EAAE,sCAAsC;MAChD,QAAQ,EAAE,sCAAsC;MAChD,WAAW,EAAE,yCAAyC;MACtD,SAAS,EAAE,uCAAuC;MAClD,QAAQ,EAAE,sCAAsC;MAChD,OAAO,EAAE,qCAAqC;MAC9C,OAAO,EAAE,qCAAqC;MAC9C,YAAY,EAAE,0CAA0C;MACxD,QAAQ,EAAE,sCAAsC;MAChD,KAAK,EAAE,mCAAmC;MAC1C,OAAO,EAAE,qCAAqC;MAC9C,QAAQ,EAAE,sCAAsC;MAChD,OAAO,EAAE,qCAAqC;MAC9C,MAAM,EAAE,mCAAmC;MAC3C,SAAS,EAAE,uCAAuC;MAClD,QAAQ,EAAE,qCAAqC;MAC/C,UAAU,EAAE,wCAAwC;MACpD,OAAO,EAAE,qCAAqC;MAC9C,QAAQ,EAAE,sCAAsC;MAChD,QAAQ,EAAE,sCAAsC;MAChD,OAAO,EAAE,qCAAqC;MAC9C,MAAM,EAAE,oCAAoC;MAC5C,UAAU,EAAE,2CAA2C;MACvD,QAAQ,EAAE,sCAAsC;MAChD,QAAQ,EAAE;IACZ,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,cAAcA,CAACC,WAAW,EAAEC,eAAe,GAAG,IAAI,EAAE;IACxD,IAAI,CAACD,WAAW,EAAE;MAChB,OAAO,IAAI,CAACE,cAAc,CAAC,CAAC;IAC9B;;IAEA;IACA,IAAID,eAAe,KAAI,MAAM,IAAI,CAACE,eAAe,CAACF,eAAe,CAAC,GAAE;MAClE,OAAOA,eAAe;IACxB;;IAEA;IACA,MAAMG,QAAQ,GAAGJ,WAAW,CAACK,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IACjD,IAAI,IAAI,CAACV,SAAS,CAACW,GAAG,CAACH,QAAQ,CAAC,EAAE;MAChC,OAAO,IAAI,CAACR,SAAS,CAACY,GAAG,CAACJ,QAAQ,CAAC;IACrC;;IAEA;IACA,MAAMK,SAAS,GAAG,IAAI,CAACC,mBAAmB,CAACV,WAAW,CAAC;IACvD,IAAIS,SAAS,EAAE;MACb,IAAI,CAACb,SAAS,CAACe,GAAG,CAACP,QAAQ,EAAEK,SAAS,CAAC;MACvC,OAAOA,SAAS;IAClB;;IAEA;IACA,MAAMG,OAAO,GAAG,MAAM,IAAI,CAACC,sBAAsB,CAACb,WAAW,CAAC;;IAE9D;IACA,IAAI,CAACJ,SAAS,CAACe,GAAG,CAACP,QAAQ,EAAEQ,OAAO,CAAC;IAErC,OAAOA,OAAO;EAChB;;EAEA;AACF;AACA;AACA;AACA;EACEF,mBAAmBA,CAACV,WAAW,EAAE;IAC/B,MAAMc,cAAc,GAAGd,WAAW,CAACK,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;;IAEvD;IACA,IAAI,IAAI,CAACR,iBAAiB,CAACgB,cAAc,CAAC,EAAE;MAC1C,OAAO,IAAI,CAAChB,iBAAiB,CAACgB,cAAc,CAAC;IAC/C;;IAEA;IACA,KAAK,MAAM,CAACC,GAAG,EAAEH,OAAO,CAAC,IAAII,MAAM,CAACC,OAAO,CAAC,IAAI,CAACnB,iBAAiB,CAAC,EAAE;MACnE,IAAIgB,cAAc,CAACI,QAAQ,CAACH,GAAG,CAAC,IAAIA,GAAG,CAACG,QAAQ,CAACJ,cAAc,CAAC,EAAE;QAChE,OAAOF,OAAO;MAChB;IACF;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMC,sBAAsBA,CAACb,WAAW,EAAE;IACxC,MAAMmB,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACnB,WAAW,CAAC;;IAE3D;IACA,MAAMoB,QAAQ,GAAG;IACf;IACA,6BAA6BD,gBAAgB,MAAM;IAEnD;IACA,6BAA6BA,gBAAgB,KAAK,EAClD,6BAA6BA,gBAAgB,KAAK,EAClD,6BAA6BA,gBAAgB,MAAM;IAEnD;IACA,wBAAwBA,gBAAgB,sCAAsC;IAE9E;IACA,uCAAuCA,gBAAgB,MAAM;IAE7D;IACA,6CAA6CA,gBAAgB,YAAY,EACzE,sCAAsCA,gBAAgB,MAAM;IAE5D;IACA,IAAI,CAACE,uBAAuB,CAACrB,WAAW,CAAC,CAC1C;;IAED;IACA,KAAK,MAAMY,OAAO,IAAIQ,QAAQ,EAAE;MAC9B,IAAI,MAAM,IAAI,CAACjB,eAAe,CAACS,OAAO,CAAC,EAAE;QACvC,OAAOA,OAAO;MAChB;IACF;;IAEA;IACA,OAAO,IAAI,CAACV,cAAc,CAACF,WAAW,CAAC;EACzC;;EAEA;AACF;AACA;AACA;AACA;EACEmB,gBAAgBA,CAACnB,WAAW,EAAE;IAC5B,OAAOA,WAAW,CACfK,WAAW,CAAC,CAAC,CACbiB,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;IAAA,CAC1BA,OAAO,CAAC,wEAAwE,EAAE,EAAE,CAAC,CAAC;IAAA,CACtFhB,IAAI,CAAC,CAAC;EACX;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMH,eAAeA,CAACoB,GAAG,EAAE;IACzB,IAAI;MAAA,IAAAC,qBAAA;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;QAChCI,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE,IAAI,CAAC;MAChB,CAAC,CAAC;MAEF,OAAOH,QAAQ,CAACI,EAAE,MAAAL,qBAAA,GAAIC,QAAQ,CAACK,OAAO,CAACtB,GAAG,CAAC,cAAc,CAAC,cAAAgB,qBAAA,uBAApCA,qBAAA,CAAsCO,UAAU,CAAC,QAAQ,CAAC;IAClF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEX,uBAAuBA,CAACrB,WAAW,EAAE;IACnC,MAAMiC,WAAW,GAAGjC,WAAW,CAACkC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACvD,MAAMC,MAAM,GAAG,CACb,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAChD,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CACjD;IACD,MAAMC,UAAU,GAAGrC,WAAW,CAACsC,MAAM,GAAGF,MAAM,CAACE,MAAM;IACrD,MAAMC,eAAe,GAAGH,MAAM,CAACC,UAAU,CAAC;IAE1C,OAAO,oCAAoCG,kBAAkB,CAACP,WAAW,CAAC,eAAeM,eAAe,8BAA8B;EACxI;;EAEA;AACF;AACA;AACA;AACA;EACErC,cAAcA,CAACF,WAAW,GAAG,SAAS,EAAE;IACtC,OAAO,IAAI,CAACqB,uBAAuB,CAACrB,WAAW,CAAC;EAClD;;EAEA;AACF;AACA;AACA;EACE,MAAMyC,kBAAkBA,CAAA,EAAG;IACzB,MAAMC,eAAe,GAAG1B,MAAM,CAAC2B,IAAI,CAAC,IAAI,CAAC7C,iBAAiB,CAAC;;IAE3D;IACA,MAAM8C,eAAe,GAAGF,eAAe,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAAC,MAAOC,OAAO,IAAK;MAC1E,MAAMnC,OAAO,GAAG,IAAI,CAACd,iBAAiB,CAACiD,OAAO,CAAC;MAC/C,IAAI;QACF,MAAMrB,KAAK,CAACd,OAAO,EAAE;UAAEe,MAAM,EAAE;QAAO,CAAC,CAAC;QACxCqB,OAAO,CAACC,GAAG,CAAC,sBAAsBF,OAAO,EAAE,CAAC;MAC9C,CAAC,CAAC,OAAOf,KAAK,EAAE;QACdgB,OAAO,CAACE,IAAI,CAAC,8BAA8BH,OAAO,GAAG,EAAEf,KAAK,CAAC;MAC/D;IACF,CAAC,CAAC;IAEF,MAAMmB,OAAO,CAACC,UAAU,CAACR,eAAe,CAAC;EAC3C;;EAEA;AACF;AACA;EACES,UAAUA,CAAA,EAAG;IACX,IAAI,CAACzD,SAAS,CAAC0D,KAAK,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;AACA;EACEC,aAAaA,CAAA,EAAG;IACd,OAAO;MACLC,SAAS,EAAE,IAAI,CAAC5D,SAAS,CAAC6D,IAAI;MAC9BC,cAAc,EAAE1C,MAAM,CAAC2B,IAAI,CAAC,IAAI,CAAC7C,iBAAiB,CAAC,CAACwC;IACtD,CAAC;EACH;AACF;;AAEA;AACA,MAAMqB,WAAW,GAAG,IAAIlE,WAAW,CAAC,CAAC;AAErC,eAAekE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}