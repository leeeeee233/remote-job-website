{"ast":null,"code":"// HTTP请求工具函数\n// 提供增强的HTTP请求功能，支持重试、超时和错误处理\n\n/**\r\n * 发送HTTP请求，支持重试和超时\r\n * @param {string} url - 请求URL\r\n * @param {Object} options - 请求选项\r\n * @param {Object} retryOptions - 重试选项\r\n * @returns {Promise<Object>} - 响应数据\r\n */\nexport const fetchWithRetry = async (url, options = {}, retryOptions = {}) => {\n  const {\n    maxRetries = 3,\n    retryDelay = 1000,\n    timeout = 10000,\n    retryCondition = null\n  } = retryOptions;\n\n  // 添加超时信号\n  const controller = new AbortController();\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\n  const fetchOptions = {\n    ...options,\n    signal: controller.signal\n  };\n  let retryCount = 0;\n  while (true) {\n    try {\n      const response = await fetch(url, fetchOptions);\n      clearTimeout(timeoutId);\n\n      // 检查是否需要重试\n      if (!response.ok && retryCount < maxRetries) {\n        const shouldRetry = retryCondition ? retryCondition(response) : response.status >= 500; // 默认重试服务器错误\n\n        if (shouldRetry) {\n          retryCount++;\n          const delay = retryDelay * Math.pow(2, retryCount - 1);\n          console.log(`Retrying request to ${url} in ${delay}ms (${retryCount}/${maxRetries})`);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          continue;\n        }\n      }\n      if (!response.ok) {\n        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);\n      }\n\n      // 尝试解析JSON响应\n      try {\n        return await response.json();\n      } catch (e) {\n        // 如果不是JSON，返回文本\n        return await response.text();\n      }\n    } catch (error) {\n      clearTimeout(timeoutId);\n\n      // 处理超时错误\n      if (error.name === 'AbortError') {\n        throw new Error(`Request timeout after ${timeout}ms`);\n      }\n\n      // 处理其他错误\n      if (retryCount < maxRetries) {\n        retryCount++;\n        const delay = retryDelay * Math.pow(2, retryCount - 1);\n        console.log(`Retrying request to ${url} in ${delay}ms (${retryCount}/${maxRetries})`);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      } else {\n        throw error;\n      }\n    }\n  }\n};\n\n/**\r\n * 使用CORS代理发送请求\r\n * @param {string} url - 原始URL\r\n * @param {Object} options - 请求选项\r\n * @param {Object} retryOptions - 重试选项\r\n * @returns {Promise<Object>} - 响应数据\r\n */\nexport const fetchWithCorsProxy = async (url, options = {}, retryOptions = {}) => {\n  const corsProxy = 'https://cors-anywhere.herokuapp.com/';\n  const proxyUrl = `${corsProxy}${url}`;\n  const proxyOptions = {\n    ...options,\n    headers: {\n      ...options.headers,\n      'Origin': window.location.origin\n    }\n  };\n  return fetchWithRetry(proxyUrl, proxyOptions, retryOptions);\n};\n\n/**\r\n * 解析RSS feed为JSON\r\n * @param {string} rssUrl - RSS feed URL\r\n * @param {string} apiKey - RSS2JSON API密钥\r\n * @returns {Promise<Object>} - 解析后的JSON数据\r\n */\nexport const parseRssFeed = async (rssUrl, apiKey = '') => {\n  const rss2jsonUrl = `https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(rssUrl)}`;\n  const options = {};\n  if (apiKey) {\n    options.headers = {\n      'Authorization': `ApiKey ${apiKey}`\n    };\n  }\n  const response = await fetchWithRetry(rss2jsonUrl, options);\n  if (response.status !== 'ok') {\n    throw new Error(`Failed to parse RSS feed: ${response.message || 'Unknown error'}`);\n  }\n  return response;\n};\n\n/**\r\n * 创建查询字符串\r\n * @param {Object} params - 查询参数\r\n * @returns {string} - 查询字符串\r\n */\nexport const buildQueryString = params => {\n  if (!params || Object.keys(params).length === 0) {\n    return '';\n  }\n  const queryParams = Object.entries(params).filter(([_, value]) => value !== undefined && value !== null && value !== '').map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&');\n  return queryParams ? `?${queryParams}` : '';\n};\nexport default {\n  fetchWithRetry,\n  fetchWithCorsProxy,\n  parseRssFeed,\n  buildQueryString\n};","map":{"version":3,"names":["fetchWithRetry","url","options","retryOptions","maxRetries","retryDelay","timeout","retryCondition","controller","AbortController","timeoutId","setTimeout","abort","fetchOptions","signal","retryCount","response","fetch","clearTimeout","ok","shouldRetry","status","delay","Math","pow","console","log","Promise","resolve","Error","statusText","json","e","text","error","name","fetchWithCorsProxy","corsProxy","proxyUrl","proxyOptions","headers","window","location","origin","parseRssFeed","rssUrl","apiKey","rss2jsonUrl","encodeURIComponent","message","buildQueryString","params","Object","keys","length","queryParams","entries","filter","_","value","undefined","map","key","join"],"sources":["D:/Kiro/remote-job-website/src/services/api/httpUtils.js"],"sourcesContent":["// HTTP请求工具函数\r\n// 提供增强的HTTP请求功能，支持重试、超时和错误处理\r\n\r\n/**\r\n * 发送HTTP请求，支持重试和超时\r\n * @param {string} url - 请求URL\r\n * @param {Object} options - 请求选项\r\n * @param {Object} retryOptions - 重试选项\r\n * @returns {Promise<Object>} - 响应数据\r\n */\r\nexport const fetchWithRetry = async (url, options = {}, retryOptions = {}) => {\r\n  const {\r\n    maxRetries = 3,\r\n    retryDelay = 1000,\r\n    timeout = 10000,\r\n    retryCondition = null\r\n  } = retryOptions;\r\n\r\n  // 添加超时信号\r\n  const controller = new AbortController();\r\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n  \r\n  const fetchOptions = {\r\n    ...options,\r\n    signal: controller.signal\r\n  };\r\n\r\n  let retryCount = 0;\r\n  \r\n  while (true) {\r\n    try {\r\n      const response = await fetch(url, fetchOptions);\r\n      clearTimeout(timeoutId);\r\n      \r\n      // 检查是否需要重试\r\n      if (!response.ok && retryCount < maxRetries) {\r\n        const shouldRetry = retryCondition \r\n          ? retryCondition(response)\r\n          : response.status >= 500; // 默认重试服务器错误\r\n          \r\n        if (shouldRetry) {\r\n          retryCount++;\r\n          const delay = retryDelay * Math.pow(2, retryCount - 1);\r\n          console.log(`Retrying request to ${url} in ${delay}ms (${retryCount}/${maxRetries})`);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      // 尝试解析JSON响应\r\n      try {\r\n        return await response.json();\r\n      } catch (e) {\r\n        // 如果不是JSON，返回文本\r\n        return await response.text();\r\n      }\r\n    } catch (error) {\r\n      clearTimeout(timeoutId);\r\n      \r\n      // 处理超时错误\r\n      if (error.name === 'AbortError') {\r\n        throw new Error(`Request timeout after ${timeout}ms`);\r\n      }\r\n      \r\n      // 处理其他错误\r\n      if (retryCount < maxRetries) {\r\n        retryCount++;\r\n        const delay = retryDelay * Math.pow(2, retryCount - 1);\r\n        console.log(`Retrying request to ${url} in ${delay}ms (${retryCount}/${maxRetries})`);\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 使用CORS代理发送请求\r\n * @param {string} url - 原始URL\r\n * @param {Object} options - 请求选项\r\n * @param {Object} retryOptions - 重试选项\r\n * @returns {Promise<Object>} - 响应数据\r\n */\r\nexport const fetchWithCorsProxy = async (url, options = {}, retryOptions = {}) => {\r\n  const corsProxy = 'https://cors-anywhere.herokuapp.com/';\r\n  const proxyUrl = `${corsProxy}${url}`;\r\n  \r\n  const proxyOptions = {\r\n    ...options,\r\n    headers: {\r\n      ...options.headers,\r\n      'Origin': window.location.origin\r\n    }\r\n  };\r\n  \r\n  return fetchWithRetry(proxyUrl, proxyOptions, retryOptions);\r\n};\r\n\r\n/**\r\n * 解析RSS feed为JSON\r\n * @param {string} rssUrl - RSS feed URL\r\n * @param {string} apiKey - RSS2JSON API密钥\r\n * @returns {Promise<Object>} - 解析后的JSON数据\r\n */\r\nexport const parseRssFeed = async (rssUrl, apiKey = '') => {\r\n  const rss2jsonUrl = `https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(rssUrl)}`;\r\n  \r\n  const options = {};\r\n  if (apiKey) {\r\n    options.headers = {\r\n      'Authorization': `ApiKey ${apiKey}`\r\n    };\r\n  }\r\n  \r\n  const response = await fetchWithRetry(rss2jsonUrl, options);\r\n  \r\n  if (response.status !== 'ok') {\r\n    throw new Error(`Failed to parse RSS feed: ${response.message || 'Unknown error'}`);\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n/**\r\n * 创建查询字符串\r\n * @param {Object} params - 查询参数\r\n * @returns {string} - 查询字符串\r\n */\r\nexport const buildQueryString = (params) => {\r\n  if (!params || Object.keys(params).length === 0) {\r\n    return '';\r\n  }\r\n  \r\n  const queryParams = Object.entries(params)\r\n    .filter(([_, value]) => value !== undefined && value !== null && value !== '')\r\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\r\n    .join('&');\r\n    \r\n  return queryParams ? `?${queryParams}` : '';\r\n};\r\n\r\nexport default {\r\n  fetchWithRetry,\r\n  fetchWithCorsProxy,\r\n  parseRssFeed,\r\n  buildQueryString\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}