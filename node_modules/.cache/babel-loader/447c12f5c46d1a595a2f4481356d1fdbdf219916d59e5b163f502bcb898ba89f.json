{"ast":null,"code":"// 使用真实的Job API服务\n// 这里集成一些公开的工作API\n\nimport logoService from './logoService';\n\n// RemoteOK API (免费，无需API密钥)\nexport const fetchRemoteOKJobs = async () => {\n  try {\n    // 使用更可靠的CORS代理\n    const corsProxy = 'https://api.allorigins.win/raw?url=';\n    const remoteOkUrl = 'https://remoteok.io/api';\n    const response = await fetch(`${corsProxy}${encodeURIComponent(remoteOkUrl)}`, {\n      headers: {\n        'Origin': window.location.origin\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch RemoteOK jobs: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // RemoteOK返回的第一个元素是统计信息，需要跳过\n    const jobs = data.slice(1);\n    return Promise.all(jobs.map(async job => ({\n      id: job.id,\n      title: job.position,\n      company: job.company,\n      companyLogo: await logoService.getCompanyLogo(job.company, job.company_logo),\n      location: job.location || 'Remote',\n      type: job.job_type || 'Full-time',\n      salary: estimateSalary(job.position),\n      team: extractTeam(job.position),\n      postedDate: formatDate(job.date),\n      views: Math.floor(Math.random() * 500) + 50,\n      applicants: Math.floor(Math.random() * 50) + 5,\n      description: job.description || 'No description available',\n      skills: extractSkills(job.tags || []),\n      source: 'RemoteOK',\n      sourceUrl: job.url || `https://remoteok.io/l/${job.id}`,\n      sourceId: job.id\n    })));\n  } catch (error) {\n    console.error('Error fetching RemoteOK jobs:', error);\n    // 如果API调用失败，返回空数组\n    return [];\n  }\n};\n\n// GitHub Jobs API (通过公共API代理)\nexport const fetchGitHubJobs = async () => {\n  try {\n    const response = await fetch('https://jobs.github.com/positions.json');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch GitHub jobs: ${response.status}`);\n    }\n    const data = await response.json();\n    return data.map(job => ({\n      id: job.id,\n      title: job.title,\n      company: job.company,\n      companyLogo: job.company_logo,\n      location: job.location || 'Remote',\n      type: job.type || 'Full-time',\n      salary: estimateSalary(job.title),\n      team: extractTeam(job.title),\n      postedDate: formatDate(job.created_at),\n      views: Math.floor(Math.random() * 500) + 50,\n      applicants: Math.floor(Math.random() * 50) + 5,\n      description: job.description || 'No description available',\n      skills: extractSkills(job.description || ''),\n      source: 'GitHub Jobs'\n    }));\n  } catch (error) {\n    console.error('Error fetching GitHub jobs:', error);\n    return [];\n  }\n};\n\n// WeWorkRemotely API (通过RSS2JSON)\nexport const fetchWeWorkRemotelyJobs = async (category = 'all') => {\n  try {\n    // 获取RSS feed URL\n    const categoryPath = {\n      'programming': 'remote-jobs/remote-programming-jobs',\n      'design': 'remote-jobs/remote-design-jobs',\n      'marketing': 'remote-jobs/remote-marketing-jobs',\n      'management': 'remote-jobs/remote-management-executive-jobs',\n      'sales': 'remote-jobs/remote-sales-jobs',\n      'customer-support': 'remote-jobs/remote-customer-support-jobs',\n      'all': 'categories/remote-jobs'\n    }[category] || 'categories/remote-jobs';\n    const rssUrl = `https://weworkremotely.com/${categoryPath}.rss`;\n\n    // 使用RSS2JSON服务转换WeWorkRemotely的RSS feed\n    // 使用免费版本，不需要API密钥\n    const rss2jsonUrl = `https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(rssUrl)}`;\n    const response = await fetch(rss2jsonUrl);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch WeWorkRemotely jobs: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.status !== 'ok') {\n      throw new Error('Invalid response from RSS2JSON');\n    }\n    return data.items.map((item, index) => {\n      // 从标题中提取公司名称和职位\n      const titleMatch = item.title.match(/(.*?):(.*)/);\n      const company = titleMatch ? titleMatch[1].trim() : 'Unknown Company';\n      const title = titleMatch ? titleMatch[2].trim() : item.title;\n      return {\n        id: `wwr-${index}-${Date.now()}`,\n        title: title,\n        company: company,\n        companyLogo: `https://logo.clearbit.com/${company.toLowerCase().replace(/\\s+/g, '')}.com`,\n        location: 'Remote',\n        type: 'Full-time',\n        salary: estimateSalary(title),\n        team: extractTeam(title),\n        postedDate: formatDate(item.pubDate),\n        views: Math.floor(Math.random() * 500) + 50,\n        applicants: Math.floor(Math.random() * 50) + 5,\n        description: item.description || item.content || 'No description available',\n        skills: extractSkills(item.description || item.content || title),\n        source: 'WeWorkRemotely',\n        sourceUrl: item.link,\n        sourceId: `wwr-${index}-${Date.now()}`\n      };\n    });\n  } catch (error) {\n    console.error('Error fetching WeWorkRemotely jobs:', error);\n    return [];\n  }\n};\n\n// 辅助函数\nconst formatDate = dateString => {\n  if (!dateString) return 'Recently';\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffTime = Math.abs(now - date);\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  if (diffDays === 0) return 'Today';\n  if (diffDays === 1) return 'Yesterday';\n  if (diffDays <= 7) return `${diffDays} days ago`;\n  if (diffDays <= 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\n  return `${Math.ceil(diffDays / 30)} months ago`;\n};\nconst extractSkills = description => {\n  const commonSkills = ['JavaScript', 'Python', 'React', 'Node.js', 'TypeScript', 'Angular', 'Vue.js', 'Java', 'C#', '.NET', 'MongoDB', 'PostgreSQL', 'MySQL', 'AWS', 'Azure', 'Docker', 'Kubernetes', 'CI/CD', 'DevOps', 'Git', 'Linux', 'Figma', 'Sketch', 'Adobe XD', 'UI/UX', 'CSS', 'HTML', 'REST API', 'GraphQL'];\n  const foundSkills = commonSkills.filter(skill => typeof description === 'string' && description.toLowerCase().includes(skill.toLowerCase()));\n  return foundSkills.length > 0 ? foundSkills.slice(0, 5) : ['Remote Work'];\n};\nconst extractTeam = title => {\n  const teams = {\n    'Frontend': ['Frontend', 'Front-end', 'Front End', 'UI', 'React', 'Angular', 'Vue', 'JavaScript'],\n    'UX/UI': ['UX', 'UI', 'User Experience', 'User Interface', 'Designer', 'Design'],\n    'Backend': ['Backend', 'Back-end', 'Back End', 'API', 'Server', 'Java', 'Python', 'Ruby', 'PHP', 'Node'],\n    'Full Stack': ['Full Stack', 'Fullstack', 'Full-stack'],\n    'DevOps': ['DevOps', 'SRE', 'Infrastructure', 'Cloud', 'AWS', 'Azure', 'GCP', 'Kubernetes', 'Docker'],\n    'Mobile': ['Mobile', 'iOS', 'Android', 'React Native', 'Flutter', 'Swift', 'Kotlin'],\n    'Data': ['Data', 'Analytics', 'Machine Learning', 'AI', 'ML', 'Data Science', 'Big Data'],\n    'Product': ['Product', 'PM', 'Product Manager', 'Product Owner'],\n    'QA': ['QA', 'Test', 'Testing', 'Quality'],\n    'Security': ['Security', 'Cyber', 'InfoSec']\n  };\n  for (const [team, keywords] of Object.entries(teams)) {\n    if (keywords.some(keyword => title.includes(keyword))) {\n      return team;\n    }\n  }\n  return 'Engineering';\n};\nconst estimateSalary = title => {\n  // 基于职位名称估算薪资范围\n  const seniorKeywords = ['Senior', 'Sr', 'Lead', 'Principal', 'Staff', 'Architect'];\n  const midKeywords = ['II', '2', 'Mid', 'Intermediate'];\n  const juniorKeywords = ['Junior', 'Jr', 'Entry', 'Associate', 'Intern'];\n  const isSenior = seniorKeywords.some(key => title.includes(key));\n  const isMid = midKeywords.some(key => title.includes(key));\n  const isJunior = juniorKeywords.some(key => title.includes(key));\n\n  // 基础薪资范围\n  let baseSalary;\n  if (title.includes('Manager') || title.includes('Director')) {\n    baseSalary = 130;\n  } else if (title.includes('Architect') || title.includes('Principal')) {\n    baseSalary = 140;\n  } else if (title.includes('DevOps') || title.includes('SRE')) {\n    baseSalary = 125;\n  } else if (title.includes('Data') || title.includes('Machine Learning')) {\n    baseSalary = 110;\n  } else if (title.includes('UI') || title.includes('UX') || title.includes('Design')) {\n    baseSalary = 115;\n  } else if (title.includes('Mobile') || title.includes('iOS') || title.includes('Android')) {\n    baseSalary = 120;\n  } else {\n    baseSalary = 100;\n  }\n\n  // 根据级别调整薪资\n  if (isSenior) {\n    return baseSalary + 20;\n  } else if (isMid) {\n    return baseSalary;\n  } else if (isJunior) {\n    return baseSalary - 30;\n  } else {\n    return baseSalary;\n  }\n};\n\n// 综合获取真实工作数据\nexport const fetchRealRemoteJobs = async (searchTerm = '', filters = {}) => {\n  try {\n    // 并行调用多个API\n    const [remoteOKJobs, githubJobs, wwrJobs] = await Promise.allSettled([fetchRemoteOKJobs(), fetchGitHubJobs(), fetchWeWorkRemotelyJobs(filters.category)]);\n    let allJobs = [...(remoteOKJobs.status === 'fulfilled' ? remoteOKJobs.value : []), ...(githubJobs.status === 'fulfilled' ? githubJobs.value : []), ...(wwrJobs.status === 'fulfilled' ? wwrJobs.value : [])];\n\n    // 如果所有API都失败，返回空数组\n    if (allJobs.length === 0) {\n      throw new Error('Failed to fetch jobs from any source');\n    }\n\n    // 按搜索词过滤\n    if (searchTerm) {\n      allJobs = allJobs.filter(job => job.title.toLowerCase().includes(searchTerm.toLowerCase()) || job.company.toLowerCase().includes(searchTerm.toLowerCase()) || job.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    }\n\n    // 去重和排序\n    const uniqueJobs = removeDuplicateJobs(allJobs);\n    const sortedJobs = uniqueJobs.sort((a, b) => {\n      // 优先显示今天发布的工作\n      if (a.postedDate === 'Today' && b.postedDate !== 'Today') return -1;\n      if (a.postedDate !== 'Today' && b.postedDate === 'Today') return 1;\n      return 0;\n    });\n    return {\n      jobs: sortedJobs,\n      total: sortedJobs.length,\n      sources: ['RemoteOK', 'WeWorkRemotely', 'GitHub Jobs'].filter(source => allJobs.some(job => job.source === source))\n    };\n  } catch (error) {\n    console.error('Error fetching real remote jobs:', error);\n    throw error;\n  }\n};\n\n// 去重函数\nconst removeDuplicateJobs = jobs => {\n  const seen = new Set();\n  return jobs.filter(job => {\n    const key = `${job.title}-${job.company}`.toLowerCase().replace(/\\s+/g, '');\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n};\nexport default {\n  fetchRealRemoteJobs,\n  fetchRemoteOKJobs,\n  fetchGitHubJobs,\n  fetchWeWorkRemotelyJobs\n};","map":{"version":3,"names":["logoService","fetchRemoteOKJobs","corsProxy","remoteOkUrl","response","fetch","encodeURIComponent","headers","window","location","origin","ok","Error","status","data","json","jobs","slice","Promise","all","map","job","id","title","position","company","companyLogo","getCompanyLogo","company_logo","type","job_type","salary","estimateSalary","team","extractTeam","postedDate","formatDate","date","views","Math","floor","random","applicants","description","skills","extractSkills","tags","source","sourceUrl","url","sourceId","error","console","fetchGitHubJobs","created_at","fetchWeWorkRemotelyJobs","category","categoryPath","rssUrl","rss2jsonUrl","items","item","index","titleMatch","match","trim","Date","now","toLowerCase","replace","pubDate","content","link","dateString","diffTime","abs","diffDays","ceil","commonSkills","foundSkills","filter","skill","includes","length","teams","keywords","Object","entries","some","keyword","seniorKeywords","midKeywords","juniorKeywords","isSenior","key","isMid","isJunior","baseSalary","fetchRealRemoteJobs","searchTerm","filters","remoteOKJobs","githubJobs","wwrJobs","allSettled","allJobs","value","uniqueJobs","removeDuplicateJobs","sortedJobs","sort","a","b","total","sources","seen","Set","has","add"],"sources":["D:/Kiro/remote-job-website/src/services/realJobAPI.js"],"sourcesContent":["// 使用真实的Job API服务\r\n// 这里集成一些公开的工作API\r\n\r\nimport logoService from './logoService';\r\n\r\n// RemoteOK API (免费，无需API密钥)\r\nexport const fetchRemoteOKJobs = async () => {\r\n  try {\r\n    // 使用更可靠的CORS代理\r\n    const corsProxy = 'https://api.allorigins.win/raw?url=';\r\n    const remoteOkUrl = 'https://remoteok.io/api';\r\n    const response = await fetch(`${corsProxy}${encodeURIComponent(remoteOkUrl)}`, {\r\n      headers: {\r\n        'Origin': window.location.origin,\r\n      }\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch RemoteOK jobs: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // RemoteOK返回的第一个元素是统计信息，需要跳过\r\n    const jobs = data.slice(1);\r\n    \r\n    return Promise.all(jobs.map(async job => ({\r\n      id: job.id,\r\n      title: job.position,\r\n      company: job.company,\r\n      companyLogo: await logoService.getCompanyLogo(job.company, job.company_logo),\r\n      location: job.location || 'Remote',\r\n      type: job.job_type || 'Full-time',\r\n      salary: estimateSalary(job.position),\r\n      team: extractTeam(job.position),\r\n      postedDate: formatDate(job.date),\r\n      views: Math.floor(Math.random() * 500) + 50,\r\n      applicants: Math.floor(Math.random() * 50) + 5,\r\n      description: job.description || 'No description available',\r\n      skills: extractSkills(job.tags || []),\r\n      source: 'RemoteOK',\r\n      sourceUrl: job.url || `https://remoteok.io/l/${job.id}`,\r\n      sourceId: job.id\r\n    })));\r\n  } catch (error) {\r\n    console.error('Error fetching RemoteOK jobs:', error);\r\n    // 如果API调用失败，返回空数组\r\n    return [];\r\n  }\r\n};\r\n\r\n// GitHub Jobs API (通过公共API代理)\r\nexport const fetchGitHubJobs = async () => {\r\n  try {\r\n    const response = await fetch('https://jobs.github.com/positions.json');\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch GitHub jobs: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    return data.map(job => ({\r\n      id: job.id,\r\n      title: job.title,\r\n      company: job.company,\r\n      companyLogo: job.company_logo,\r\n      location: job.location || 'Remote',\r\n      type: job.type || 'Full-time',\r\n      salary: estimateSalary(job.title),\r\n      team: extractTeam(job.title),\r\n      postedDate: formatDate(job.created_at),\r\n      views: Math.floor(Math.random() * 500) + 50,\r\n      applicants: Math.floor(Math.random() * 50) + 5,\r\n      description: job.description || 'No description available',\r\n      skills: extractSkills(job.description || ''),\r\n      source: 'GitHub Jobs'\r\n    }));\r\n  } catch (error) {\r\n    console.error('Error fetching GitHub jobs:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// WeWorkRemotely API (通过RSS2JSON)\r\nexport const fetchWeWorkRemotelyJobs = async (category = 'all') => {\r\n  try {\r\n    // 获取RSS feed URL\r\n    const categoryPath = {\r\n      'programming': 'remote-jobs/remote-programming-jobs',\r\n      'design': 'remote-jobs/remote-design-jobs',\r\n      'marketing': 'remote-jobs/remote-marketing-jobs',\r\n      'management': 'remote-jobs/remote-management-executive-jobs',\r\n      'sales': 'remote-jobs/remote-sales-jobs',\r\n      'customer-support': 'remote-jobs/remote-customer-support-jobs',\r\n      'all': 'categories/remote-jobs'\r\n    }[category] || 'categories/remote-jobs';\r\n    \r\n    const rssUrl = `https://weworkremotely.com/${categoryPath}.rss`;\r\n    \r\n    // 使用RSS2JSON服务转换WeWorkRemotely的RSS feed\r\n    // 使用免费版本，不需要API密钥\r\n    const rss2jsonUrl = `https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(rssUrl)}`;\r\n    \r\n    const response = await fetch(rss2jsonUrl);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch WeWorkRemotely jobs: ${response.status}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.status !== 'ok') {\r\n      throw new Error('Invalid response from RSS2JSON');\r\n    }\r\n    \r\n    return data.items.map((item, index) => {\r\n      // 从标题中提取公司名称和职位\r\n      const titleMatch = item.title.match(/(.*?):(.*)/);\r\n      const company = titleMatch ? titleMatch[1].trim() : 'Unknown Company';\r\n      const title = titleMatch ? titleMatch[2].trim() : item.title;\r\n      \r\n      return {\r\n        id: `wwr-${index}-${Date.now()}`,\r\n        title: title,\r\n        company: company,\r\n        companyLogo: `https://logo.clearbit.com/${company.toLowerCase().replace(/\\s+/g, '')}.com`,\r\n        location: 'Remote',\r\n        type: 'Full-time',\r\n        salary: estimateSalary(title),\r\n        team: extractTeam(title),\r\n        postedDate: formatDate(item.pubDate),\r\n        views: Math.floor(Math.random() * 500) + 50,\r\n        applicants: Math.floor(Math.random() * 50) + 5,\r\n        description: item.description || item.content || 'No description available',\r\n        skills: extractSkills(item.description || item.content || title),\r\n        source: 'WeWorkRemotely',\r\n        sourceUrl: item.link,\r\n        sourceId: `wwr-${index}-${Date.now()}`\r\n      };\r\n    });\r\n  } catch (error) {\r\n    console.error('Error fetching WeWorkRemotely jobs:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 辅助函数\r\nconst formatDate = (dateString) => {\r\n  if (!dateString) return 'Recently';\r\n  \r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffTime = Math.abs(now - date);\r\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  if (diffDays === 0) return 'Today';\r\n  if (diffDays === 1) return 'Yesterday';\r\n  if (diffDays <= 7) return `${diffDays} days ago`;\r\n  if (diffDays <= 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\r\n  return `${Math.ceil(diffDays / 30)} months ago`;\r\n};\r\n\r\nconst extractSkills = (description) => {\r\n  const commonSkills = [\r\n    'JavaScript', 'Python', 'React', 'Node.js', 'TypeScript', 'Angular', 'Vue.js', 'Java', 'C#', '.NET',\r\n    'MongoDB', 'PostgreSQL', 'MySQL', 'AWS', 'Azure', 'Docker', 'Kubernetes', 'CI/CD', 'DevOps',\r\n    'Git', 'Linux', 'Figma', 'Sketch', 'Adobe XD', 'UI/UX', 'CSS', 'HTML', 'REST API', 'GraphQL'\r\n  ];\r\n\r\n  const foundSkills = commonSkills.filter(skill => \r\n    typeof description === 'string' && description.toLowerCase().includes(skill.toLowerCase())\r\n  );\r\n  \r\n  return foundSkills.length > 0 ? foundSkills.slice(0, 5) : ['Remote Work'];\r\n};\r\n\r\nconst extractTeam = (title) => {\r\n  const teams = {\r\n    'Frontend': ['Frontend', 'Front-end', 'Front End', 'UI', 'React', 'Angular', 'Vue', 'JavaScript'],\r\n    'UX/UI': ['UX', 'UI', 'User Experience', 'User Interface', 'Designer', 'Design'],\r\n    'Backend': ['Backend', 'Back-end', 'Back End', 'API', 'Server', 'Java', 'Python', 'Ruby', 'PHP', 'Node'],\r\n    'Full Stack': ['Full Stack', 'Fullstack', 'Full-stack'],\r\n    'DevOps': ['DevOps', 'SRE', 'Infrastructure', 'Cloud', 'AWS', 'Azure', 'GCP', 'Kubernetes', 'Docker'],\r\n    'Mobile': ['Mobile', 'iOS', 'Android', 'React Native', 'Flutter', 'Swift', 'Kotlin'],\r\n    'Data': ['Data', 'Analytics', 'Machine Learning', 'AI', 'ML', 'Data Science', 'Big Data'],\r\n    'Product': ['Product', 'PM', 'Product Manager', 'Product Owner'],\r\n    'QA': ['QA', 'Test', 'Testing', 'Quality'],\r\n    'Security': ['Security', 'Cyber', 'InfoSec']\r\n  };\r\n  \r\n  for (const [team, keywords] of Object.entries(teams)) {\r\n    if (keywords.some(keyword => title.includes(keyword))) {\r\n      return team;\r\n    }\r\n  }\r\n  \r\n  return 'Engineering';\r\n};\r\n\r\nconst estimateSalary = (title) => {\r\n  // 基于职位名称估算薪资范围\r\n  const seniorKeywords = ['Senior', 'Sr', 'Lead', 'Principal', 'Staff', 'Architect'];\r\n  const midKeywords = ['II', '2', 'Mid', 'Intermediate'];\r\n  const juniorKeywords = ['Junior', 'Jr', 'Entry', 'Associate', 'Intern'];\r\n  \r\n  const isSenior = seniorKeywords.some(key => title.includes(key));\r\n  const isMid = midKeywords.some(key => title.includes(key));\r\n  const isJunior = juniorKeywords.some(key => title.includes(key));\r\n  \r\n  // 基础薪资范围\r\n  let baseSalary;\r\n  if (title.includes('Manager') || title.includes('Director')) {\r\n    baseSalary = 130;\r\n  } else if (title.includes('Architect') || title.includes('Principal')) {\r\n    baseSalary = 140;\r\n  } else if (title.includes('DevOps') || title.includes('SRE')) {\r\n    baseSalary = 125;\r\n  } else if (title.includes('Data') || title.includes('Machine Learning')) {\r\n    baseSalary = 110;\r\n  } else if (title.includes('UI') || title.includes('UX') || title.includes('Design')) {\r\n    baseSalary = 115;\r\n  } else if (title.includes('Mobile') || title.includes('iOS') || title.includes('Android')) {\r\n    baseSalary = 120;\r\n  } else {\r\n    baseSalary = 100;\r\n  }\r\n  \r\n  // 根据级别调整薪资\r\n  if (isSenior) {\r\n    return baseSalary + 20;\r\n  } else if (isMid) {\r\n    return baseSalary;\r\n  } else if (isJunior) {\r\n    return baseSalary - 30;\r\n  } else {\r\n    return baseSalary;\r\n  }\r\n};\r\n\r\n// 综合获取真实工作数据\r\nexport const fetchRealRemoteJobs = async (searchTerm = '', filters = {}) => {\r\n  try {\r\n    // 并行调用多个API\r\n    const [remoteOKJobs, githubJobs, wwrJobs] = await Promise.allSettled([\r\n      fetchRemoteOKJobs(),\r\n      fetchGitHubJobs(),\r\n      fetchWeWorkRemotelyJobs(filters.category)\r\n    ]);\r\n    \r\n    let allJobs = [\r\n      ...(remoteOKJobs.status === 'fulfilled' ? remoteOKJobs.value : []),\r\n      ...(githubJobs.status === 'fulfilled' ? githubJobs.value : []),\r\n      ...(wwrJobs.status === 'fulfilled' ? wwrJobs.value : [])\r\n    ];\r\n    \r\n    // 如果所有API都失败，返回空数组\r\n    if (allJobs.length === 0) {\r\n      throw new Error('Failed to fetch jobs from any source');\r\n    }\r\n    \r\n    // 按搜索词过滤\r\n    if (searchTerm) {\r\n      allJobs = allJobs.filter(job => \r\n        job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.description.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n    \r\n    // 去重和排序\r\n    const uniqueJobs = removeDuplicateJobs(allJobs);\r\n    const sortedJobs = uniqueJobs.sort((a, b) => {\r\n      // 优先显示今天发布的工作\r\n      if (a.postedDate === 'Today' && b.postedDate !== 'Today') return -1;\r\n      if (a.postedDate !== 'Today' && b.postedDate === 'Today') return 1;\r\n      return 0;\r\n    });\r\n    \r\n    return {\r\n      jobs: sortedJobs,\r\n      total: sortedJobs.length,\r\n      sources: ['RemoteOK', 'WeWorkRemotely', 'GitHub Jobs'].filter(source => \r\n        allJobs.some(job => job.source === source)\r\n      )\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching real remote jobs:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 去重函数\r\nconst removeDuplicateJobs = (jobs) => {\r\n  const seen = new Set();\r\n  return jobs.filter(job => {\r\n    const key = `${job.title}-${job.company}`.toLowerCase().replace(/\\s+/g, '');\r\n    if (seen.has(key)) {\r\n      return false;\r\n    }\r\n    seen.add(key);\r\n    return true;\r\n  });\r\n};\r\n\r\nexport default {\r\n  fetchRealRemoteJobs,\r\n  fetchRemoteOKJobs,\r\n  fetchGitHubJobs,\r\n  fetchWeWorkRemotelyJobs\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}