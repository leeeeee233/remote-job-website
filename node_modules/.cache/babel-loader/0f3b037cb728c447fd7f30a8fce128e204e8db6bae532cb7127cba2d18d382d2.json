{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kiro\\\\remote-job-website\\\\src\\\\pages\\\\JobFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Header from '../components/Header';\nimport JobCard from '../components/JobCard';\nimport JobDetailsDrawer from '../components/JobDetailsDrawer';\n// 移除mock数据依赖\nimport jobService from '../services/jobService';\nimport fallbackJobService from '../services/fallbackJobService';\nimport realTimeJobService from '../services/RealTimeJobService';\nimport './JobFeed.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst JobFeed = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [filteredJobs, setFilteredJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searching, setSearching] = useState(false);\n  const [selectedJob, setSelectedJob] = useState(null);\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [activeFilters, setActiveFilters] = useState([]);\n  const [dataSources, setDataSources] = useState([]);\n  const [dynamicCategories, setDynamicCategories] = useState([]);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [realTimeStats, setRealTimeStats] = useState(null);\n  const observer = useRef();\n  const lastJobElementRef = useCallback(node => {\n    if (loading || loadingMore) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        loadMoreJobs();\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, loadingMore, hasMore]);\n\n  // 加载更多工作\n  const loadMoreJobs = async () => {\n    if (loadingMore || !hasMore) return;\n    setLoadingMore(true);\n    try {\n      const nextPage = page + 1;\n      const designSearchTerms = searchTerm || '';\n      const result = await jobService.searchRemoteJobs(designSearchTerms, {\n        ...activeFilters,\n        category: 'design',\n        page: nextPage\n      });\n      if (result.jobs.length === 0) {\n        setHasMore(false);\n      } else {\n        // 处理新加载的工作数据\n        const newJobs = filterJobs(result.jobs);\n        if (newJobs.length === 0) {\n          setHasMore(false);\n        } else {\n          setJobs(prevJobs => [...prevJobs, ...newJobs]);\n          setFilteredJobs(prevFiltered => [...prevFiltered, ...newJobs]);\n          setPage(nextPage);\n\n          // 更新动态分类（基于所有已加载的工作）\n          const allLoadedJobs = [...jobs, ...newJobs];\n          const categories = generateDynamicCategories(allLoadedJobs);\n          setDynamicCategories(categories);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load more jobs:', error);\n    } finally {\n      setLoadingMore(false);\n    }\n  };\n\n  // 根据工作数据自动生成分类 - 改进版本，更准确地匹配工作\n  const generateDynamicCategories = jobs => {\n    console.log('生成动态分类，工作数量:', jobs.length);\n\n    // 定义更精确的分类规则和关键词\n    const categoryRules = {\n      'ux-designer': {\n        label: 'UX Designer',\n        primaryKeywords: ['ux designer', 'user experience designer', 'ux/ui designer', 'ui/ux designer'],\n        secondaryKeywords: ['ux', 'user experience', 'interaction design', 'usability', 'user research'],\n        excludeKeywords: ['ux writer', 'ux content'],\n        count: 0,\n        jobs: []\n      },\n      'ui-designer': {\n        label: 'UI Designer',\n        primaryKeywords: ['ui designer', 'user interface designer', 'interface designer'],\n        secondaryKeywords: ['ui', 'user interface', 'visual design', 'interface design'],\n        excludeKeywords: ['ui developer', 'ui engineer'],\n        count: 0,\n        jobs: []\n      },\n      'product-designer': {\n        label: 'Product Designer',\n        primaryKeywords: ['product designer', 'digital product designer'],\n        secondaryKeywords: ['product design', 'design lead', 'senior designer'],\n        excludeKeywords: ['product manager', 'product owner'],\n        count: 0,\n        jobs: []\n      },\n      'frontend-developer': {\n        label: 'Frontend Developer',\n        primaryKeywords: ['frontend developer', 'front-end developer', 'front end developer', 'react developer', 'vue developer', 'angular developer'],\n        secondaryKeywords: ['frontend', 'front-end', 'javascript', 'react', 'vue', 'angular', 'html', 'css'],\n        excludeKeywords: [],\n        count: 0,\n        jobs: []\n      },\n      'backend-developer': {\n        label: 'Backend Developer',\n        primaryKeywords: ['backend developer', 'back-end developer', 'server developer', 'api developer'],\n        secondaryKeywords: ['backend', 'back-end', 'server', 'api', 'node.js', 'python', 'java', 'php', 'ruby'],\n        excludeKeywords: [],\n        count: 0,\n        jobs: []\n      },\n      'fullstack-developer': {\n        label: 'Full Stack Developer',\n        primaryKeywords: ['full stack developer', 'fullstack developer', 'full-stack developer'],\n        secondaryKeywords: ['full stack', 'fullstack', 'full-stack'],\n        excludeKeywords: [],\n        count: 0,\n        jobs: []\n      },\n      'data-scientist': {\n        label: 'Data Scientist',\n        primaryKeywords: ['data scientist', 'machine learning engineer', 'ai engineer'],\n        secondaryKeywords: ['data science', 'machine learning', 'artificial intelligence', 'analytics', 'big data'],\n        excludeKeywords: [],\n        count: 0,\n        jobs: []\n      },\n      'devops-engineer': {\n        label: 'DevOps Engineer',\n        primaryKeywords: ['devops engineer', 'site reliability engineer', 'sre', 'cloud engineer'],\n        secondaryKeywords: ['devops', 'infrastructure', 'cloud', 'aws', 'azure', 'kubernetes', 'docker'],\n        excludeKeywords: [],\n        count: 0,\n        jobs: []\n      },\n      'mobile-developer': {\n        label: 'Mobile Developer',\n        primaryKeywords: ['mobile developer', 'ios developer', 'android developer', 'react native developer'],\n        secondaryKeywords: ['mobile', 'ios', 'android', 'react native', 'flutter', 'swift', 'kotlin'],\n        excludeKeywords: [],\n        count: 0,\n        jobs: []\n      },\n      'graphic-designer': {\n        label: 'Graphic Designer',\n        primaryKeywords: ['graphic designer', 'visual designer', 'brand designer'],\n        secondaryKeywords: ['graphic design', 'visual design', 'brand design', 'creative design'],\n        excludeKeywords: [],\n        count: 0,\n        jobs: []\n      },\n      'marketing-specialist': {\n        label: 'Marketing Specialist',\n        primaryKeywords: ['marketing specialist', 'digital marketing', 'marketing manager', 'growth marketer'],\n        secondaryKeywords: ['marketing', 'content marketing', 'social media', 'seo', 'sem', 'growth'],\n        excludeKeywords: [],\n        count: 0,\n        jobs: []\n      },\n      'project-manager': {\n        label: 'Project Manager',\n        primaryKeywords: ['project manager', 'program manager', 'scrum master', 'product manager'],\n        secondaryKeywords: ['project management', 'agile', 'scrum', 'product management'],\n        excludeKeywords: [],\n        count: 0,\n        jobs: []\n      }\n    };\n\n    // 分析每个工作，使用更智能的匹配逻辑\n    jobs.forEach(job => {\n      const title = job.title.toLowerCase();\n      const description = job.description ? job.description.toLowerCase() : '';\n      const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\n\n      // 为每个分类计算匹配分数\n      Object.entries(categoryRules).forEach(([categoryId, categoryInfo]) => {\n        let matchScore = 0;\n\n        // 检查主要关键词（高权重）\n        const primaryMatch = categoryInfo.primaryKeywords.some(keyword => title.includes(keyword) || description.includes(keyword));\n        if (primaryMatch) matchScore += 10;\n\n        // 检查次要关键词（低权重）\n        const secondaryMatches = categoryInfo.secondaryKeywords.filter(keyword => title.includes(keyword) || description.includes(keyword) || skills.includes(keyword)).length;\n        matchScore += secondaryMatches * 2;\n\n        // 检查排除关键词（负权重）\n        const excludeMatch = categoryInfo.excludeKeywords.some(keyword => title.includes(keyword) || description.includes(keyword));\n        if (excludeMatch) matchScore -= 5;\n\n        // 如果匹配分数足够高，则归类到此分类\n        if (matchScore >= 5) {\n          categoryInfo.count++;\n          categoryInfo.jobs.push(job);\n        }\n      });\n    });\n\n    // 只返回有工作的分类，并按数量排序\n    const validCategories = Object.entries(categoryRules).filter(([_, categoryInfo]) => categoryInfo.count > 0).sort(([, a], [, b]) => b.count - a.count).slice(0, 8) // 最多显示8个分类\n    .map(([categoryId, categoryInfo]) => ({\n      id: categoryId,\n      label: `${categoryInfo.label} (${categoryInfo.count})`,\n      count: categoryInfo.count\n    }));\n    console.log('生成的动态分类:', validCategories);\n\n    // 输出详细的分类信息用于调试\n    validCategories.forEach(category => {\n      const categoryRule = categoryRules[category.id];\n      console.log(`${category.label}:`, categoryRule.jobs.slice(0, 3).map(job => job.title));\n    });\n    return validCategories;\n  };\n\n  // 过滤函数：保留所有工作，不再限制为设计工作\n  const filterJobs = jobs => {\n    console.log('处理工作数据，总数:', jobs.length);\n    return jobs; // 返回所有工作\n  };\n\n  // 实时数据更新监听器\n  useEffect(() => {\n    console.log('🚀 初始化实时工作数据服务');\n\n    // 启动实时数据服务\n    realTimeJobService.startRealTimeUpdates();\n\n    // 添加数据更新监听器\n    const unsubscribe = realTimeJobService.addUpdateListener(data => {\n      console.log('📡 收到实时数据更新:', data);\n\n      // 更新工作数据\n      setJobs(data.jobs);\n      setDataSources(data.sources);\n      setLastUpdate(data.lastUpdate);\n      setRealTimeStats(data.stats);\n\n      // 生成动态分类\n      const categories = generateDynamicCategories(data.jobs);\n      setDynamicCategories(categories);\n\n      // 重新应用当前的搜索和筛选\n      applyFiltersToJobs(activeFilters, data.jobs, searchTerm);\n    });\n\n    // 获取初始数据\n    const initializeData = async () => {\n      setLoading(true);\n      try {\n        const currentData = realTimeJobService.getCurrentJobs();\n        if (currentData.jobs.length > 0) {\n          console.log('✅ 使用现有数据:', currentData.jobs.length, '个工作');\n          setJobs(currentData.jobs);\n          setDataSources(currentData.sources);\n          setLastUpdate(currentData.lastUpdate);\n          setRealTimeStats(currentData.stats);\n          const categories = generateDynamicCategories(currentData.jobs);\n          setDynamicCategories(categories);\n          applyFiltersToJobs(activeFilters, currentData.jobs, searchTerm);\n        } else {\n          console.log('🔄 触发首次数据更新');\n          await realTimeJobService.forceUpdate();\n        }\n      } catch (error) {\n        console.error('❌ 初始化数据失败:', error);\n\n        // 不再使用mock数据，显示空状态\n        setJobs([]);\n        setFilteredJobs([]);\n        setDataSources(['No Data Available']);\n        setDynamicCategories([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeData();\n\n    // 清理函数\n    return () => {\n      console.log('🛑 清理实时数据服务');\n      unsubscribe();\n      realTimeJobService.stopRealTimeUpdates();\n    };\n  }, []); // 只在组件挂载时运行一次\n\n  const handleSearch = term => {\n    // 更新搜索词状态\n    if (term !== undefined && term !== null) {\n      setSearchTerm(term);\n    }\n\n    // 设置搜索状态为正在搜索\n    setSearching(true);\n\n    // 使用setTimeout模拟搜索延迟，提供更好的用户体验\n    setTimeout(() => {\n      // 重新应用筛选器，包括新的搜索词\n      applyFiltersToJobs(activeFilters);\n      setSearching(false);\n    }, 300); // 300ms的延迟，提供更流畅的搜索体验\n  };\n  const handleFilter = filterIds => {\n    console.log('筛选器更新:', filterIds);\n\n    // 更新活动筛选器状态\n    setActiveFilters(filterIds);\n\n    // 立即应用筛选到当前已加载的工作\n    applyFiltersToJobs(filterIds);\n  };\n\n  // 手动刷新数据\n  const handleRefresh = async () => {\n    if (isRefreshing) return;\n    console.log('🔄 手动刷新工作数据');\n    setIsRefreshing(true);\n    try {\n      const result = await realTimeJobService.forceUpdate();\n      if (result.success) {\n        console.log('✅ 手动刷新成功');\n      } else {\n        console.error('❌ 手动刷新失败:', result.error);\n      }\n    } catch (error) {\n      console.error('❌ 手动刷新异常:', error);\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  // 格式化最后更新时间\n  const formatLastUpdate = date => {\n    if (!date) return '未知';\n    const now = new Date();\n    const diff = now - new Date(date);\n    const minutes = Math.floor(diff / (1000 * 60));\n    if (minutes < 1) return '刚刚';\n    if (minutes < 60) return `${minutes}分钟前`;\n    const hours = Math.floor(minutes / 60);\n    if (hours < 24) return `${hours}小时前`;\n    const days = Math.floor(hours / 24);\n    return `${days}天前`;\n  };\n\n  // 统一的工作分类匹配函数 - 与generateDynamicCategories使用相同的逻辑\n  const getJobCategoryMatch = (job, categoryId) => {\n    const title = job.title.toLowerCase();\n    const description = job.description ? job.description.toLowerCase() : '';\n    const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\n\n    // 使用与generateDynamicCategories相同的分类规则\n    const categoryRules = {\n      'ux-designer': {\n        primaryKeywords: ['ux designer', 'user experience designer', 'ux/ui designer', 'ui/ux designer'],\n        secondaryKeywords: ['ux', 'user experience', 'interaction design', 'usability', 'user research'],\n        excludeKeywords: ['ux writer', 'ux content']\n      },\n      'ui-designer': {\n        primaryKeywords: ['ui designer', 'user interface designer', 'interface designer'],\n        secondaryKeywords: ['ui', 'user interface', 'visual design', 'interface design'],\n        excludeKeywords: ['ui developer', 'ui engineer']\n      },\n      'product-designer': {\n        primaryKeywords: ['product designer', 'digital product designer'],\n        secondaryKeywords: ['product design', 'design lead', 'senior designer'],\n        excludeKeywords: ['product manager', 'product owner']\n      },\n      'frontend-developer': {\n        primaryKeywords: ['frontend developer', 'front-end developer', 'front end developer', 'react developer', 'vue developer', 'angular developer'],\n        secondaryKeywords: ['frontend', 'front-end', 'javascript', 'react', 'vue', 'angular', 'html', 'css'],\n        excludeKeywords: []\n      },\n      'backend-developer': {\n        primaryKeywords: ['backend developer', 'back-end developer', 'server developer', 'api developer'],\n        secondaryKeywords: ['backend', 'back-end', 'server', 'api', 'node.js', 'python', 'java', 'php', 'ruby'],\n        excludeKeywords: []\n      },\n      'fullstack-developer': {\n        primaryKeywords: ['full stack developer', 'fullstack developer', 'full-stack developer'],\n        secondaryKeywords: ['full stack', 'fullstack', 'full-stack'],\n        excludeKeywords: []\n      },\n      'data-scientist': {\n        primaryKeywords: ['data scientist', 'machine learning engineer', 'ai engineer'],\n        secondaryKeywords: ['data science', 'machine learning', 'artificial intelligence', 'analytics', 'big data'],\n        excludeKeywords: []\n      },\n      'devops-engineer': {\n        primaryKeywords: ['devops engineer', 'site reliability engineer', 'sre', 'cloud engineer'],\n        secondaryKeywords: ['devops', 'infrastructure', 'cloud', 'aws', 'azure', 'kubernetes', 'docker'],\n        excludeKeywords: []\n      },\n      'mobile-developer': {\n        primaryKeywords: ['mobile developer', 'ios developer', 'android developer', 'react native developer'],\n        secondaryKeywords: ['mobile', 'ios', 'android', 'react native', 'flutter', 'swift', 'kotlin'],\n        excludeKeywords: []\n      },\n      'graphic-designer': {\n        primaryKeywords: ['graphic designer', 'visual designer', 'brand designer'],\n        secondaryKeywords: ['graphic design', 'visual design', 'brand design', 'creative design'],\n        excludeKeywords: []\n      },\n      'marketing-specialist': {\n        primaryKeywords: ['marketing specialist', 'digital marketing', 'marketing manager', 'growth marketer'],\n        secondaryKeywords: ['marketing', 'content marketing', 'social media', 'seo', 'sem', 'growth'],\n        excludeKeywords: []\n      },\n      'project-manager': {\n        primaryKeywords: ['project manager', 'program manager', 'scrum master', 'product manager'],\n        secondaryKeywords: ['project management', 'agile', 'scrum', 'product management'],\n        excludeKeywords: []\n      }\n    };\n    const categoryInfo = categoryRules[categoryId];\n    if (!categoryInfo) return false;\n    let matchScore = 0;\n\n    // 检查主要关键词（高权重）\n    const primaryMatch = categoryInfo.primaryKeywords.some(keyword => title.includes(keyword) || description.includes(keyword));\n    if (primaryMatch) matchScore += 10;\n\n    // 检查次要关键词（低权重）\n    const secondaryMatches = categoryInfo.secondaryKeywords.filter(keyword => title.includes(keyword) || description.includes(keyword) || skills.includes(keyword)).length;\n    matchScore += secondaryMatches * 2;\n\n    // 检查排除关键词（负权重）\n    const excludeMatch = categoryInfo.excludeKeywords.some(keyword => title.includes(keyword) || description.includes(keyword));\n    if (excludeMatch) matchScore -= 5;\n\n    // 返回是否匹配（使用与generateDynamicCategories相同的阈值）\n    return matchScore >= 5;\n  };\n\n  // 增强的搜索相关性评分函数\n  const calculateSearchRelevance = (job, searchTerm) => {\n    if (!searchTerm) return 0;\n    const term = searchTerm.toLowerCase();\n    const title = job.title.toLowerCase();\n    const company = job.company.toLowerCase();\n    const location = job.location.toLowerCase();\n    const description = job.description ? job.description.toLowerCase() : '';\n    const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\n    let score = 0;\n\n    // 标题匹配（最高权重）\n    if (title.includes(term)) {\n      if (title.startsWith(term)) score += 100; // 标题开头匹配\n      else if (title.split(' ').some(word => word.startsWith(term))) score += 80; // 单词开头匹配\n      else score += 60; // 标题包含\n    }\n\n    // 公司名称匹配（高权重）\n    if (company.includes(term)) {\n      if (company.startsWith(term)) score += 50;else score += 30;\n    }\n\n    // 技能匹配（中等权重）\n    if (skills.includes(term)) {\n      const skillWords = skills.split(' ');\n      if (skillWords.some(skill => skill === term)) score += 40; // 精确技能匹配\n      else score += 20; // 技能包含\n    }\n\n    // 描述匹配（较低权重）\n    if (description.includes(term)) {\n      const termCount = (description.match(new RegExp(term, 'g')) || []).length;\n      score += Math.min(termCount * 5, 25); // 最多25分，避免描述过度影响\n    }\n\n    // 位置匹配（较低权重）\n    if (location.includes(term)) {\n      score += 15;\n    }\n\n    // 多词搜索的额外评分\n    const searchWords = term.split(' ').filter(word => word.length > 2);\n    if (searchWords.length > 1) {\n      const matchedWords = searchWords.filter(word => title.includes(word) || company.includes(word) || skills.includes(word));\n      score += matchedWords.length * 10; // 每个匹配的词额外10分\n    }\n    return score;\n  };\n\n  // 应用筛选器到工作列表 - 使用统一的匹配逻辑和相关性排序\n  const applyFiltersToJobs = (filterIds, jobsData = jobs, searchTermData = searchTerm) => {\n    let results = [...jobsData];\n\n    // 首先按搜索词过滤并计算相关性\n    if (searchTermData) {\n      results = results.map(job => ({\n        ...job,\n        relevanceScore: calculateSearchRelevance(job, searchTermData)\n      })).filter(job => job.relevanceScore > 0) // 只保留有相关性的工作\n      .sort((a, b) => b.relevanceScore - a.relevanceScore); // 按相关性排序\n\n      console.log(`搜索 \"${searchTermData}\" 找到 ${results.length} 个相关工作`);\n      console.log('前5个最相关的工作:', results.slice(0, 5).map(job => ({\n        title: job.title,\n        company: job.company,\n        score: job.relevanceScore\n      })));\n    }\n\n    // 然后按职位类型筛选 - 使用与分类生成相同的智能匹配逻辑\n    if (filterIds && filterIds.length > 0) {\n      results = results.filter(job => {\n        // 检查工作是否匹配任一激活的筛选器\n        return filterIds.some(filterId => getJobCategoryMatch(job, filterId));\n      });\n    }\n    console.log(`筛选结果: ${results.length} 个工作 (原始: ${jobs.length}, 筛选器: ${filterIds})`);\n\n    // 输出调试信息，显示每个筛选器匹配到的工作\n    if (filterIds && filterIds.length > 0) {\n      filterIds.forEach(filterId => {\n        const matchedJobs = results.filter(job => getJobCategoryMatch(job, filterId));\n        console.log(`筛选器 ${filterId} 匹配到 ${matchedJobs.length} 个工作:`, matchedJobs.slice(0, 3).map(job => job.title));\n      });\n    }\n    setFilteredJobs(results);\n  };\n\n  // 处理工作卡片点击\n  const handleJobSelect = job => {\n    setSelectedJob(job);\n    setIsDrawerOpen(true);\n  };\n\n  // 处理关闭抽屉\n  const handleCloseDrawer = () => {\n    setIsDrawerOpen(false);\n  };\n\n  // 处理申请工作\n  const handleApplyJob = jobId => {\n    console.log(`Applying for job: ${jobId}`);\n\n    // 直接使用selectedJob，而不是从jobs数组中查找\n    const job = selectedJob;\n    if (!job) {\n      console.error('No selected job found');\n      alert('无法找到选中的工作');\n      return;\n    }\n\n    // 详细记录工作对象，帮助调试\n    console.log('Selected job details:', {\n      id: job.id,\n      title: job.title,\n      company: job.company,\n      source: job.source,\n      sourceUrl: job.sourceUrl,\n      sourceId: job.sourceId\n    });\n\n    // 创建一个隐藏的a标签来打开链接，这样可以避免弹出窗口被阻止\n    const openLink = url => {\n      console.log(`Attempting to open URL: ${url}`);\n\n      // 创建一个隐藏的a标签\n      const link = document.createElement('a');\n      link.href = url;\n      link.target = '_blank';\n      link.rel = 'noopener noreferrer';\n\n      // 添加到文档中并触发点击\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      setTimeout(() => {\n        document.body.removeChild(link);\n      }, 100);\n    };\n    let finalUrl = '';\n    if (job.sourceUrl) {\n      // 如果有源URL，使用它\n      console.log(`Using source URL: ${job.sourceUrl}`);\n      finalUrl = job.sourceUrl;\n    } else if (job.source) {\n      // 如果没有源URL但有来源信息，尝试构建URL\n      switch (job.source) {\n        case 'LinkedIn':\n          finalUrl = `https://www.linkedin.com/jobs/view/${job.sourceId || job.id}`;\n          break;\n        case 'WeWorkRemotely':\n          // 尝试使用更可能正确的WeWorkRemotely URL格式\n          if (job.company && job.title) {\n            // 将公司名和职位名转换为URL友好的格式\n            const companySlug = job.company.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n            const titleSlug = job.title.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n            finalUrl = `https://weworkremotely.com/remote-jobs/${companySlug}-${titleSlug}`;\n          } else {\n            finalUrl = `https://weworkremotely.com/remote-jobs/${job.sourceId || job.id}`;\n          }\n          break;\n        case 'RemoteOK':\n          finalUrl = `https://remoteok.io/l/${job.sourceId || job.id}`;\n          break;\n        default:\n          // 如果无法确定来源，尝试使用通用搜索\n          finalUrl = `https://www.google.com/search?q=${encodeURIComponent(`${job.title} ${job.company} job`)}`;\n      }\n      console.log(`Constructed URL: ${finalUrl}`);\n    } else {\n      // 如果没有任何链接信息，显示提示并使用Google搜索\n      console.error('No source URL or source information found for job:', job);\n      finalUrl = `https://www.google.com/search?q=${encodeURIComponent(`${job.title} ${job.company} job`)}`;\n      alert('无法找到精确的工作链接，将使用Google搜索');\n    }\n\n    // 尝试打开链接\n    if (finalUrl) {\n      openLink(finalUrl);\n    } else {\n      alert('无法生成有效的工作链接');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `job-feed ${isDrawerOpen ? 'drawer-open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onSearch: term => handleSearch(term),\n      onFilter: handleFilter,\n      dynamicCategories: dynamicCategories,\n      isLoading: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-list-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading jobs...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 11\n      }, this) : searching ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searching-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 700,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Searching...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 701,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 699,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: filteredJobs.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-header\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"results-main-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: `refresh-btn-inline ${isRefreshing ? 'refreshing' : ''}`,\n                onClick: handleRefresh,\n                disabled: isRefreshing,\n                title: \"\\u5237\\u65B0\\u5DE5\\u4F5C\\u6570\\u636E\",\n                children: \"\\u21BB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 709,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"results-count\",\n                children: [\"\\u627E\\u5230 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"count-highlight\",\n                  children: filteredJobs.length\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 718,\n                  columnNumber: 26\n                }, this), \" \\u4E2A\\u5DE5\\u4F5C\\u673A\\u4F1A\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 717,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"last-update-inline\",\n                children: [\"\\u6700\\u540E\\u66F4\\u65B0: \", formatLastUpdate(lastUpdate)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 720,\n                columnNumber: 21\n              }, this), realTimeStats && realTimeStats.newJobs > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"new-jobs-inline\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"number-highlight\",\n                  children: realTimeStats.newJobs\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 725,\n                  columnNumber: 25\n                }, this), \" \\u4E2A\\u65B0\\u5DE5\\u4F5C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 724,\n                columnNumber: 23\n              }, this), realTimeStats && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"total-updates-inline\",\n                children: [\"\\u5DF2\\u66F4\\u65B0 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"number-highlight\",\n                  children: realTimeStats.successfulUpdates\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 730,\n                  columnNumber: 29\n                }, this), \" \\u6B21\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 729,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"data-sources-inline\",\n                children: [\"\\u6570\\u636E\\u6765\\u6E90: \", dataSources.join(', ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 733,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 708,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 707,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-list\",\n            children: [filteredJobs.map((job, index) => {\n              if (filteredJobs.length === index + 1) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: lastJobElementRef,\n                  children: /*#__PURE__*/_jsxDEV(JobCard, {\n                    job: job,\n                    onSelect: () => handleJobSelect(job)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 743,\n                    columnNumber: 27\n                  }, this)\n                }, job.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 742,\n                  columnNumber: 25\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(JobCard, {\n                  job: job,\n                  onSelect: () => handleJobSelect(job)\n                }, job.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 751,\n                  columnNumber: 25\n                }, this);\n              }\n            }), loadingMore && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-more\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-spinner small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 761,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u52A0\\u8F7D\\u66F4\\u591A\\u5DE5\\u4F5C...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 762,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-jobs-found\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"No jobs found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Try adjusting your search filters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 770,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 768,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JobDetailsDrawer, {\n      job: selectedJob,\n      isOpen: isDrawerOpen,\n      onClose: handleCloseDrawer,\n      onApply: handleApplyJob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 777,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 684,\n    columnNumber: 5\n  }, this);\n};\n_s(JobFeed, \"CCUSA/svG3knREbss2QWqdAsMIk=\");\n_c = JobFeed;\nexport default JobFeed;\nvar _c;\n$RefreshReg$(_c, \"JobFeed\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Header","JobCard","JobDetailsDrawer","jobService","fallbackJobService","realTimeJobService","jsxDEV","_jsxDEV","Fragment","_Fragment","JobFeed","_s","jobs","setJobs","filteredJobs","setFilteredJobs","loading","setLoading","searchTerm","setSearchTerm","searching","setSearching","selectedJob","setSelectedJob","isDrawerOpen","setIsDrawerOpen","page","setPage","hasMore","setHasMore","loadingMore","setLoadingMore","activeFilters","setActiveFilters","dataSources","setDataSources","dynamicCategories","setDynamicCategories","lastUpdate","setLastUpdate","isRefreshing","setIsRefreshing","realTimeStats","setRealTimeStats","observer","lastJobElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","loadMoreJobs","observe","nextPage","designSearchTerms","result","searchRemoteJobs","category","length","newJobs","filterJobs","prevJobs","prevFiltered","allLoadedJobs","categories","generateDynamicCategories","error","console","log","categoryRules","label","primaryKeywords","secondaryKeywords","excludeKeywords","count","forEach","job","title","toLowerCase","description","skills","join","Object","categoryId","categoryInfo","matchScore","primaryMatch","some","keyword","includes","secondaryMatches","filter","excludeMatch","push","validCategories","_","sort","a","b","slice","map","id","categoryRule","startRealTimeUpdates","unsubscribe","addUpdateListener","data","sources","stats","applyFiltersToJobs","initializeData","currentData","getCurrentJobs","forceUpdate","stopRealTimeUpdates","handleSearch","term","undefined","setTimeout","handleFilter","filterIds","handleRefresh","success","formatLastUpdate","date","now","Date","diff","minutes","Math","floor","hours","days","getJobCategoryMatch","calculateSearchRelevance","company","location","score","startsWith","split","word","skillWords","skill","termCount","match","RegExp","min","searchWords","matchedWords","jobsData","searchTermData","results","relevanceScore","filterId","matchedJobs","handleJobSelect","handleCloseDrawer","handleApplyJob","jobId","alert","source","sourceUrl","sourceId","openLink","url","link","document","createElement","href","target","rel","body","appendChild","click","removeChild","finalUrl","companySlug","replace","titleSlug","encodeURIComponent","className","children","onSearch","onFilter","isLoading","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","successfulUpdates","index","ref","onSelect","isOpen","onClose","onApply","_c","$RefreshReg$"],"sources":["D:/Kiro/remote-job-website/src/pages/JobFeed.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Header from '../components/Header';\r\nimport JobCard from '../components/JobCard';\r\nimport JobDetailsDrawer from '../components/JobDetailsDrawer';\r\n// 移除mock数据依赖\r\nimport jobService from '../services/jobService';\r\nimport fallbackJobService from '../services/fallbackJobService';\r\nimport realTimeJobService from '../services/RealTimeJobService';\r\nimport './JobFeed.css';\r\n\r\nconst JobFeed = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filteredJobs, setFilteredJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searching, setSearching] = useState(false);\r\n  const [selectedJob, setSelectedJob] = useState(null);\r\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n  const [page, setPage] = useState(0);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [loadingMore, setLoadingMore] = useState(false);\r\n  const [activeFilters, setActiveFilters] = useState([]);\r\n  const [dataSources, setDataSources] = useState([]);\r\n  const [dynamicCategories, setDynamicCategories] = useState([]);\r\n  const [lastUpdate, setLastUpdate] = useState(null);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  const [realTimeStats, setRealTimeStats] = useState(null);\r\n  const observer = useRef();\r\n  const lastJobElementRef = useCallback(node => {\r\n    if (loading || loadingMore) return;\r\n    if (observer.current) observer.current.disconnect();\r\n    observer.current = new IntersectionObserver(entries => {\r\n      if (entries[0].isIntersecting && hasMore) {\r\n        loadMoreJobs();\r\n      }\r\n    });\r\n    if (node) observer.current.observe(node);\r\n  }, [loading, loadingMore, hasMore]);\r\n\r\n  // 加载更多工作\r\n  const loadMoreJobs = async () => {\r\n    if (loadingMore || !hasMore) return;\r\n    \r\n    setLoadingMore(true);\r\n    try {\r\n      const nextPage = page + 1;\r\n      const designSearchTerms = searchTerm || '';\r\n      \r\n      const result = await jobService.searchRemoteJobs(designSearchTerms, {\r\n        ...activeFilters,\r\n        category: 'design',\r\n        page: nextPage\r\n      });\r\n      \r\n      if (result.jobs.length === 0) {\r\n        setHasMore(false);\r\n      } else {\r\n        // 处理新加载的工作数据\r\n        const newJobs = filterJobs(result.jobs);\r\n        \r\n        if (newJobs.length === 0) {\r\n          setHasMore(false);\r\n        } else {\r\n          setJobs(prevJobs => [...prevJobs, ...newJobs]);\r\n          setFilteredJobs(prevFiltered => [...prevFiltered, ...newJobs]);\r\n          setPage(nextPage);\r\n          \r\n          // 更新动态分类（基于所有已加载的工作）\r\n          const allLoadedJobs = [...jobs, ...newJobs];\r\n          const categories = generateDynamicCategories(allLoadedJobs);\r\n          setDynamicCategories(categories);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load more jobs:', error);\r\n    } finally {\r\n      setLoadingMore(false);\r\n    }\r\n  };\r\n\r\n  // 根据工作数据自动生成分类 - 改进版本，更准确地匹配工作\r\n  const generateDynamicCategories = (jobs) => {\r\n    console.log('生成动态分类，工作数量:', jobs.length);\r\n    \r\n    // 定义更精确的分类规则和关键词\r\n    const categoryRules = {\r\n      'ux-designer': {\r\n        label: 'UX Designer',\r\n        primaryKeywords: ['ux designer', 'user experience designer', 'ux/ui designer', 'ui/ux designer'],\r\n        secondaryKeywords: ['ux', 'user experience', 'interaction design', 'usability', 'user research'],\r\n        excludeKeywords: ['ux writer', 'ux content'],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'ui-designer': {\r\n        label: 'UI Designer',\r\n        primaryKeywords: ['ui designer', 'user interface designer', 'interface designer'],\r\n        secondaryKeywords: ['ui', 'user interface', 'visual design', 'interface design'],\r\n        excludeKeywords: ['ui developer', 'ui engineer'],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'product-designer': {\r\n        label: 'Product Designer',\r\n        primaryKeywords: ['product designer', 'digital product designer'],\r\n        secondaryKeywords: ['product design', 'design lead', 'senior designer'],\r\n        excludeKeywords: ['product manager', 'product owner'],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'frontend-developer': {\r\n        label: 'Frontend Developer',\r\n        primaryKeywords: ['frontend developer', 'front-end developer', 'front end developer', 'react developer', 'vue developer', 'angular developer'],\r\n        secondaryKeywords: ['frontend', 'front-end', 'javascript', 'react', 'vue', 'angular', 'html', 'css'],\r\n        excludeKeywords: [],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'backend-developer': {\r\n        label: 'Backend Developer',\r\n        primaryKeywords: ['backend developer', 'back-end developer', 'server developer', 'api developer'],\r\n        secondaryKeywords: ['backend', 'back-end', 'server', 'api', 'node.js', 'python', 'java', 'php', 'ruby'],\r\n        excludeKeywords: [],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'fullstack-developer': {\r\n        label: 'Full Stack Developer',\r\n        primaryKeywords: ['full stack developer', 'fullstack developer', 'full-stack developer'],\r\n        secondaryKeywords: ['full stack', 'fullstack', 'full-stack'],\r\n        excludeKeywords: [],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'data-scientist': {\r\n        label: 'Data Scientist',\r\n        primaryKeywords: ['data scientist', 'machine learning engineer', 'ai engineer'],\r\n        secondaryKeywords: ['data science', 'machine learning', 'artificial intelligence', 'analytics', 'big data'],\r\n        excludeKeywords: [],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'devops-engineer': {\r\n        label: 'DevOps Engineer',\r\n        primaryKeywords: ['devops engineer', 'site reliability engineer', 'sre', 'cloud engineer'],\r\n        secondaryKeywords: ['devops', 'infrastructure', 'cloud', 'aws', 'azure', 'kubernetes', 'docker'],\r\n        excludeKeywords: [],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'mobile-developer': {\r\n        label: 'Mobile Developer',\r\n        primaryKeywords: ['mobile developer', 'ios developer', 'android developer', 'react native developer'],\r\n        secondaryKeywords: ['mobile', 'ios', 'android', 'react native', 'flutter', 'swift', 'kotlin'],\r\n        excludeKeywords: [],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'graphic-designer': {\r\n        label: 'Graphic Designer',\r\n        primaryKeywords: ['graphic designer', 'visual designer', 'brand designer'],\r\n        secondaryKeywords: ['graphic design', 'visual design', 'brand design', 'creative design'],\r\n        excludeKeywords: [],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'marketing-specialist': {\r\n        label: 'Marketing Specialist',\r\n        primaryKeywords: ['marketing specialist', 'digital marketing', 'marketing manager', 'growth marketer'],\r\n        secondaryKeywords: ['marketing', 'content marketing', 'social media', 'seo', 'sem', 'growth'],\r\n        excludeKeywords: [],\r\n        count: 0,\r\n        jobs: []\r\n      },\r\n      'project-manager': {\r\n        label: 'Project Manager',\r\n        primaryKeywords: ['project manager', 'program manager', 'scrum master', 'product manager'],\r\n        secondaryKeywords: ['project management', 'agile', 'scrum', 'product management'],\r\n        excludeKeywords: [],\r\n        count: 0,\r\n        jobs: []\r\n      }\r\n    };\r\n    \r\n    // 分析每个工作，使用更智能的匹配逻辑\r\n    jobs.forEach(job => {\r\n      const title = job.title.toLowerCase();\r\n      const description = job.description ? job.description.toLowerCase() : '';\r\n      const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\r\n      \r\n      // 为每个分类计算匹配分数\r\n      Object.entries(categoryRules).forEach(([categoryId, categoryInfo]) => {\r\n        let matchScore = 0;\r\n        \r\n        // 检查主要关键词（高权重）\r\n        const primaryMatch = categoryInfo.primaryKeywords.some(keyword => \r\n          title.includes(keyword) || description.includes(keyword)\r\n        );\r\n        if (primaryMatch) matchScore += 10;\r\n        \r\n        // 检查次要关键词（低权重）\r\n        const secondaryMatches = categoryInfo.secondaryKeywords.filter(keyword => \r\n          title.includes(keyword) || description.includes(keyword) || skills.includes(keyword)\r\n        ).length;\r\n        matchScore += secondaryMatches * 2;\r\n        \r\n        // 检查排除关键词（负权重）\r\n        const excludeMatch = categoryInfo.excludeKeywords.some(keyword => \r\n          title.includes(keyword) || description.includes(keyword)\r\n        );\r\n        if (excludeMatch) matchScore -= 5;\r\n        \r\n        // 如果匹配分数足够高，则归类到此分类\r\n        if (matchScore >= 5) {\r\n          categoryInfo.count++;\r\n          categoryInfo.jobs.push(job);\r\n        }\r\n      });\r\n    });\r\n    \r\n    // 只返回有工作的分类，并按数量排序\r\n    const validCategories = Object.entries(categoryRules)\r\n      .filter(([_, categoryInfo]) => categoryInfo.count > 0)\r\n      .sort(([, a], [, b]) => b.count - a.count)\r\n      .slice(0, 8) // 最多显示8个分类\r\n      .map(([categoryId, categoryInfo]) => ({\r\n        id: categoryId,\r\n        label: `${categoryInfo.label} (${categoryInfo.count})`,\r\n        count: categoryInfo.count\r\n      }));\r\n    \r\n    console.log('生成的动态分类:', validCategories);\r\n    \r\n    // 输出详细的分类信息用于调试\r\n    validCategories.forEach(category => {\r\n      const categoryRule = categoryRules[category.id];\r\n      console.log(`${category.label}:`, categoryRule.jobs.slice(0, 3).map(job => job.title));\r\n    });\r\n    \r\n    return validCategories;\r\n  };\r\n\r\n  // 过滤函数：保留所有工作，不再限制为设计工作\r\n  const filterJobs = (jobs) => {\r\n    console.log('处理工作数据，总数:', jobs.length);\r\n    return jobs; // 返回所有工作\r\n  };\r\n\r\n  // 实时数据更新监听器\r\n  useEffect(() => {\r\n    console.log('🚀 初始化实时工作数据服务');\r\n    \r\n    // 启动实时数据服务\r\n    realTimeJobService.startRealTimeUpdates();\r\n    \r\n    // 添加数据更新监听器\r\n    const unsubscribe = realTimeJobService.addUpdateListener((data) => {\r\n      console.log('📡 收到实时数据更新:', data);\r\n      \r\n      // 更新工作数据\r\n      setJobs(data.jobs);\r\n      setDataSources(data.sources);\r\n      setLastUpdate(data.lastUpdate);\r\n      setRealTimeStats(data.stats);\r\n      \r\n      // 生成动态分类\r\n      const categories = generateDynamicCategories(data.jobs);\r\n      setDynamicCategories(categories);\r\n      \r\n      // 重新应用当前的搜索和筛选\r\n      applyFiltersToJobs(activeFilters, data.jobs, searchTerm);\r\n    });\r\n    \r\n    // 获取初始数据\r\n    const initializeData = async () => {\r\n      setLoading(true);\r\n      \r\n      try {\r\n        const currentData = realTimeJobService.getCurrentJobs();\r\n        if (currentData.jobs.length > 0) {\r\n          console.log('✅ 使用现有数据:', currentData.jobs.length, '个工作');\r\n          setJobs(currentData.jobs);\r\n          setDataSources(currentData.sources);\r\n          setLastUpdate(currentData.lastUpdate);\r\n          setRealTimeStats(currentData.stats);\r\n          \r\n          const categories = generateDynamicCategories(currentData.jobs);\r\n          setDynamicCategories(categories);\r\n          \r\n          applyFiltersToJobs(activeFilters, currentData.jobs, searchTerm);\r\n        } else {\r\n          console.log('🔄 触发首次数据更新');\r\n          await realTimeJobService.forceUpdate();\r\n        }\r\n      } catch (error) {\r\n        console.error('❌ 初始化数据失败:', error);\r\n        \r\n        // 不再使用mock数据，显示空状态\r\n        setJobs([]);\r\n        setFilteredJobs([]);\r\n        setDataSources(['No Data Available']);\r\n        setDynamicCategories([]);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    initializeData();\r\n    \r\n    // 清理函数\r\n    return () => {\r\n      console.log('🛑 清理实时数据服务');\r\n      unsubscribe();\r\n      realTimeJobService.stopRealTimeUpdates();\r\n    };\r\n  }, []); // 只在组件挂载时运行一次\r\n\r\n  const handleSearch = (term) => {\r\n    // 更新搜索词状态\r\n    if (term !== undefined && term !== null) {\r\n      setSearchTerm(term);\r\n    }\r\n    \r\n    // 设置搜索状态为正在搜索\r\n    setSearching(true);\r\n    \r\n    // 使用setTimeout模拟搜索延迟，提供更好的用户体验\r\n    setTimeout(() => {\r\n      // 重新应用筛选器，包括新的搜索词\r\n      applyFiltersToJobs(activeFilters);\r\n      setSearching(false);\r\n    }, 300); // 300ms的延迟，提供更流畅的搜索体验\r\n  };\r\n\r\n  const handleFilter = (filterIds) => {\r\n    console.log('筛选器更新:', filterIds);\r\n    \r\n    // 更新活动筛选器状态\r\n    setActiveFilters(filterIds);\r\n    \r\n    // 立即应用筛选到当前已加载的工作\r\n    applyFiltersToJobs(filterIds);\r\n  };\r\n\r\n  // 手动刷新数据\r\n  const handleRefresh = async () => {\r\n    if (isRefreshing) return;\r\n    \r\n    console.log('🔄 手动刷新工作数据');\r\n    setIsRefreshing(true);\r\n    \r\n    try {\r\n      const result = await realTimeJobService.forceUpdate();\r\n      if (result.success) {\r\n        console.log('✅ 手动刷新成功');\r\n      } else {\r\n        console.error('❌ 手动刷新失败:', result.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ 手动刷新异常:', error);\r\n    } finally {\r\n      setIsRefreshing(false);\r\n    }\r\n  };\r\n\r\n  // 格式化最后更新时间\r\n  const formatLastUpdate = (date) => {\r\n    if (!date) return '未知';\r\n    \r\n    const now = new Date();\r\n    const diff = now - new Date(date);\r\n    const minutes = Math.floor(diff / (1000 * 60));\r\n    \r\n    if (minutes < 1) return '刚刚';\r\n    if (minutes < 60) return `${minutes}分钟前`;\r\n    \r\n    const hours = Math.floor(minutes / 60);\r\n    if (hours < 24) return `${hours}小时前`;\r\n    \r\n    const days = Math.floor(hours / 24);\r\n    return `${days}天前`;\r\n  };\r\n\r\n  // 统一的工作分类匹配函数 - 与generateDynamicCategories使用相同的逻辑\r\n  const getJobCategoryMatch = (job, categoryId) => {\r\n    const title = job.title.toLowerCase();\r\n    const description = job.description ? job.description.toLowerCase() : '';\r\n    const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\r\n    \r\n    // 使用与generateDynamicCategories相同的分类规则\r\n    const categoryRules = {\r\n      'ux-designer': {\r\n        primaryKeywords: ['ux designer', 'user experience designer', 'ux/ui designer', 'ui/ux designer'],\r\n        secondaryKeywords: ['ux', 'user experience', 'interaction design', 'usability', 'user research'],\r\n        excludeKeywords: ['ux writer', 'ux content']\r\n      },\r\n      'ui-designer': {\r\n        primaryKeywords: ['ui designer', 'user interface designer', 'interface designer'],\r\n        secondaryKeywords: ['ui', 'user interface', 'visual design', 'interface design'],\r\n        excludeKeywords: ['ui developer', 'ui engineer']\r\n      },\r\n      'product-designer': {\r\n        primaryKeywords: ['product designer', 'digital product designer'],\r\n        secondaryKeywords: ['product design', 'design lead', 'senior designer'],\r\n        excludeKeywords: ['product manager', 'product owner']\r\n      },\r\n      'frontend-developer': {\r\n        primaryKeywords: ['frontend developer', 'front-end developer', 'front end developer', 'react developer', 'vue developer', 'angular developer'],\r\n        secondaryKeywords: ['frontend', 'front-end', 'javascript', 'react', 'vue', 'angular', 'html', 'css'],\r\n        excludeKeywords: []\r\n      },\r\n      'backend-developer': {\r\n        primaryKeywords: ['backend developer', 'back-end developer', 'server developer', 'api developer'],\r\n        secondaryKeywords: ['backend', 'back-end', 'server', 'api', 'node.js', 'python', 'java', 'php', 'ruby'],\r\n        excludeKeywords: []\r\n      },\r\n      'fullstack-developer': {\r\n        primaryKeywords: ['full stack developer', 'fullstack developer', 'full-stack developer'],\r\n        secondaryKeywords: ['full stack', 'fullstack', 'full-stack'],\r\n        excludeKeywords: []\r\n      },\r\n      'data-scientist': {\r\n        primaryKeywords: ['data scientist', 'machine learning engineer', 'ai engineer'],\r\n        secondaryKeywords: ['data science', 'machine learning', 'artificial intelligence', 'analytics', 'big data'],\r\n        excludeKeywords: []\r\n      },\r\n      'devops-engineer': {\r\n        primaryKeywords: ['devops engineer', 'site reliability engineer', 'sre', 'cloud engineer'],\r\n        secondaryKeywords: ['devops', 'infrastructure', 'cloud', 'aws', 'azure', 'kubernetes', 'docker'],\r\n        excludeKeywords: []\r\n      },\r\n      'mobile-developer': {\r\n        primaryKeywords: ['mobile developer', 'ios developer', 'android developer', 'react native developer'],\r\n        secondaryKeywords: ['mobile', 'ios', 'android', 'react native', 'flutter', 'swift', 'kotlin'],\r\n        excludeKeywords: []\r\n      },\r\n      'graphic-designer': {\r\n        primaryKeywords: ['graphic designer', 'visual designer', 'brand designer'],\r\n        secondaryKeywords: ['graphic design', 'visual design', 'brand design', 'creative design'],\r\n        excludeKeywords: []\r\n      },\r\n      'marketing-specialist': {\r\n        primaryKeywords: ['marketing specialist', 'digital marketing', 'marketing manager', 'growth marketer'],\r\n        secondaryKeywords: ['marketing', 'content marketing', 'social media', 'seo', 'sem', 'growth'],\r\n        excludeKeywords: []\r\n      },\r\n      'project-manager': {\r\n        primaryKeywords: ['project manager', 'program manager', 'scrum master', 'product manager'],\r\n        secondaryKeywords: ['project management', 'agile', 'scrum', 'product management'],\r\n        excludeKeywords: []\r\n      }\r\n    };\r\n    \r\n    const categoryInfo = categoryRules[categoryId];\r\n    if (!categoryInfo) return false;\r\n    \r\n    let matchScore = 0;\r\n    \r\n    // 检查主要关键词（高权重）\r\n    const primaryMatch = categoryInfo.primaryKeywords.some(keyword => \r\n      title.includes(keyword) || description.includes(keyword)\r\n    );\r\n    if (primaryMatch) matchScore += 10;\r\n    \r\n    // 检查次要关键词（低权重）\r\n    const secondaryMatches = categoryInfo.secondaryKeywords.filter(keyword => \r\n      title.includes(keyword) || description.includes(keyword) || skills.includes(keyword)\r\n    ).length;\r\n    matchScore += secondaryMatches * 2;\r\n    \r\n    // 检查排除关键词（负权重）\r\n    const excludeMatch = categoryInfo.excludeKeywords.some(keyword => \r\n      title.includes(keyword) || description.includes(keyword)\r\n    );\r\n    if (excludeMatch) matchScore -= 5;\r\n    \r\n    // 返回是否匹配（使用与generateDynamicCategories相同的阈值）\r\n    return matchScore >= 5;\r\n  };\r\n\r\n  // 增强的搜索相关性评分函数\r\n  const calculateSearchRelevance = (job, searchTerm) => {\r\n    if (!searchTerm) return 0;\r\n    \r\n    const term = searchTerm.toLowerCase();\r\n    const title = job.title.toLowerCase();\r\n    const company = job.company.toLowerCase();\r\n    const location = job.location.toLowerCase();\r\n    const description = job.description ? job.description.toLowerCase() : '';\r\n    const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\r\n    \r\n    let score = 0;\r\n    \r\n    // 标题匹配（最高权重）\r\n    if (title.includes(term)) {\r\n      if (title.startsWith(term)) score += 100; // 标题开头匹配\r\n      else if (title.split(' ').some(word => word.startsWith(term))) score += 80; // 单词开头匹配\r\n      else score += 60; // 标题包含\r\n    }\r\n    \r\n    // 公司名称匹配（高权重）\r\n    if (company.includes(term)) {\r\n      if (company.startsWith(term)) score += 50;\r\n      else score += 30;\r\n    }\r\n    \r\n    // 技能匹配（中等权重）\r\n    if (skills.includes(term)) {\r\n      const skillWords = skills.split(' ');\r\n      if (skillWords.some(skill => skill === term)) score += 40; // 精确技能匹配\r\n      else score += 20; // 技能包含\r\n    }\r\n    \r\n    // 描述匹配（较低权重）\r\n    if (description.includes(term)) {\r\n      const termCount = (description.match(new RegExp(term, 'g')) || []).length;\r\n      score += Math.min(termCount * 5, 25); // 最多25分，避免描述过度影响\r\n    }\r\n    \r\n    // 位置匹配（较低权重）\r\n    if (location.includes(term)) {\r\n      score += 15;\r\n    }\r\n    \r\n    // 多词搜索的额外评分\r\n    const searchWords = term.split(' ').filter(word => word.length > 2);\r\n    if (searchWords.length > 1) {\r\n      const matchedWords = searchWords.filter(word => \r\n        title.includes(word) || company.includes(word) || skills.includes(word)\r\n      );\r\n      score += matchedWords.length * 10; // 每个匹配的词额外10分\r\n    }\r\n    \r\n    return score;\r\n  };\r\n\r\n  // 应用筛选器到工作列表 - 使用统一的匹配逻辑和相关性排序\r\n  const applyFiltersToJobs = (filterIds, jobsData = jobs, searchTermData = searchTerm) => {\r\n    let results = [...jobsData];\r\n    \r\n    // 首先按搜索词过滤并计算相关性\r\n    if (searchTermData) {\r\n      results = results\r\n        .map(job => ({\r\n          ...job,\r\n          relevanceScore: calculateSearchRelevance(job, searchTermData)\r\n        }))\r\n        .filter(job => job.relevanceScore > 0) // 只保留有相关性的工作\r\n        .sort((a, b) => b.relevanceScore - a.relevanceScore); // 按相关性排序\r\n      \r\n      console.log(`搜索 \"${searchTermData}\" 找到 ${results.length} 个相关工作`);\r\n      console.log('前5个最相关的工作:', results.slice(0, 5).map(job => ({\r\n        title: job.title,\r\n        company: job.company,\r\n        score: job.relevanceScore\r\n      })));\r\n    }\r\n    \r\n    // 然后按职位类型筛选 - 使用与分类生成相同的智能匹配逻辑\r\n    if (filterIds && filterIds.length > 0) {\r\n      results = results.filter(job => {\r\n        // 检查工作是否匹配任一激活的筛选器\r\n        return filterIds.some(filterId => getJobCategoryMatch(job, filterId));\r\n      });\r\n    }\r\n    \r\n    console.log(`筛选结果: ${results.length} 个工作 (原始: ${jobs.length}, 筛选器: ${filterIds})`);\r\n    \r\n    // 输出调试信息，显示每个筛选器匹配到的工作\r\n    if (filterIds && filterIds.length > 0) {\r\n      filterIds.forEach(filterId => {\r\n        const matchedJobs = results.filter(job => getJobCategoryMatch(job, filterId));\r\n        console.log(`筛选器 ${filterId} 匹配到 ${matchedJobs.length} 个工作:`, \r\n          matchedJobs.slice(0, 3).map(job => job.title));\r\n      });\r\n    }\r\n    \r\n    setFilteredJobs(results);\r\n  };\r\n  \r\n\r\n\r\n  // 处理工作卡片点击\r\n  const handleJobSelect = (job) => {\r\n    setSelectedJob(job);\r\n    setIsDrawerOpen(true);\r\n  };\r\n  \r\n  // 处理关闭抽屉\r\n  const handleCloseDrawer = () => {\r\n    setIsDrawerOpen(false);\r\n  };\r\n  \r\n  // 处理申请工作\r\n  const handleApplyJob = (jobId) => {\r\n    console.log(`Applying for job: ${jobId}`);\r\n    \r\n    // 直接使用selectedJob，而不是从jobs数组中查找\r\n    const job = selectedJob;\r\n    \r\n    if (!job) {\r\n      console.error('No selected job found');\r\n      alert('无法找到选中的工作');\r\n      return;\r\n    }\r\n    \r\n    // 详细记录工作对象，帮助调试\r\n    console.log('Selected job details:', {\r\n      id: job.id,\r\n      title: job.title,\r\n      company: job.company,\r\n      source: job.source,\r\n      sourceUrl: job.sourceUrl,\r\n      sourceId: job.sourceId\r\n    });\r\n    \r\n    // 创建一个隐藏的a标签来打开链接，这样可以避免弹出窗口被阻止\r\n    const openLink = (url) => {\r\n      console.log(`Attempting to open URL: ${url}`);\r\n      \r\n      // 创建一个隐藏的a标签\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.target = '_blank';\r\n      link.rel = 'noopener noreferrer';\r\n      \r\n      // 添加到文档中并触发点击\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // 清理\r\n      setTimeout(() => {\r\n        document.body.removeChild(link);\r\n      }, 100);\r\n    };\r\n    \r\n    let finalUrl = '';\r\n    \r\n    if (job.sourceUrl) {\r\n      // 如果有源URL，使用它\r\n      console.log(`Using source URL: ${job.sourceUrl}`);\r\n      finalUrl = job.sourceUrl;\r\n    } else if (job.source) {\r\n      // 如果没有源URL但有来源信息，尝试构建URL\r\n      switch (job.source) {\r\n        case 'LinkedIn':\r\n          finalUrl = `https://www.linkedin.com/jobs/view/${job.sourceId || job.id}`;\r\n          break;\r\n        case 'WeWorkRemotely':\r\n          // 尝试使用更可能正确的WeWorkRemotely URL格式\r\n          if (job.company && job.title) {\r\n            // 将公司名和职位名转换为URL友好的格式\r\n            const companySlug = job.company.toLowerCase().replace(/[^a-z0-9]+/g, '-');\r\n            const titleSlug = job.title.toLowerCase().replace(/[^a-z0-9]+/g, '-');\r\n            finalUrl = `https://weworkremotely.com/remote-jobs/${companySlug}-${titleSlug}`;\r\n          } else {\r\n            finalUrl = `https://weworkremotely.com/remote-jobs/${job.sourceId || job.id}`;\r\n          }\r\n          break;\r\n        case 'RemoteOK':\r\n          finalUrl = `https://remoteok.io/l/${job.sourceId || job.id}`;\r\n          break;\r\n        default:\r\n          // 如果无法确定来源，尝试使用通用搜索\r\n          finalUrl = `https://www.google.com/search?q=${encodeURIComponent(`${job.title} ${job.company} job`)}`;\r\n      }\r\n      console.log(`Constructed URL: ${finalUrl}`);\r\n    } else {\r\n      // 如果没有任何链接信息，显示提示并使用Google搜索\r\n      console.error('No source URL or source information found for job:', job);\r\n      finalUrl = `https://www.google.com/search?q=${encodeURIComponent(`${job.title} ${job.company} job`)}`;\r\n      alert('无法找到精确的工作链接，将使用Google搜索');\r\n    }\r\n    \r\n    // 尝试打开链接\r\n    if (finalUrl) {\r\n      openLink(finalUrl);\r\n    } else {\r\n      alert('无法生成有效的工作链接');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`job-feed ${isDrawerOpen ? 'drawer-open' : ''}`}>\r\n      <Header \r\n        onSearch={(term) => handleSearch(term)} \r\n        onFilter={handleFilter}\r\n        dynamicCategories={dynamicCategories}\r\n        isLoading={loading}\r\n      />\r\n      \r\n      <div className=\"job-list-container\">\r\n        {loading ? (\r\n          <div className=\"loading-container\">\r\n            <div className=\"loading-spinner\"></div>\r\n            <p>Loading jobs...</p>\r\n          </div>\r\n        ) : searching ? (\r\n          <div className=\"searching-container\">\r\n            <div className=\"loading-spinner small\"></div>\r\n            <p>Searching...</p>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {filteredJobs.length > 0 ? (\r\n              <>\r\n                <div className=\"results-header\">\r\n                  <div className=\"results-main-info\">\r\n                    <button \r\n                      className={`refresh-btn-inline ${isRefreshing ? 'refreshing' : ''}`}\r\n                      onClick={handleRefresh}\r\n                      disabled={isRefreshing}\r\n                      title=\"刷新工作数据\"\r\n                    >\r\n                      ↻\r\n                    </button>\r\n                    <span className=\"results-count\">\r\n                      找到 <span className=\"count-highlight\">{filteredJobs.length}</span> 个工作机会\r\n                    </span>\r\n                    <span className=\"last-update-inline\">\r\n                      最后更新: {formatLastUpdate(lastUpdate)}\r\n                    </span>\r\n                    {realTimeStats && realTimeStats.newJobs > 0 && (\r\n                      <span className=\"new-jobs-inline\">\r\n                        <span className=\"number-highlight\">{realTimeStats.newJobs}</span> 个新工作\r\n                      </span>\r\n                    )}\r\n                    {realTimeStats && (\r\n                      <span className=\"total-updates-inline\">\r\n                        已更新 <span className=\"number-highlight\">{realTimeStats.successfulUpdates}</span> 次\r\n                      </span>\r\n                    )}\r\n                    <span className=\"data-sources-inline\">\r\n                      数据来源: {dataSources.join(', ')}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n                <div className=\"job-list\">\r\n                  {filteredJobs.map((job, index) => {\r\n                    if (filteredJobs.length === index + 1) {\r\n                      return (\r\n                        <div ref={lastJobElementRef} key={job.id}>\r\n                          <JobCard \r\n                            job={job} \r\n                            onSelect={() => handleJobSelect(job)}\r\n                          />\r\n                        </div>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <JobCard \r\n                          key={job.id} \r\n                          job={job} \r\n                          onSelect={() => handleJobSelect(job)}\r\n                        />\r\n                      );\r\n                    }\r\n                  })}\r\n                  {loadingMore && (\r\n                    <div className=\"loading-more\">\r\n                      <div className=\"loading-spinner small\"></div>\r\n                      <p>加载更多工作...</p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <div className=\"no-jobs-found\">\r\n                <h3>No jobs found</h3>\r\n                <p>Try adjusting your search filters</p>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n      \r\n      <JobDetailsDrawer \r\n        job={selectedJob}\r\n        isOpen={isDrawerOpen}\r\n        onClose={handleCloseDrawer}\r\n        onApply={handleApplyJob}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobFeed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}