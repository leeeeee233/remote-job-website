{"ast":null,"code":"// 工作去重服务\n// 确保每个工作只出现一次，使用多种策略进行去重\n\nclass DeduplicationService {\n  constructor() {\n    // 存储已见过的工作的多种标识符\n    this.seenJobIds = new Set();\n    this.seenJobHashes = new Set();\n    this.seenTitleCompanyPairs = new Set();\n    this.seenUrls = new Set();\n\n    // 相似度阈值\n    this.similarityThreshold = 0.85;\n\n    // 去重统计\n    this.stats = {\n      totalProcessed: 0,\n      duplicatesRemoved: 0,\n      duplicatesByType: {\n        exactId: 0,\n        titleCompany: 0,\n        similarity: 0,\n        url: 0\n      }\n    };\n  }\n\n  /**\r\n   * 对工作列表进行去重\r\n   * @param {Array} jobs - 工作列表\r\n   * @returns {Array} - 去重后的工作列表\r\n   */\n  deduplicateJobs(jobs) {\n    if (!Array.isArray(jobs) || jobs.length === 0) {\n      return [];\n    }\n    console.log(`开始去重处理，输入工作数量: ${jobs.length}`);\n    const uniqueJobs = [];\n    for (const job of jobs) {\n      this.stats.totalProcessed++;\n      if (this.isJobDuplicate(job)) {\n        this.stats.duplicatesRemoved++;\n        console.log(`发现重复工作: ${job.title} at ${job.company} (来源: ${job.source})`);\n        continue;\n      }\n\n      // 记录这个工作的各种标识符\n      this.recordJobIdentifiers(job);\n      uniqueJobs.push(job);\n    }\n    console.log(`去重完成，输出工作数量: ${uniqueJobs.length}，移除重复: ${this.stats.duplicatesRemoved}`);\n    return uniqueJobs;\n  }\n\n  /**\r\n   * 检查工作是否为重复\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否为重复\r\n   */\n  isJobDuplicate(job) {\n    // 1. 检查精确ID匹配\n    if (job.id && this.seenJobIds.has(job.id)) {\n      this.stats.duplicatesByType.exactId++;\n      return true;\n    }\n\n    // 2. 检查源URL匹配\n    if (job.sourceUrl && this.seenUrls.has(job.sourceUrl)) {\n      this.stats.duplicatesByType.url++;\n      return true;\n    }\n\n    // 3. 检查标题-公司组合\n    const titleCompanyKey = this.generateTitleCompanyKey(job);\n    if (this.seenTitleCompanyPairs.has(titleCompanyKey)) {\n      this.stats.duplicatesByType.titleCompany++;\n      return true;\n    }\n\n    // 4. 检查工作哈希\n    const jobHash = this.generateJobHash(job);\n    if (this.seenJobHashes.has(jobHash)) {\n      this.stats.duplicatesByType.similarity++;\n      return true;\n    }\n\n    // 5. 检查相似度\n    if (this.isSimilarToExistingJob(job)) {\n      this.stats.duplicatesByType.similarity++;\n      return true;\n    }\n    return false;\n  }\n\n  /**\r\n   * 记录工作的各种标识符\r\n   * @param {Object} job - 工作对象\r\n   */\n  recordJobIdentifiers(job) {\n    // 记录ID\n    if (job.id) {\n      this.seenJobIds.add(job.id);\n    }\n\n    // 记录URL\n    if (job.sourceUrl) {\n      this.seenUrls.add(job.sourceUrl);\n    }\n\n    // 记录标题-公司组合\n    const titleCompanyKey = this.generateTitleCompanyKey(job);\n    this.seenTitleCompanyPairs.add(titleCompanyKey);\n\n    // 记录工作哈希\n    const jobHash = this.generateJobHash(job);\n    this.seenJobHashes.add(jobHash);\n  }\n\n  /**\r\n   * 生成标题-公司键\r\n   * @param {Object} job - 工作对象\r\n   * @returns {string} - 标准化的键\r\n   */\n  generateTitleCompanyKey(job) {\n    const title = this.normalizeString(job.title || '');\n    const company = this.normalizeString(job.company || '');\n    return `${title}|${company}`;\n  }\n\n  /**\r\n   * 生成工作哈希\r\n   * @param {Object} job - 工作对象\r\n   * @returns {string} - 工作哈希\r\n   */\n  generateJobHash(job) {\n    const components = [this.normalizeString(job.title || ''), this.normalizeString(job.company || ''), this.normalizeString(job.location || ''), this.normalizeString(job.type || ''), job.source || ''];\n    return components.join('|');\n  }\n\n  /**\r\n   * 标准化字符串\r\n   * @param {string} str - 输入字符串\r\n   * @returns {string} - 标准化后的字符串\r\n   */\n  normalizeString(str) {\n    return str.toLowerCase().trim().replace(/\\s+/g, ' ').replace(/[^\\w\\s]/g, '').replace(/\\b(inc|ltd|llc|corp|corporation|company|co)\\b/g, '').trim();\n  }\n\n  /**\r\n   * 检查是否与现有工作相似\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否相似\r\n   */\n  isSimilarToExistingJob(job) {\n    const currentJobString = this.generateJobHash(job);\n    for (const existingHash of this.seenJobHashes) {\n      const similarity = this.calculateSimilarity(currentJobString, existingHash);\n      if (similarity > this.similarityThreshold) {\n        console.log(`发现相似工作 (${Math.round(similarity * 100)}% 相似度): ${job.title} at ${job.company}`);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\r\n   * 计算字符串相似度\r\n   * @param {string} str1 - 字符串1\r\n   * @param {string} str2 - 字符串2\r\n   * @returns {number} - 相似度 (0-1)\r\n   */\n  calculateSimilarity(str1, str2) {\n    if (str1 === str2) return 1.0;\n    if (str1.length === 0 || str2.length === 0) return 0.0;\n    const longer = str1.length > str2.length ? str1 : str2;\n    const shorter = str1.length > str2.length ? str2 : str1;\n    const editDistance = this.levenshteinDistance(longer, shorter);\n    return (longer.length - editDistance) / longer.length;\n  }\n\n  /**\r\n   * 计算编辑距离\r\n   * @param {string} str1 - 字符串1\r\n   * @param {string} str2 - 字符串2\r\n   * @returns {number} - 编辑距离\r\n   */\n  levenshteinDistance(str1, str2) {\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));\n    for (let i = 0; i <= str1.length; i++) {\n      matrix[0][i] = i;\n    }\n    for (let j = 0; j <= str2.length; j++) {\n      matrix[j][0] = j;\n    }\n    for (let j = 1; j <= str2.length; j++) {\n      for (let i = 1; i <= str1.length; i++) {\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\n        matrix[j][i] = Math.min(matrix[j][i - 1] + 1,\n        // 插入\n        matrix[j - 1][i] + 1,\n        // 删除\n        matrix[j - 1][i - 1] + indicator // 替换\n        );\n      }\n    }\n    return matrix[str2.length][str1.length];\n  }\n\n  /**\r\n   * 批量去重多个来源的工作\r\n   * @param {Object} jobsBySource - 按来源分组的工作\r\n   * @returns {Array} - 去重后的工作列表\r\n   */\n  deduplicateMultipleSources(jobsBySource) {\n    console.log('开始多源去重处理');\n\n    // 按优先级排序来源\n    const sourcePriority = ['LinkedIn', 'RemoteOK', 'WeWorkRemotely', 'GitHub Jobs'];\n    const sortedSources = Object.keys(jobsBySource).sort((a, b) => {\n      const aIndex = sourcePriority.indexOf(a);\n      const bIndex = sourcePriority.indexOf(b);\n      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\n    });\n    const allJobs = [];\n\n    // 按优先级处理每个来源\n    for (const source of sortedSources) {\n      const jobs = jobsBySource[source] || [];\n      console.log(`处理来源 ${source}: ${jobs.length} 个工作`);\n      const uniqueJobsFromSource = this.deduplicateJobs(jobs);\n      allJobs.push(...uniqueJobsFromSource);\n      console.log(`来源 ${source} 去重后: ${uniqueJobsFromSource.length} 个工作`);\n    }\n    console.log(`多源去重完成，总计: ${allJobs.length} 个唯一工作`);\n    return allJobs;\n  }\n\n  /**\r\n   * 重置去重状态\r\n   */\n  reset() {\n    this.seenJobIds.clear();\n    this.seenJobHashes.clear();\n    this.seenTitleCompanyPairs.clear();\n    this.seenUrls.clear();\n    this.stats = {\n      totalProcessed: 0,\n      duplicatesRemoved: 0,\n      duplicatesByType: {\n        exactId: 0,\n        titleCompany: 0,\n        similarity: 0,\n        url: 0\n      }\n    };\n    console.log('去重服务状态已重置');\n  }\n\n  /**\r\n   * 获取去重统计信息\r\n   * @returns {Object} - 统计信息\r\n   */\n  getStats() {\n    return {\n      ...this.stats,\n      duplicateRate: this.stats.totalProcessed > 0 ? (this.stats.duplicatesRemoved / this.stats.totalProcessed * 100).toFixed(2) + '%' : '0%'\n    };\n  }\n\n  /**\r\n   * 设置相似度阈值\r\n   * @param {number} threshold - 阈值 (0-1)\r\n   */\n  setSimilarityThreshold(threshold) {\n    if (threshold >= 0 && threshold <= 1) {\n      this.similarityThreshold = threshold;\n      console.log(`相似度阈值已设置为: ${threshold}`);\n    }\n  }\n\n  /**\r\n   * 检查特定工作是否已存在\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否已存在\r\n   */\n  hasJob(job) {\n    return this.isJobDuplicate(job);\n  }\n\n  /**\r\n   * 添加工作到已知列表（不返回，只记录）\r\n   * @param {Object} job - 工作对象\r\n   */\n  addJob(job) {\n    if (!this.isJobDuplicate(job)) {\n      this.recordJobIdentifiers(job);\n    }\n  }\n}\nexport default DeduplicationService;","map":{"version":3,"names":["DeduplicationService","constructor","seenJobIds","Set","seenJobHashes","seenTitleCompanyPairs","seenUrls","similarityThreshold","stats","totalProcessed","duplicatesRemoved","duplicatesByType","exactId","titleCompany","similarity","url","deduplicateJobs","jobs","Array","isArray","length","console","log","uniqueJobs","job","isJobDuplicate","title","company","source","recordJobIdentifiers","push","id","has","sourceUrl","titleCompanyKey","generateTitleCompanyKey","jobHash","generateJobHash","isSimilarToExistingJob","add","normalizeString","components","location","type","join","str","toLowerCase","trim","replace","currentJobString","existingHash","calculateSimilarity","Math","round","str1","str2","longer","shorter","editDistance","levenshteinDistance","matrix","fill","map","i","j","indicator","min","deduplicateMultipleSources","jobsBySource","sourcePriority","sortedSources","Object","keys","sort","a","b","aIndex","indexOf","bIndex","allJobs","uniqueJobsFromSource","reset","clear","getStats","duplicateRate","toFixed","setSimilarityThreshold","threshold","hasJob","addJob"],"sources":["D:/Kiro/remote-job-website/src/services/DeduplicationService.js"],"sourcesContent":["// 工作去重服务\r\n// 确保每个工作只出现一次，使用多种策略进行去重\r\n\r\nclass DeduplicationService {\r\n  constructor() {\r\n    // 存储已见过的工作的多种标识符\r\n    this.seenJobIds = new Set();\r\n    this.seenJobHashes = new Set();\r\n    this.seenTitleCompanyPairs = new Set();\r\n    this.seenUrls = new Set();\r\n    \r\n    // 相似度阈值\r\n    this.similarityThreshold = 0.85;\r\n    \r\n    // 去重统计\r\n    this.stats = {\r\n      totalProcessed: 0,\r\n      duplicatesRemoved: 0,\r\n      duplicatesByType: {\r\n        exactId: 0,\r\n        titleCompany: 0,\r\n        similarity: 0,\r\n        url: 0\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 对工作列表进行去重\r\n   * @param {Array} jobs - 工作列表\r\n   * @returns {Array} - 去重后的工作列表\r\n   */\r\n  deduplicateJobs(jobs) {\r\n    if (!Array.isArray(jobs) || jobs.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    console.log(`开始去重处理，输入工作数量: ${jobs.length}`);\r\n    \r\n    const uniqueJobs = [];\r\n    \r\n    for (const job of jobs) {\r\n      this.stats.totalProcessed++;\r\n      \r\n      if (this.isJobDuplicate(job)) {\r\n        this.stats.duplicatesRemoved++;\r\n        console.log(`发现重复工作: ${job.title} at ${job.company} (来源: ${job.source})`);\r\n        continue;\r\n      }\r\n      \r\n      // 记录这个工作的各种标识符\r\n      this.recordJobIdentifiers(job);\r\n      uniqueJobs.push(job);\r\n    }\r\n    \r\n    console.log(`去重完成，输出工作数量: ${uniqueJobs.length}，移除重复: ${this.stats.duplicatesRemoved}`);\r\n    return uniqueJobs;\r\n  }\r\n\r\n  /**\r\n   * 检查工作是否为重复\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否为重复\r\n   */\r\n  isJobDuplicate(job) {\r\n    // 1. 检查精确ID匹配\r\n    if (job.id && this.seenJobIds.has(job.id)) {\r\n      this.stats.duplicatesByType.exactId++;\r\n      return true;\r\n    }\r\n\r\n    // 2. 检查源URL匹配\r\n    if (job.sourceUrl && this.seenUrls.has(job.sourceUrl)) {\r\n      this.stats.duplicatesByType.url++;\r\n      return true;\r\n    }\r\n\r\n    // 3. 检查标题-公司组合\r\n    const titleCompanyKey = this.generateTitleCompanyKey(job);\r\n    if (this.seenTitleCompanyPairs.has(titleCompanyKey)) {\r\n      this.stats.duplicatesByType.titleCompany++;\r\n      return true;\r\n    }\r\n\r\n    // 4. 检查工作哈希\r\n    const jobHash = this.generateJobHash(job);\r\n    if (this.seenJobHashes.has(jobHash)) {\r\n      this.stats.duplicatesByType.similarity++;\r\n      return true;\r\n    }\r\n\r\n    // 5. 检查相似度\r\n    if (this.isSimilarToExistingJob(job)) {\r\n      this.stats.duplicatesByType.similarity++;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 记录工作的各种标识符\r\n   * @param {Object} job - 工作对象\r\n   */\r\n  recordJobIdentifiers(job) {\r\n    // 记录ID\r\n    if (job.id) {\r\n      this.seenJobIds.add(job.id);\r\n    }\r\n\r\n    // 记录URL\r\n    if (job.sourceUrl) {\r\n      this.seenUrls.add(job.sourceUrl);\r\n    }\r\n\r\n    // 记录标题-公司组合\r\n    const titleCompanyKey = this.generateTitleCompanyKey(job);\r\n    this.seenTitleCompanyPairs.add(titleCompanyKey);\r\n\r\n    // 记录工作哈希\r\n    const jobHash = this.generateJobHash(job);\r\n    this.seenJobHashes.add(jobHash);\r\n  }\r\n\r\n  /**\r\n   * 生成标题-公司键\r\n   * @param {Object} job - 工作对象\r\n   * @returns {string} - 标准化的键\r\n   */\r\n  generateTitleCompanyKey(job) {\r\n    const title = this.normalizeString(job.title || '');\r\n    const company = this.normalizeString(job.company || '');\r\n    return `${title}|${company}`;\r\n  }\r\n\r\n  /**\r\n   * 生成工作哈希\r\n   * @param {Object} job - 工作对象\r\n   * @returns {string} - 工作哈希\r\n   */\r\n  generateJobHash(job) {\r\n    const components = [\r\n      this.normalizeString(job.title || ''),\r\n      this.normalizeString(job.company || ''),\r\n      this.normalizeString(job.location || ''),\r\n      this.normalizeString(job.type || ''),\r\n      job.source || ''\r\n    ];\r\n    \r\n    return components.join('|');\r\n  }\r\n\r\n  /**\r\n   * 标准化字符串\r\n   * @param {string} str - 输入字符串\r\n   * @returns {string} - 标准化后的字符串\r\n   */\r\n  normalizeString(str) {\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/[^\\w\\s]/g, '')\r\n      .replace(/\\b(inc|ltd|llc|corp|corporation|company|co)\\b/g, '')\r\n      .trim();\r\n  }\r\n\r\n  /**\r\n   * 检查是否与现有工作相似\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否相似\r\n   */\r\n  isSimilarToExistingJob(job) {\r\n    const currentJobString = this.generateJobHash(job);\r\n    \r\n    for (const existingHash of this.seenJobHashes) {\r\n      const similarity = this.calculateSimilarity(currentJobString, existingHash);\r\n      if (similarity > this.similarityThreshold) {\r\n        console.log(`发现相似工作 (${Math.round(similarity * 100)}% 相似度): ${job.title} at ${job.company}`);\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 计算字符串相似度\r\n   * @param {string} str1 - 字符串1\r\n   * @param {string} str2 - 字符串2\r\n   * @returns {number} - 相似度 (0-1)\r\n   */\r\n  calculateSimilarity(str1, str2) {\r\n    if (str1 === str2) return 1.0;\r\n    if (str1.length === 0 || str2.length === 0) return 0.0;\r\n    \r\n    const longer = str1.length > str2.length ? str1 : str2;\r\n    const shorter = str1.length > str2.length ? str2 : str1;\r\n    \r\n    const editDistance = this.levenshteinDistance(longer, shorter);\r\n    return (longer.length - editDistance) / longer.length;\r\n  }\r\n\r\n  /**\r\n   * 计算编辑距离\r\n   * @param {string} str1 - 字符串1\r\n   * @param {string} str2 - 字符串2\r\n   * @returns {number} - 编辑距离\r\n   */\r\n  levenshteinDistance(str1, str2) {\r\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));\r\n    \r\n    for (let i = 0; i <= str1.length; i++) {\r\n      matrix[0][i] = i;\r\n    }\r\n    \r\n    for (let j = 0; j <= str2.length; j++) {\r\n      matrix[j][0] = j;\r\n    }\r\n    \r\n    for (let j = 1; j <= str2.length; j++) {\r\n      for (let i = 1; i <= str1.length; i++) {\r\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n        matrix[j][i] = Math.min(\r\n          matrix[j][i - 1] + 1,     // 插入\r\n          matrix[j - 1][i] + 1,     // 删除\r\n          matrix[j - 1][i - 1] + indicator  // 替换\r\n        );\r\n      }\r\n    }\r\n    \r\n    return matrix[str2.length][str1.length];\r\n  }\r\n\r\n  /**\r\n   * 批量去重多个来源的工作\r\n   * @param {Object} jobsBySource - 按来源分组的工作\r\n   * @returns {Array} - 去重后的工作列表\r\n   */\r\n  deduplicateMultipleSources(jobsBySource) {\r\n    console.log('开始多源去重处理');\r\n    \r\n    // 按优先级排序来源\r\n    const sourcePriority = ['LinkedIn', 'RemoteOK', 'WeWorkRemotely', 'GitHub Jobs'];\r\n    const sortedSources = Object.keys(jobsBySource).sort((a, b) => {\r\n      const aIndex = sourcePriority.indexOf(a);\r\n      const bIndex = sourcePriority.indexOf(b);\r\n      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\r\n    });\r\n    \r\n    const allJobs = [];\r\n    \r\n    // 按优先级处理每个来源\r\n    for (const source of sortedSources) {\r\n      const jobs = jobsBySource[source] || [];\r\n      console.log(`处理来源 ${source}: ${jobs.length} 个工作`);\r\n      \r\n      const uniqueJobsFromSource = this.deduplicateJobs(jobs);\r\n      allJobs.push(...uniqueJobsFromSource);\r\n      \r\n      console.log(`来源 ${source} 去重后: ${uniqueJobsFromSource.length} 个工作`);\r\n    }\r\n    \r\n    console.log(`多源去重完成，总计: ${allJobs.length} 个唯一工作`);\r\n    return allJobs;\r\n  }\r\n\r\n  /**\r\n   * 重置去重状态\r\n   */\r\n  reset() {\r\n    this.seenJobIds.clear();\r\n    this.seenJobHashes.clear();\r\n    this.seenTitleCompanyPairs.clear();\r\n    this.seenUrls.clear();\r\n    \r\n    this.stats = {\r\n      totalProcessed: 0,\r\n      duplicatesRemoved: 0,\r\n      duplicatesByType: {\r\n        exactId: 0,\r\n        titleCompany: 0,\r\n        similarity: 0,\r\n        url: 0\r\n      }\r\n    };\r\n    \r\n    console.log('去重服务状态已重置');\r\n  }\r\n\r\n  /**\r\n   * 获取去重统计信息\r\n   * @returns {Object} - 统计信息\r\n   */\r\n  getStats() {\r\n    return {\r\n      ...this.stats,\r\n      duplicateRate: this.stats.totalProcessed > 0 \r\n        ? (this.stats.duplicatesRemoved / this.stats.totalProcessed * 100).toFixed(2) + '%'\r\n        : '0%'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 设置相似度阈值\r\n   * @param {number} threshold - 阈值 (0-1)\r\n   */\r\n  setSimilarityThreshold(threshold) {\r\n    if (threshold >= 0 && threshold <= 1) {\r\n      this.similarityThreshold = threshold;\r\n      console.log(`相似度阈值已设置为: ${threshold}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查特定工作是否已存在\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否已存在\r\n   */\r\n  hasJob(job) {\r\n    return this.isJobDuplicate(job);\r\n  }\r\n\r\n  /**\r\n   * 添加工作到已知列表（不返回，只记录）\r\n   * @param {Object} job - 工作对象\r\n   */\r\n  addJob(job) {\r\n    if (!this.isJobDuplicate(job)) {\r\n      this.recordJobIdentifiers(job);\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeduplicationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}