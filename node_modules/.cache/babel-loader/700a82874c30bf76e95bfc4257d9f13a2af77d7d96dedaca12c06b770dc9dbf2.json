{"ast":null,"code":"// HTTP请求工具函数\n// 提供增强的HTTP请求功能，支持重试、超时和错误处理\n/**\r\n * 发送HTTP请求，支持重试和超时\r\n * @param {string} url - 请求URL\r\n * @param {Object} options - 请求选项\r\n * @param {Object} retryOptions - 重试选项\r\n * @returns {Promise<Object>} - 响应数据\r\n */export const fetchWithRetry=async function(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let retryOptions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const{maxRetries=3,retryDelay=1000,timeout=10000,retryCondition=null}=retryOptions;// 添加超时信号\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),timeout);const fetchOptions={...options,signal:controller.signal};let retryCount=0;while(true){try{const response=await fetch(url,fetchOptions);clearTimeout(timeoutId);// 检查是否需要重试\nif(!response.ok&&retryCount<maxRetries){const shouldRetry=retryCondition?retryCondition(response):response.status>=500;// 默认重试服务器错误\nif(shouldRetry){retryCount++;const delay=retryDelay*Math.pow(2,retryCount-1);console.log(`Retrying request to ${url} in ${delay}ms (${retryCount}/${maxRetries})`);await new Promise(resolve=>setTimeout(resolve,delay));continue;}}if(!response.ok){throw new Error(`HTTP error ${response.status}: ${response.statusText}`);}// 尝试解析JSON响应\ntry{return await response.json();}catch(e){// 如果不是JSON，返回文本\nreturn await response.text();}}catch(error){clearTimeout(timeoutId);// 处理超时错误\nif(error.name==='AbortError'){throw new Error(`Request timeout after ${timeout}ms`);}// 处理其他错误\nif(retryCount<maxRetries){retryCount++;const delay=retryDelay*Math.pow(2,retryCount-1);console.log(`Retrying request to ${url} in ${delay}ms (${retryCount}/${maxRetries})`);await new Promise(resolve=>setTimeout(resolve,delay));}else{throw error;}}}};/**\r\n * 使用CORS代理发送请求\r\n * @param {string} url - 原始URL\r\n * @param {Object} options - 请求选项\r\n * @param {Object} retryOptions - 重试选项\r\n * @returns {Promise<Object>} - 响应数据\r\n */export const fetchWithCorsProxy=async function(url){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let retryOptions=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};const corsProxy='https://cors-anywhere.herokuapp.com/';const proxyUrl=`${corsProxy}${url}`;const proxyOptions={...options,headers:{...options.headers,'Origin':window.location.origin}};return fetchWithRetry(proxyUrl,proxyOptions,retryOptions);};/**\r\n * 解析RSS feed为JSON\r\n * @param {string} rssUrl - RSS feed URL\r\n * @param {string} apiKey - RSS2JSON API密钥\r\n * @returns {Promise<Object>} - 解析后的JSON数据\r\n */export const parseRssFeed=async function(rssUrl){let apiKey=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'';const rss2jsonUrl=`https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(rssUrl)}`;const options={};if(apiKey){options.headers={'Authorization':`ApiKey ${apiKey}`};}const response=await fetchWithRetry(rss2jsonUrl,options);if(response.status!=='ok'){throw new Error(`Failed to parse RSS feed: ${response.message||'Unknown error'}`);}return response;};/**\r\n * 创建查询字符串\r\n * @param {Object} params - 查询参数\r\n * @returns {string} - 查询字符串\r\n */export const buildQueryString=params=>{if(!params||Object.keys(params).length===0){return'';}const queryParams=Object.entries(params).filter(_ref=>{let[_,value]=_ref;return value!==undefined&&value!==null&&value!=='';}).map(_ref2=>{let[key,value]=_ref2;return`${encodeURIComponent(key)}=${encodeURIComponent(value)}`;}).join('&');return queryParams?`?${queryParams}`:'';};export default{fetchWithRetry,fetchWithCorsProxy,parseRssFeed,buildQueryString};","map":{"version":3,"names":["fetchWithRetry","url","options","arguments","length","undefined","retryOptions","maxRetries","retryDelay","timeout","retryCondition","controller","AbortController","timeoutId","setTimeout","abort","fetchOptions","signal","retryCount","response","fetch","clearTimeout","ok","shouldRetry","status","delay","Math","pow","console","log","Promise","resolve","Error","statusText","json","e","text","error","name","fetchWithCorsProxy","corsProxy","proxyUrl","proxyOptions","headers","window","location","origin","parseRssFeed","rssUrl","apiKey","rss2jsonUrl","encodeURIComponent","message","buildQueryString","params","Object","keys","queryParams","entries","filter","_ref","_","value","map","_ref2","key","join"],"sources":["D:/Kiro/remote-job-website/src/services/api/httpUtils.js"],"sourcesContent":["// HTTP请求工具函数\r\n// 提供增强的HTTP请求功能，支持重试、超时和错误处理\r\n\r\n/**\r\n * 发送HTTP请求，支持重试和超时\r\n * @param {string} url - 请求URL\r\n * @param {Object} options - 请求选项\r\n * @param {Object} retryOptions - 重试选项\r\n * @returns {Promise<Object>} - 响应数据\r\n */\r\nexport const fetchWithRetry = async (url, options = {}, retryOptions = {}) => {\r\n  const {\r\n    maxRetries = 3,\r\n    retryDelay = 1000,\r\n    timeout = 10000,\r\n    retryCondition = null\r\n  } = retryOptions;\r\n\r\n  // 添加超时信号\r\n  const controller = new AbortController();\r\n  const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n  \r\n  const fetchOptions = {\r\n    ...options,\r\n    signal: controller.signal\r\n  };\r\n\r\n  let retryCount = 0;\r\n  \r\n  while (true) {\r\n    try {\r\n      const response = await fetch(url, fetchOptions);\r\n      clearTimeout(timeoutId);\r\n      \r\n      // 检查是否需要重试\r\n      if (!response.ok && retryCount < maxRetries) {\r\n        const shouldRetry = retryCondition \r\n          ? retryCondition(response)\r\n          : response.status >= 500; // 默认重试服务器错误\r\n          \r\n        if (shouldRetry) {\r\n          retryCount++;\r\n          const delay = retryDelay * Math.pow(2, retryCount - 1);\r\n          console.log(`Retrying request to ${url} in ${delay}ms (${retryCount}/${maxRetries})`);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      // 尝试解析JSON响应\r\n      try {\r\n        return await response.json();\r\n      } catch (e) {\r\n        // 如果不是JSON，返回文本\r\n        return await response.text();\r\n      }\r\n    } catch (error) {\r\n      clearTimeout(timeoutId);\r\n      \r\n      // 处理超时错误\r\n      if (error.name === 'AbortError') {\r\n        throw new Error(`Request timeout after ${timeout}ms`);\r\n      }\r\n      \r\n      // 处理其他错误\r\n      if (retryCount < maxRetries) {\r\n        retryCount++;\r\n        const delay = retryDelay * Math.pow(2, retryCount - 1);\r\n        console.log(`Retrying request to ${url} in ${delay}ms (${retryCount}/${maxRetries})`);\r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n      } else {\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * 使用CORS代理发送请求\r\n * @param {string} url - 原始URL\r\n * @param {Object} options - 请求选项\r\n * @param {Object} retryOptions - 重试选项\r\n * @returns {Promise<Object>} - 响应数据\r\n */\r\nexport const fetchWithCorsProxy = async (url, options = {}, retryOptions = {}) => {\r\n  const corsProxy = 'https://cors-anywhere.herokuapp.com/';\r\n  const proxyUrl = `${corsProxy}${url}`;\r\n  \r\n  const proxyOptions = {\r\n    ...options,\r\n    headers: {\r\n      ...options.headers,\r\n      'Origin': window.location.origin\r\n    }\r\n  };\r\n  \r\n  return fetchWithRetry(proxyUrl, proxyOptions, retryOptions);\r\n};\r\n\r\n/**\r\n * 解析RSS feed为JSON\r\n * @param {string} rssUrl - RSS feed URL\r\n * @param {string} apiKey - RSS2JSON API密钥\r\n * @returns {Promise<Object>} - 解析后的JSON数据\r\n */\r\nexport const parseRssFeed = async (rssUrl, apiKey = '') => {\r\n  const rss2jsonUrl = `https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(rssUrl)}`;\r\n  \r\n  const options = {};\r\n  if (apiKey) {\r\n    options.headers = {\r\n      'Authorization': `ApiKey ${apiKey}`\r\n    };\r\n  }\r\n  \r\n  const response = await fetchWithRetry(rss2jsonUrl, options);\r\n  \r\n  if (response.status !== 'ok') {\r\n    throw new Error(`Failed to parse RSS feed: ${response.message || 'Unknown error'}`);\r\n  }\r\n  \r\n  return response;\r\n};\r\n\r\n/**\r\n * 创建查询字符串\r\n * @param {Object} params - 查询参数\r\n * @returns {string} - 查询字符串\r\n */\r\nexport const buildQueryString = (params) => {\r\n  if (!params || Object.keys(params).length === 0) {\r\n    return '';\r\n  }\r\n  \r\n  const queryParams = Object.entries(params)\r\n    .filter(([_, value]) => value !== undefined && value !== null && value !== '')\r\n    .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)\r\n    .join('&');\r\n    \r\n  return queryParams ? `?${queryParams}` : '';\r\n};\r\n\r\nexport default {\r\n  fetchWithRetry,\r\n  fetchWithCorsProxy,\r\n  parseRssFeed,\r\n  buildQueryString\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}