{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kiro\\\\remote-job-website\\\\src\\\\pages\\\\JobFeed.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Header from '../components/Header';\nimport JobCard from '../components/JobCard';\nimport JobDetailsDrawer from '../components/JobDetailsDrawer';\nimport { mockJobs } from '../services/mockData';\nimport jobService from '../services/jobService';\nimport './JobFeed.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst JobFeed = () => {\n  _s();\n  const [jobs, setJobs] = useState([]);\n  const [filteredJobs, setFilteredJobs] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [searching, setSearching] = useState(false);\n  const [selectedJob, setSelectedJob] = useState(null);\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [page, setPage] = useState(0);\n  const [hasMore, setHasMore] = useState(true);\n  const [loadingMore, setLoadingMore] = useState(false);\n  const [activeFilters, setActiveFilters] = useState([]);\n  const [dataSources, setDataSources] = useState([]);\n  const [dynamicCategories, setDynamicCategories] = useState([]);\n  const observer = useRef();\n  const lastJobElementRef = useCallback(node => {\n    if (loading || loadingMore) return;\n    if (observer.current) observer.current.disconnect();\n    observer.current = new IntersectionObserver(entries => {\n      if (entries[0].isIntersecting && hasMore) {\n        loadMoreJobs();\n      }\n    });\n    if (node) observer.current.observe(node);\n  }, [loading, loadingMore, hasMore]);\n\n  // 加载更多工作\n  const loadMoreJobs = async () => {\n    if (loadingMore || !hasMore) return;\n    setLoadingMore(true);\n    try {\n      const nextPage = page + 1;\n      const designSearchTerms = searchTerm || '';\n      const result = await jobService.searchRemoteJobs(designSearchTerms, {\n        ...activeFilters,\n        category: 'design',\n        page: nextPage\n      });\n      if (result.jobs.length === 0) {\n        setHasMore(false);\n      } else {\n        // 过滤出只包含UX designer和Product designer的工作\n        const designJobs = filterDesignJobs(result.jobs);\n        if (designJobs.length === 0) {\n          setHasMore(false);\n        } else {\n          setJobs(prevJobs => [...prevJobs, ...designJobs]);\n          setFilteredJobs(prevFiltered => [...prevFiltered, ...designJobs]);\n          setPage(nextPage);\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load more jobs:', error);\n    } finally {\n      setLoadingMore(false);\n    }\n  };\n\n  // 根据工作数据自动生成分类\n  const generateDynamicCategories = jobs => {\n    console.log('生成动态分类，工作数量:', jobs.length);\n    const categoryMap = new Map();\n\n    // 定义分类规则和关键词\n    const categoryRules = {\n      'ux-designer': {\n        label: 'UX Designer',\n        keywords: ['ux', 'user experience', 'ux designer', 'ux/ui', 'ui/ux', 'interaction design', 'usability', 'user research', 'experience design', 'design researcher', 'ux research'],\n        count: 0\n      },\n      'ui-designer': {\n        label: 'UI Designer',\n        keywords: ['ui', 'user interface', 'ui designer', 'interface design', 'visual design'],\n        count: 0\n      },\n      'product-designer': {\n        label: 'Product Designer',\n        keywords: ['product designer', 'product design', 'digital product', 'product manager'],\n        count: 0\n      },\n      'frontend-developer': {\n        label: 'Frontend Developer',\n        keywords: ['frontend', 'front-end', 'front end', 'react', 'vue', 'angular', 'javascript', 'html', 'css'],\n        count: 0\n      },\n      'backend-developer': {\n        label: 'Backend Developer',\n        keywords: ['backend', 'back-end', 'back end', 'api', 'server', 'node.js', 'python', 'java', 'php', 'ruby'],\n        count: 0\n      },\n      'fullstack-developer': {\n        label: 'Full Stack Developer',\n        keywords: ['full stack', 'fullstack', 'full-stack'],\n        count: 0\n      },\n      'data-scientist': {\n        label: 'Data Scientist',\n        keywords: ['data scientist', 'data science', 'machine learning', 'ml', 'ai', 'artificial intelligence', 'analytics', 'big data'],\n        count: 0\n      },\n      'devops-engineer': {\n        label: 'DevOps Engineer',\n        keywords: ['devops', 'dev ops', 'sre', 'site reliability', 'infrastructure', 'cloud', 'aws', 'azure', 'gcp', 'kubernetes', 'docker'],\n        count: 0\n      },\n      'mobile-developer': {\n        label: 'Mobile Developer',\n        keywords: ['mobile', 'ios', 'android', 'react native', 'flutter', 'swift', 'kotlin'],\n        count: 0\n      },\n      'graphic-designer': {\n        label: 'Graphic Designer',\n        keywords: ['graphic designer', 'visual designer', 'brand designer', 'creative designer', 'graphic design'],\n        count: 0\n      },\n      'marketing': {\n        label: 'Marketing',\n        keywords: ['marketing', 'digital marketing', 'content marketing', 'social media', 'seo', 'sem', 'growth'],\n        count: 0\n      },\n      'project-manager': {\n        label: 'Project Manager',\n        keywords: ['project manager', 'program manager', 'scrum master', 'agile', 'project management'],\n        count: 0\n      }\n    };\n\n    // 分析每个工作，统计分类\n    jobs.forEach(job => {\n      const title = job.title.toLowerCase();\n      const description = job.description ? job.description.toLowerCase() : '';\n      const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\n      const searchText = `${title} ${description} ${skills}`;\n\n      // 检查每个分类规则\n      Object.entries(categoryRules).forEach(([categoryId, categoryInfo]) => {\n        const hasMatch = categoryInfo.keywords.some(keyword => searchText.includes(keyword.toLowerCase()));\n        if (hasMatch) {\n          categoryInfo.count++;\n        }\n      });\n    });\n\n    // 只返回有工作的分类，并按数量排序\n    const validCategories = Object.entries(categoryRules).filter(([_, categoryInfo]) => categoryInfo.count > 0).sort(([, a], [, b]) => b.count - a.count).slice(0, 8) // 最多显示8个分类\n    .map(([categoryId, categoryInfo]) => ({\n      id: categoryId,\n      label: `${categoryInfo.label} (${categoryInfo.count})`,\n      count: categoryInfo.count\n    }));\n    console.log('生成的动态分类:', validCategories);\n    return validCategories;\n  };\n\n  // 过滤函数：保留所有工作，不再限制为设计工作\n  const filterJobs = jobs => {\n    console.log('处理工作数据，总数:', jobs.length);\n    return jobs; // 返回所有工作\n  };\n  useEffect(() => {\n    // 获取真实的远程工作数据\n    const fetchJobs = async () => {\n      setLoading(true);\n      setJobs([]);\n      setFilteredJobs([]);\n      setPage(0);\n      setHasMore(true);\n      try {\n        // 使用更通用的搜索词来获取更多结果\n        const designSearchTerms = searchTerm || '';\n\n        // 尝试从真实API获取数据\n        const result = await jobService.searchRemoteJobs(designSearchTerms, {\n          ...activeFilters,\n          category: 'design' // 如果API支持分类，优先获取设计类工作\n        });\n\n        // 先查看所有返回的工作，然后再过滤\n        console.log('All jobs returned from API:', result.jobs.length);\n        console.log('Sample jobs:', result.jobs.slice(0, 5).map(job => ({\n          title: job.title,\n          company: job.company,\n          description: job.description ? job.description.substring(0, 100) + '...' : 'No description',\n          skills: job.skills\n        })));\n\n        // 过滤出只包含UX designer和Product designer的工作\n        const designJobs = filterDesignJobs(result.jobs);\n\n        // 如果没有找到设计工作，显示所有工作\n        if (designJobs.length === 0) {\n          console.log('No design jobs found, showing all jobs');\n          setJobs(result.jobs);\n          setFilteredJobs(result.jobs);\n        } else {\n          console.log(`Found ${designJobs.length} design jobs out of ${result.jobs.length} total jobs`);\n          setJobs(designJobs);\n          setFilteredJobs(designJobs);\n        }\n        setDataSources(result.sources || []);\n\n        // 如果返回的工作数量小于预期，可能没有更多数据了\n        if (result.jobs.length < 20) {\n          setHasMore(false);\n        }\n      } catch (error) {\n        console.error('Failed to fetch jobs from API, using mock data:', error);\n        // 如果API失败，使用模拟数据作为后备，但仍然过滤设计工作\n        const filteredMockJobs = filterDesignJobs(mockJobs);\n        setJobs(filteredMockJobs);\n        setFilteredJobs(filteredMockJobs);\n        setDataSources(['Mock Data']);\n        setHasMore(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchJobs();\n  }, [searchTerm, JSON.stringify(activeFilters)]);\n  const handleSearch = term => {\n    // 更新搜索词状态\n    if (term !== undefined && term !== null) {\n      setSearchTerm(term);\n    }\n\n    // 设置搜索状态为正在搜索\n    setSearching(true);\n\n    // 使用setTimeout模拟搜索延迟，提供更好的用户体验\n    setTimeout(() => {\n      // 重新应用筛选器，包括新的搜索词\n      applyFiltersToJobs(activeFilters);\n      setSearching(false);\n    }, 300); // 300ms的延迟，提供更流畅的搜索体验\n  };\n  const handleFilter = filterIds => {\n    console.log('筛选器更新:', filterIds);\n\n    // 更新活动筛选器状态\n    setActiveFilters(filterIds);\n\n    // 立即应用筛选到当前已加载的工作\n    applyFiltersToJobs(filterIds);\n  };\n\n  // 应用筛选器到工作列表\n  const applyFiltersToJobs = filterIds => {\n    let results = [...jobs];\n\n    // 首先按搜索词过滤\n    if (searchTerm) {\n      results = results.filter(job => job.title.toLowerCase().includes(searchTerm.toLowerCase()) || job.company.toLowerCase().includes(searchTerm.toLowerCase()) || job.location.toLowerCase().includes(searchTerm.toLowerCase()) || job.description && job.description.toLowerCase().includes(searchTerm.toLowerCase()));\n    }\n\n    // 然后按职位类型筛选\n    if (filterIds && filterIds.length > 0) {\n      results = results.filter(job => {\n        const title = job.title.toLowerCase();\n        const description = job.description ? job.description.toLowerCase() : '';\n        const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\n\n        // 检查每个激活的筛选器\n        return filterIds.some(filterId => {\n          switch (filterId) {\n            case 'ux-designer':\n              return title.includes('ux') || title.includes('user experience') || description.includes('ux') || description.includes('user experience') || skills.includes('ux') || skills.includes('user experience');\n            case 'ui-designer':\n              return title.includes('ui') || title.includes('user interface') || description.includes('ui') || description.includes('user interface') || skills.includes('ui') || skills.includes('user interface');\n            case 'product-designer':\n              return title.includes('product') || title.includes('product design') || description.includes('product design') || skills.includes('product design') || title.includes('product') && (title.includes('design') || description.includes('design'));\n            case 'visual-identity':\n              return title.includes('visual') || title.includes('graphic') || title.includes('brand') || title.includes('identity') || description.includes('visual') || description.includes('graphic') || description.includes('brand') || skills.includes('visual') || skills.includes('graphic design');\n            default:\n              return false;\n          }\n        });\n      });\n    }\n    console.log(`筛选结果: ${results.length} 个工作 (原始: ${jobs.length}, 筛选器: ${filterIds})`);\n    setFilteredJobs(results);\n  };\n\n  // 处理工作卡片点击\n  const handleJobSelect = job => {\n    setSelectedJob(job);\n    setIsDrawerOpen(true);\n  };\n\n  // 处理关闭抽屉\n  const handleCloseDrawer = () => {\n    setIsDrawerOpen(false);\n  };\n\n  // 处理申请工作\n  const handleApplyJob = jobId => {\n    console.log(`Applying for job: ${jobId}`);\n\n    // 直接使用selectedJob，而不是从jobs数组中查找\n    const job = selectedJob;\n    if (!job) {\n      console.error('No selected job found');\n      alert('无法找到选中的工作');\n      return;\n    }\n\n    // 详细记录工作对象，帮助调试\n    console.log('Selected job details:', {\n      id: job.id,\n      title: job.title,\n      company: job.company,\n      source: job.source,\n      sourceUrl: job.sourceUrl,\n      sourceId: job.sourceId\n    });\n\n    // 创建一个隐藏的a标签来打开链接，这样可以避免弹出窗口被阻止\n    const openLink = url => {\n      console.log(`Attempting to open URL: ${url}`);\n\n      // 创建一个隐藏的a标签\n      const link = document.createElement('a');\n      link.href = url;\n      link.target = '_blank';\n      link.rel = 'noopener noreferrer';\n\n      // 添加到文档中并触发点击\n      document.body.appendChild(link);\n      link.click();\n\n      // 清理\n      setTimeout(() => {\n        document.body.removeChild(link);\n      }, 100);\n    };\n    let finalUrl = '';\n    if (job.sourceUrl) {\n      // 如果有源URL，使用它\n      console.log(`Using source URL: ${job.sourceUrl}`);\n      finalUrl = job.sourceUrl;\n    } else if (job.source) {\n      // 如果没有源URL但有来源信息，尝试构建URL\n      switch (job.source) {\n        case 'LinkedIn':\n          finalUrl = `https://www.linkedin.com/jobs/view/${job.sourceId || job.id}`;\n          break;\n        case 'WeWorkRemotely':\n          // 尝试使用更可能正确的WeWorkRemotely URL格式\n          if (job.company && job.title) {\n            // 将公司名和职位名转换为URL友好的格式\n            const companySlug = job.company.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n            const titleSlug = job.title.toLowerCase().replace(/[^a-z0-9]+/g, '-');\n            finalUrl = `https://weworkremotely.com/remote-jobs/${companySlug}-${titleSlug}`;\n          } else {\n            finalUrl = `https://weworkremotely.com/remote-jobs/${job.sourceId || job.id}`;\n          }\n          break;\n        case 'RemoteOK':\n          finalUrl = `https://remoteok.io/l/${job.sourceId || job.id}`;\n          break;\n        default:\n          // 如果无法确定来源，尝试使用通用搜索\n          finalUrl = `https://www.google.com/search?q=${encodeURIComponent(`${job.title} ${job.company} job`)}`;\n      }\n      console.log(`Constructed URL: ${finalUrl}`);\n    } else {\n      // 如果没有任何链接信息，显示提示并使用Google搜索\n      console.error('No source URL or source information found for job:', job);\n      finalUrl = `https://www.google.com/search?q=${encodeURIComponent(`${job.title} ${job.company} job`)}`;\n      alert('无法找到精确的工作链接，将使用Google搜索');\n    }\n\n    // 尝试打开链接\n    if (finalUrl) {\n      openLink(finalUrl);\n    } else {\n      alert('无法生成有效的工作链接');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `job-feed ${isDrawerOpen ? 'drawer-open' : ''}`,\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onSearch: term => handleSearch(term),\n      onFilter: handleFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"job-list-container\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading jobs...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }, this) : searching ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searching-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-spinner small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Searching...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: filteredJobs.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-count\",\n            children: [\"\\u627E\\u5230 \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"count-highlight\",\n              children: filteredJobs.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 22\n            }, this), \" \\u4E2A\\u5DE5\\u4F5C\\u673A\\u4F1A\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-sources\",\n            children: [\"\\u6570\\u636E\\u6765\\u6E90: \", dataSources.join(', ')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"job-list\",\n            children: [filteredJobs.map((job, index) => {\n              if (filteredJobs.length === index + 1) {\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  ref: lastJobElementRef,\n                  children: /*#__PURE__*/_jsxDEV(JobCard, {\n                    job: job,\n                    onSelect: () => handleJobSelect(job)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 475,\n                    columnNumber: 27\n                  }, this)\n                }, job.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 474,\n                  columnNumber: 25\n                }, this);\n              } else {\n                return /*#__PURE__*/_jsxDEV(JobCard, {\n                  job: job,\n                  onSelect: () => handleJobSelect(job)\n                }, job.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 25\n                }, this);\n              }\n            }), loadingMore && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading-more\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"loading-spinner small\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u52A0\\u8F7D\\u66F4\\u591A\\u5DE5\\u4F5C...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 494,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 492,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-jobs-found\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"No jobs found\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 501,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Try adjusting your search filters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 15\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JobDetailsDrawer, {\n      job: selectedJob,\n      isOpen: isDrawerOpen,\n      onClose: handleCloseDrawer,\n      onApply: handleApplyJob\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 443,\n    columnNumber: 5\n  }, this);\n};\n_s(JobFeed, \"KQ3HktemDgkRPzR10daqErLqvhg=\");\n_c = JobFeed;\nexport default JobFeed;\nvar _c;\n$RefreshReg$(_c, \"JobFeed\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","Header","JobCard","JobDetailsDrawer","mockJobs","jobService","jsxDEV","_jsxDEV","Fragment","_Fragment","JobFeed","_s","jobs","setJobs","filteredJobs","setFilteredJobs","loading","setLoading","searchTerm","setSearchTerm","searching","setSearching","selectedJob","setSelectedJob","isDrawerOpen","setIsDrawerOpen","page","setPage","hasMore","setHasMore","loadingMore","setLoadingMore","activeFilters","setActiveFilters","dataSources","setDataSources","dynamicCategories","setDynamicCategories","observer","lastJobElementRef","node","current","disconnect","IntersectionObserver","entries","isIntersecting","loadMoreJobs","observe","nextPage","designSearchTerms","result","searchRemoteJobs","category","length","designJobs","filterDesignJobs","prevJobs","prevFiltered","error","console","generateDynamicCategories","log","categoryMap","Map","categoryRules","label","keywords","count","forEach","job","title","toLowerCase","description","skills","join","searchText","Object","categoryId","categoryInfo","hasMatch","some","keyword","includes","validCategories","filter","_","sort","a","b","slice","map","id","filterJobs","fetchJobs","company","substring","sources","filteredMockJobs","JSON","stringify","handleSearch","term","undefined","setTimeout","applyFiltersToJobs","handleFilter","filterIds","results","location","filterId","handleJobSelect","handleCloseDrawer","handleApplyJob","jobId","alert","source","sourceUrl","sourceId","openLink","url","link","document","createElement","href","target","rel","body","appendChild","click","removeChild","finalUrl","companySlug","replace","titleSlug","encodeURIComponent","className","children","onSearch","onFilter","fileName","_jsxFileName","lineNumber","columnNumber","index","ref","onSelect","isOpen","onClose","onApply","_c","$RefreshReg$"],"sources":["D:/Kiro/remote-job-website/src/pages/JobFeed.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport Header from '../components/Header';\r\nimport JobCard from '../components/JobCard';\r\nimport JobDetailsDrawer from '../components/JobDetailsDrawer';\r\nimport { mockJobs } from '../services/mockData';\r\nimport jobService from '../services/jobService';\r\nimport './JobFeed.css';\r\n\r\nconst JobFeed = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filteredJobs, setFilteredJobs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [searching, setSearching] = useState(false);\r\n  const [selectedJob, setSelectedJob] = useState(null);\r\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\r\n  const [page, setPage] = useState(0);\r\n  const [hasMore, setHasMore] = useState(true);\r\n  const [loadingMore, setLoadingMore] = useState(false);\r\n  const [activeFilters, setActiveFilters] = useState([]);\r\n  const [dataSources, setDataSources] = useState([]);\r\n  const [dynamicCategories, setDynamicCategories] = useState([]);\r\n  const observer = useRef();\r\n  const lastJobElementRef = useCallback(node => {\r\n    if (loading || loadingMore) return;\r\n    if (observer.current) observer.current.disconnect();\r\n    observer.current = new IntersectionObserver(entries => {\r\n      if (entries[0].isIntersecting && hasMore) {\r\n        loadMoreJobs();\r\n      }\r\n    });\r\n    if (node) observer.current.observe(node);\r\n  }, [loading, loadingMore, hasMore]);\r\n\r\n  // 加载更多工作\r\n  const loadMoreJobs = async () => {\r\n    if (loadingMore || !hasMore) return;\r\n    \r\n    setLoadingMore(true);\r\n    try {\r\n      const nextPage = page + 1;\r\n      const designSearchTerms = searchTerm || '';\r\n      \r\n      const result = await jobService.searchRemoteJobs(designSearchTerms, {\r\n        ...activeFilters,\r\n        category: 'design',\r\n        page: nextPage\r\n      });\r\n      \r\n      if (result.jobs.length === 0) {\r\n        setHasMore(false);\r\n      } else {\r\n        // 过滤出只包含UX designer和Product designer的工作\r\n        const designJobs = filterDesignJobs(result.jobs);\r\n        \r\n        if (designJobs.length === 0) {\r\n          setHasMore(false);\r\n        } else {\r\n          setJobs(prevJobs => [...prevJobs, ...designJobs]);\r\n          setFilteredJobs(prevFiltered => [...prevFiltered, ...designJobs]);\r\n          setPage(nextPage);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to load more jobs:', error);\r\n    } finally {\r\n      setLoadingMore(false);\r\n    }\r\n  };\r\n\r\n  // 根据工作数据自动生成分类\r\n  const generateDynamicCategories = (jobs) => {\r\n    console.log('生成动态分类，工作数量:', jobs.length);\r\n    \r\n    const categoryMap = new Map();\r\n    \r\n    // 定义分类规则和关键词\r\n    const categoryRules = {\r\n      'ux-designer': {\r\n        label: 'UX Designer',\r\n        keywords: ['ux', 'user experience', 'ux designer', 'ux/ui', 'ui/ux', 'interaction design', 'usability', 'user research', 'experience design', 'design researcher', 'ux research'],\r\n        count: 0\r\n      },\r\n      'ui-designer': {\r\n        label: 'UI Designer',\r\n        keywords: ['ui', 'user interface', 'ui designer', 'interface design', 'visual design'],\r\n        count: 0\r\n      },\r\n      'product-designer': {\r\n        label: 'Product Designer',\r\n        keywords: ['product designer', 'product design', 'digital product', 'product manager'],\r\n        count: 0\r\n      },\r\n      'frontend-developer': {\r\n        label: 'Frontend Developer',\r\n        keywords: ['frontend', 'front-end', 'front end', 'react', 'vue', 'angular', 'javascript', 'html', 'css'],\r\n        count: 0\r\n      },\r\n      'backend-developer': {\r\n        label: 'Backend Developer',\r\n        keywords: ['backend', 'back-end', 'back end', 'api', 'server', 'node.js', 'python', 'java', 'php', 'ruby'],\r\n        count: 0\r\n      },\r\n      'fullstack-developer': {\r\n        label: 'Full Stack Developer',\r\n        keywords: ['full stack', 'fullstack', 'full-stack'],\r\n        count: 0\r\n      },\r\n      'data-scientist': {\r\n        label: 'Data Scientist',\r\n        keywords: ['data scientist', 'data science', 'machine learning', 'ml', 'ai', 'artificial intelligence', 'analytics', 'big data'],\r\n        count: 0\r\n      },\r\n      'devops-engineer': {\r\n        label: 'DevOps Engineer',\r\n        keywords: ['devops', 'dev ops', 'sre', 'site reliability', 'infrastructure', 'cloud', 'aws', 'azure', 'gcp', 'kubernetes', 'docker'],\r\n        count: 0\r\n      },\r\n      'mobile-developer': {\r\n        label: 'Mobile Developer',\r\n        keywords: ['mobile', 'ios', 'android', 'react native', 'flutter', 'swift', 'kotlin'],\r\n        count: 0\r\n      },\r\n      'graphic-designer': {\r\n        label: 'Graphic Designer',\r\n        keywords: ['graphic designer', 'visual designer', 'brand designer', 'creative designer', 'graphic design'],\r\n        count: 0\r\n      },\r\n      'marketing': {\r\n        label: 'Marketing',\r\n        keywords: ['marketing', 'digital marketing', 'content marketing', 'social media', 'seo', 'sem', 'growth'],\r\n        count: 0\r\n      },\r\n      'project-manager': {\r\n        label: 'Project Manager',\r\n        keywords: ['project manager', 'program manager', 'scrum master', 'agile', 'project management'],\r\n        count: 0\r\n      }\r\n    };\r\n    \r\n    // 分析每个工作，统计分类\r\n    jobs.forEach(job => {\r\n      const title = job.title.toLowerCase();\r\n      const description = job.description ? job.description.toLowerCase() : '';\r\n      const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\r\n      const searchText = `${title} ${description} ${skills}`;\r\n      \r\n      // 检查每个分类规则\r\n      Object.entries(categoryRules).forEach(([categoryId, categoryInfo]) => {\r\n        const hasMatch = categoryInfo.keywords.some(keyword => \r\n          searchText.includes(keyword.toLowerCase())\r\n        );\r\n        \r\n        if (hasMatch) {\r\n          categoryInfo.count++;\r\n        }\r\n      });\r\n    });\r\n    \r\n    // 只返回有工作的分类，并按数量排序\r\n    const validCategories = Object.entries(categoryRules)\r\n      .filter(([_, categoryInfo]) => categoryInfo.count > 0)\r\n      .sort(([, a], [, b]) => b.count - a.count)\r\n      .slice(0, 8) // 最多显示8个分类\r\n      .map(([categoryId, categoryInfo]) => ({\r\n        id: categoryId,\r\n        label: `${categoryInfo.label} (${categoryInfo.count})`,\r\n        count: categoryInfo.count\r\n      }));\r\n    \r\n    console.log('生成的动态分类:', validCategories);\r\n    return validCategories;\r\n  };\r\n\r\n  // 过滤函数：保留所有工作，不再限制为设计工作\r\n  const filterJobs = (jobs) => {\r\n    console.log('处理工作数据，总数:', jobs.length);\r\n    return jobs; // 返回所有工作\r\n  };\r\n\r\n  useEffect(() => {\r\n    // 获取真实的远程工作数据\r\n    const fetchJobs = async () => {\r\n      setLoading(true);\r\n      setJobs([]);\r\n      setFilteredJobs([]);\r\n      setPage(0);\r\n      setHasMore(true);\r\n      \r\n      try {\r\n        // 使用更通用的搜索词来获取更多结果\r\n        const designSearchTerms = searchTerm || '';\r\n        \r\n        // 尝试从真实API获取数据\r\n        const result = await jobService.searchRemoteJobs(designSearchTerms, {\r\n          ...activeFilters,\r\n          category: 'design' // 如果API支持分类，优先获取设计类工作\r\n        });\r\n        \r\n        // 先查看所有返回的工作，然后再过滤\r\n        console.log('All jobs returned from API:', result.jobs.length);\r\n        console.log('Sample jobs:', result.jobs.slice(0, 5).map(job => ({\r\n          title: job.title,\r\n          company: job.company,\r\n          description: job.description ? job.description.substring(0, 100) + '...' : 'No description',\r\n          skills: job.skills\r\n        })));\r\n        \r\n        // 过滤出只包含UX designer和Product designer的工作\r\n        const designJobs = filterDesignJobs(result.jobs);\r\n        \r\n        // 如果没有找到设计工作，显示所有工作\r\n        if (designJobs.length === 0) {\r\n          console.log('No design jobs found, showing all jobs');\r\n          setJobs(result.jobs);\r\n          setFilteredJobs(result.jobs);\r\n        } else {\r\n          console.log(`Found ${designJobs.length} design jobs out of ${result.jobs.length} total jobs`);\r\n          setJobs(designJobs);\r\n          setFilteredJobs(designJobs);\r\n        }\r\n        setDataSources(result.sources || []);\r\n        \r\n        // 如果返回的工作数量小于预期，可能没有更多数据了\r\n        if (result.jobs.length < 20) {\r\n          setHasMore(false);\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to fetch jobs from API, using mock data:', error);\r\n        // 如果API失败，使用模拟数据作为后备，但仍然过滤设计工作\r\n        const filteredMockJobs = filterDesignJobs(mockJobs);\r\n        setJobs(filteredMockJobs);\r\n        setFilteredJobs(filteredMockJobs);\r\n        setDataSources(['Mock Data']);\r\n        setHasMore(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchJobs();\r\n  }, [searchTerm, JSON.stringify(activeFilters)]);\r\n\r\n  const handleSearch = (term) => {\r\n    // 更新搜索词状态\r\n    if (term !== undefined && term !== null) {\r\n      setSearchTerm(term);\r\n    }\r\n    \r\n    // 设置搜索状态为正在搜索\r\n    setSearching(true);\r\n    \r\n    // 使用setTimeout模拟搜索延迟，提供更好的用户体验\r\n    setTimeout(() => {\r\n      // 重新应用筛选器，包括新的搜索词\r\n      applyFiltersToJobs(activeFilters);\r\n      setSearching(false);\r\n    }, 300); // 300ms的延迟，提供更流畅的搜索体验\r\n  };\r\n\r\n  const handleFilter = (filterIds) => {\r\n    console.log('筛选器更新:', filterIds);\r\n    \r\n    // 更新活动筛选器状态\r\n    setActiveFilters(filterIds);\r\n    \r\n    // 立即应用筛选到当前已加载的工作\r\n    applyFiltersToJobs(filterIds);\r\n  };\r\n\r\n  // 应用筛选器到工作列表\r\n  const applyFiltersToJobs = (filterIds) => {\r\n    let results = [...jobs];\r\n    \r\n    // 首先按搜索词过滤\r\n    if (searchTerm) {\r\n      results = results.filter(job => \r\n        job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.location.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        (job.description && job.description.toLowerCase().includes(searchTerm.toLowerCase()))\r\n      );\r\n    }\r\n    \r\n    // 然后按职位类型筛选\r\n    if (filterIds && filterIds.length > 0) {\r\n      results = results.filter(job => {\r\n        const title = job.title.toLowerCase();\r\n        const description = job.description ? job.description.toLowerCase() : '';\r\n        const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\r\n        \r\n        // 检查每个激活的筛选器\r\n        return filterIds.some(filterId => {\r\n          switch (filterId) {\r\n            case 'ux-designer':\r\n              return title.includes('ux') || \r\n                     title.includes('user experience') || \r\n                     description.includes('ux') || \r\n                     description.includes('user experience') ||\r\n                     skills.includes('ux') ||\r\n                     skills.includes('user experience');\r\n            \r\n            case 'ui-designer':\r\n              return title.includes('ui') || \r\n                     title.includes('user interface') || \r\n                     description.includes('ui') || \r\n                     description.includes('user interface') ||\r\n                     skills.includes('ui') ||\r\n                     skills.includes('user interface');\r\n            \r\n            case 'product-designer':\r\n              return title.includes('product') || \r\n                     title.includes('product design') || \r\n                     description.includes('product design') ||\r\n                     skills.includes('product design') ||\r\n                     (title.includes('product') && (title.includes('design') || description.includes('design')));\r\n            \r\n            case 'visual-identity':\r\n              return title.includes('visual') || \r\n                     title.includes('graphic') || \r\n                     title.includes('brand') ||\r\n                     title.includes('identity') ||\r\n                     description.includes('visual') || \r\n                     description.includes('graphic') ||\r\n                     description.includes('brand') ||\r\n                     skills.includes('visual') ||\r\n                     skills.includes('graphic design');\r\n            \r\n            default:\r\n              return false;\r\n          }\r\n        });\r\n      });\r\n    }\r\n    \r\n    console.log(`筛选结果: ${results.length} 个工作 (原始: ${jobs.length}, 筛选器: ${filterIds})`);\r\n    setFilteredJobs(results);\r\n  };\r\n  \r\n\r\n\r\n  // 处理工作卡片点击\r\n  const handleJobSelect = (job) => {\r\n    setSelectedJob(job);\r\n    setIsDrawerOpen(true);\r\n  };\r\n  \r\n  // 处理关闭抽屉\r\n  const handleCloseDrawer = () => {\r\n    setIsDrawerOpen(false);\r\n  };\r\n  \r\n  // 处理申请工作\r\n  const handleApplyJob = (jobId) => {\r\n    console.log(`Applying for job: ${jobId}`);\r\n    \r\n    // 直接使用selectedJob，而不是从jobs数组中查找\r\n    const job = selectedJob;\r\n    \r\n    if (!job) {\r\n      console.error('No selected job found');\r\n      alert('无法找到选中的工作');\r\n      return;\r\n    }\r\n    \r\n    // 详细记录工作对象，帮助调试\r\n    console.log('Selected job details:', {\r\n      id: job.id,\r\n      title: job.title,\r\n      company: job.company,\r\n      source: job.source,\r\n      sourceUrl: job.sourceUrl,\r\n      sourceId: job.sourceId\r\n    });\r\n    \r\n    // 创建一个隐藏的a标签来打开链接，这样可以避免弹出窗口被阻止\r\n    const openLink = (url) => {\r\n      console.log(`Attempting to open URL: ${url}`);\r\n      \r\n      // 创建一个隐藏的a标签\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.target = '_blank';\r\n      link.rel = 'noopener noreferrer';\r\n      \r\n      // 添加到文档中并触发点击\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // 清理\r\n      setTimeout(() => {\r\n        document.body.removeChild(link);\r\n      }, 100);\r\n    };\r\n    \r\n    let finalUrl = '';\r\n    \r\n    if (job.sourceUrl) {\r\n      // 如果有源URL，使用它\r\n      console.log(`Using source URL: ${job.sourceUrl}`);\r\n      finalUrl = job.sourceUrl;\r\n    } else if (job.source) {\r\n      // 如果没有源URL但有来源信息，尝试构建URL\r\n      switch (job.source) {\r\n        case 'LinkedIn':\r\n          finalUrl = `https://www.linkedin.com/jobs/view/${job.sourceId || job.id}`;\r\n          break;\r\n        case 'WeWorkRemotely':\r\n          // 尝试使用更可能正确的WeWorkRemotely URL格式\r\n          if (job.company && job.title) {\r\n            // 将公司名和职位名转换为URL友好的格式\r\n            const companySlug = job.company.toLowerCase().replace(/[^a-z0-9]+/g, '-');\r\n            const titleSlug = job.title.toLowerCase().replace(/[^a-z0-9]+/g, '-');\r\n            finalUrl = `https://weworkremotely.com/remote-jobs/${companySlug}-${titleSlug}`;\r\n          } else {\r\n            finalUrl = `https://weworkremotely.com/remote-jobs/${job.sourceId || job.id}`;\r\n          }\r\n          break;\r\n        case 'RemoteOK':\r\n          finalUrl = `https://remoteok.io/l/${job.sourceId || job.id}`;\r\n          break;\r\n        default:\r\n          // 如果无法确定来源，尝试使用通用搜索\r\n          finalUrl = `https://www.google.com/search?q=${encodeURIComponent(`${job.title} ${job.company} job`)}`;\r\n      }\r\n      console.log(`Constructed URL: ${finalUrl}`);\r\n    } else {\r\n      // 如果没有任何链接信息，显示提示并使用Google搜索\r\n      console.error('No source URL or source information found for job:', job);\r\n      finalUrl = `https://www.google.com/search?q=${encodeURIComponent(`${job.title} ${job.company} job`)}`;\r\n      alert('无法找到精确的工作链接，将使用Google搜索');\r\n    }\r\n    \r\n    // 尝试打开链接\r\n    if (finalUrl) {\r\n      openLink(finalUrl);\r\n    } else {\r\n      alert('无法生成有效的工作链接');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`job-feed ${isDrawerOpen ? 'drawer-open' : ''}`}>\r\n      <Header \r\n        onSearch={(term) => handleSearch(term)} \r\n        onFilter={handleFilter}\r\n      />\r\n      \r\n      <div className=\"job-list-container\">\r\n        {loading ? (\r\n          <div className=\"loading-container\">\r\n            <div className=\"loading-spinner\"></div>\r\n            <p>Loading jobs...</p>\r\n          </div>\r\n        ) : searching ? (\r\n          <div className=\"searching-container\">\r\n            <div className=\"loading-spinner small\"></div>\r\n            <p>Searching...</p>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            {filteredJobs.length > 0 ? (\r\n              <>\r\n                <div className=\"results-count\">\r\n                  找到 <span className=\"count-highlight\">{filteredJobs.length}</span> 个工作机会\r\n                </div>\r\n                <div className=\"data-sources\">\r\n                  数据来源: {dataSources.join(', ')}\r\n                </div>\r\n                <div className=\"job-list\">\r\n                  {filteredJobs.map((job, index) => {\r\n                    if (filteredJobs.length === index + 1) {\r\n                      return (\r\n                        <div ref={lastJobElementRef} key={job.id}>\r\n                          <JobCard \r\n                            job={job} \r\n                            onSelect={() => handleJobSelect(job)}\r\n                          />\r\n                        </div>\r\n                      );\r\n                    } else {\r\n                      return (\r\n                        <JobCard \r\n                          key={job.id} \r\n                          job={job} \r\n                          onSelect={() => handleJobSelect(job)}\r\n                        />\r\n                      );\r\n                    }\r\n                  })}\r\n                  {loadingMore && (\r\n                    <div className=\"loading-more\">\r\n                      <div className=\"loading-spinner small\"></div>\r\n                      <p>加载更多工作...</p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <div className=\"no-jobs-found\">\r\n                <h3>No jobs found</h3>\r\n                <p>Try adjusting your search filters</p>\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n      </div>\r\n      \r\n      <JobDetailsDrawer \r\n        job={selectedJob}\r\n        isOpen={isDrawerOpen}\r\n        onClose={handleCloseDrawer}\r\n        onApply={handleApplyJob}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobFeed;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}