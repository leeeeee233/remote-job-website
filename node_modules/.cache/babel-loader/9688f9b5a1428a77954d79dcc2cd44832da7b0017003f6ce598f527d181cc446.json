{"ast":null,"code":"// 真实的工作数据服务\n// 使用公开的API和RSS feed获取远程工作数据\nimport { LinkedInApiAdapter, WWRApiAdapter, CacheService } from './api';\n\n// 导入RemoteOK API服务\nimport { fetchRemoteOKJobs } from './realJobAPI';\n\n// 创建API适配器实例\nconst linkedInAdapter = new LinkedInApiAdapter({\n  clientId: process.env.REACT_APP_LINKEDIN_CLIENT_ID,\n  clientSecret: process.env.REACT_APP_LINKEDIN_CLIENT_SECRET\n});\nconst wwrAdapter = new WWRApiAdapter({\n  apiKey: process.env.REACT_APP_RSS2JSON_API_KEY\n});\n\n// 创建缓存服务实例\nconst cacheService = new CacheService({\n  memoryTTL: 5 * 60 * 1000,\n  // 5分钟\n  storageTTL: 60 * 60 * 1000 // 1小时\n});\n\n// WeWorkRemotely API 集成\nexport const fetchWeWorkRemotelyJobs = async (searchTerm = '', category = '') => {\n  try {\n    // 生成缓存键\n    const cacheKey = CacheService.generateKey('wwr_jobs', {\n      searchTerm,\n      category\n    });\n\n    // 检查缓存\n    const cachedData = await cacheService.get(cacheKey);\n    if (cachedData) {\n      console.log('Using cached WeWorkRemotely jobs');\n      return cachedData;\n    }\n\n    // 调用API\n    console.log('Fetching WeWorkRemotely jobs with search term:', searchTerm, 'and category:', category);\n    const result = await wwrAdapter.searchJobs(searchTerm, category);\n\n    // 缓存结果\n    await cacheService.set(cacheKey, result.jobs);\n    return result.jobs;\n  } catch (error) {\n    console.error('Error fetching WeWorkRemotely jobs:', error);\n    // 返回空数组\n    return [];\n  }\n};\n\n// LinkedIn Jobs API 集成\nexport const fetchLinkedInJobs = async (searchTerm = '', location = 'remote') => {\n  try {\n    // 生成缓存键\n    const cacheKey = CacheService.generateKey('linkedin_jobs', {\n      searchTerm,\n      location\n    });\n\n    // 检查缓存\n    const cachedData = await cacheService.get(cacheKey);\n    if (cachedData) {\n      console.log('Using cached LinkedIn jobs');\n      return cachedData;\n    }\n\n    // 调用API\n    console.log('Fetching LinkedIn jobs with search term:', searchTerm, 'and location:', location);\n    const result = await linkedInAdapter.searchJobs(searchTerm, {\n      location\n    }, 0);\n\n    // 缓存结果\n    await cacheService.set(cacheKey, result.jobs);\n    return result.jobs;\n  } catch (error) {\n    console.error('Error fetching LinkedIn jobs:', error);\n    // 返回空数组\n    return [];\n  }\n};\n\n// 通用的远程工作搜索函数\nexport const searchRemoteJobs = async (searchTerm = '', filters = {}) => {\n  try {\n    // 生成缓存键\n    const cacheKey = CacheService.generateKey('all_jobs', {\n      searchTerm,\n      ...filters\n    });\n\n    // 检查缓存\n    const cachedData = await cacheService.get(cacheKey);\n    if (cachedData) {\n      console.log('Using cached remote jobs');\n      return cachedData;\n    }\n\n    // 并行调用多个API\n    const [weWorkJobs, linkedInJobs, remoteOKJobs] = await Promise.allSettled([fetchWeWorkRemotelyJobs(searchTerm, filters.category), fetchLinkedInJobs(searchTerm, filters.location || 'remote'), fetchRemoteOKJobs()]);\n\n    // 合并结果\n    const allJobs = [...(weWorkJobs.status === 'fulfilled' ? weWorkJobs.value : []), ...(linkedInJobs.status === 'fulfilled' ? linkedInJobs.value : []), ...(remoteOKJobs.status === 'fulfilled' ? remoteOKJobs : [])];\n\n    // 如果所有API都失败，返回空结果\n    if (allJobs.length === 0) {\n      console.error('Failed to fetch jobs from any source');\n      return {\n        jobs: [],\n        total: 0,\n        sources: []\n      };\n    }\n\n    // 按搜索词过滤\n    let filteredJobs = allJobs;\n    if (searchTerm) {\n      filteredJobs = allJobs.filter(job => job.title.toLowerCase().includes(searchTerm.toLowerCase()) || job.company.toLowerCase().includes(searchTerm.toLowerCase()) || job.description.toLowerCase().includes(searchTerm.toLowerCase()) || job.skills && job.skills.some(skill => skill.toLowerCase().includes(searchTerm.toLowerCase())));\n    }\n\n    // 应用其他筛选条件\n    if (filters.jobType) {\n      filteredJobs = filteredJobs.filter(job => job.type.toLowerCase() === filters.jobType.toLowerCase());\n    }\n    if (filters.salary) {\n      const {\n        min,\n        max\n      } = filters.salary;\n      filteredJobs = filteredJobs.filter(job => (!min || job.salary >= min) && (!max || job.salary <= max));\n    }\n\n    // 去重和排序\n    const uniqueJobs = removeDuplicateJobs(filteredJobs);\n    const sortedJobs = sortJobs(uniqueJobs, filters.sort || 'date');\n\n    // 获取数据来源\n    const sources = [...new Set(sortedJobs.map(job => job.source))];\n    const result = {\n      jobs: sortedJobs,\n      total: sortedJobs.length,\n      sources\n    };\n\n    // 缓存结果\n    await cacheService.set(cacheKey, result);\n    return result;\n  } catch (error) {\n    console.error('Error searching remote jobs:', error);\n    // 返回空结果\n    return {\n      jobs: [],\n      total: 0,\n      sources: []\n    };\n  }\n};\n\n// 获取工作详情\nexport const getJobDetails = async (jobId, source) => {\n  try {\n    // 生成缓存键\n    const cacheKey = `job_detail_${jobId}`;\n\n    // 检查缓存\n    const cachedData = await cacheService.get(cacheKey);\n    if (cachedData) {\n      console.log('Using cached job details');\n      return cachedData;\n    }\n\n    // 根据来源选择适当的API适配器\n    let jobDetail;\n    switch (source) {\n      case 'LinkedIn':\n        jobDetail = await linkedInAdapter.getJobDetails(jobId);\n        break;\n      case 'WeWorkRemotely':\n        jobDetail = await wwrAdapter.getJobDetails(jobId);\n        break;\n      default:\n        // 如果没有指定来源或来源不支持，尝试从所有适配器获取\n        const results = await Promise.allSettled([linkedInAdapter.getJobDetails(jobId), wwrAdapter.getJobDetails(jobId)]);\n\n        // 使用第一个成功的结果\n        const successResult = results.find(result => result.status === 'fulfilled');\n        if (successResult) {\n          jobDetail = successResult.value;\n        } else {\n          throw new Error(`Job with ID ${jobId} not found`);\n        }\n    }\n\n    // 缓存结果\n    await cacheService.set(cacheKey, jobDetail);\n    return jobDetail;\n  } catch (error) {\n    console.error(`Error fetching job details for ${jobId}:`, error);\n    throw error;\n  }\n};\n\n// 刷新缓存\nexport const refreshCache = async () => {\n  try {\n    await cacheService.clear();\n    console.log('Job cache cleared');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error clearing job cache:', error);\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};\n\n// 获取缓存统计\nexport const getCacheStats = () => {\n  return cacheService.getStats();\n};\n\n// 去重函数\nconst removeDuplicateJobs = jobs => {\n  const seen = new Set();\n  return jobs.filter(job => {\n    // 使用职位名称和公司名称作为唯一标识\n    const key = `${job.title}-${job.company}`.toLowerCase().replace(/\\s+/g, '');\n    if (seen.has(key)) {\n      return false;\n    }\n    seen.add(key);\n    return true;\n  });\n};\n\n// 排序函数\nconst sortJobs = (jobs, sortBy = 'date') => {\n  const sortedJobs = [...jobs];\n  switch (sortBy) {\n    case 'date':\n      // 按发布日期排序（最新的在前面）\n      return sortedJobs.sort((a, b) => {\n        // 优先显示\"Today\"\n        if (a.postedDate === 'Today' && b.postedDate !== 'Today') return -1;\n        if (a.postedDate !== 'Today' && b.postedDate === 'Today') return 1;\n\n        // 优先显示\"Yesterday\"\n        if (a.postedDate === 'Yesterday' && b.postedDate !== 'Yesterday' && b.postedDate !== 'Today') return -1;\n        if (a.postedDate !== 'Yesterday' && a.postedDate !== 'Today' && b.postedDate === 'Yesterday') return 1;\n\n        // 比较天数\n        const getNumericDays = dateStr => {\n          if (dateStr.includes('days ago')) {\n            return parseInt(dateStr.split(' ')[0], 10);\n          }\n          if (dateStr.includes('weeks ago')) {\n            return parseInt(dateStr.split(' ')[0], 10) * 7;\n          }\n          if (dateStr.includes('months ago')) {\n            return parseInt(dateStr.split(' ')[0], 10) * 30;\n          }\n          return 0;\n        };\n        return getNumericDays(a.postedDate) - getNumericDays(b.postedDate);\n      });\n    case 'salary':\n      // 按薪资排序（高的在前面）\n      return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\n    case 'company':\n      // 按公司名称排序\n      return sortedJobs.sort((a, b) => a.company.localeCompare(b.company));\n    case 'title':\n      // 按职位名称排序\n      return sortedJobs.sort((a, b) => a.title.localeCompare(b.title));\n    default:\n      return sortedJobs;\n  }\n};\nexport default {\n  searchRemoteJobs,\n  fetchWeWorkRemotelyJobs,\n  fetchLinkedInJobs,\n  getJobDetails,\n  refreshCache,\n  getCacheStats\n};","map":{"version":3,"names":["LinkedInApiAdapter","WWRApiAdapter","CacheService","fetchRemoteOKJobs","linkedInAdapter","clientId","process","env","REACT_APP_LINKEDIN_CLIENT_ID","clientSecret","REACT_APP_LINKEDIN_CLIENT_SECRET","wwrAdapter","apiKey","REACT_APP_RSS2JSON_API_KEY","cacheService","memoryTTL","storageTTL","fetchWeWorkRemotelyJobs","searchTerm","category","cacheKey","generateKey","cachedData","get","console","log","result","searchJobs","set","jobs","error","fetchLinkedInJobs","location","searchRemoteJobs","filters","weWorkJobs","linkedInJobs","remoteOKJobs","Promise","allSettled","allJobs","status","value","length","total","sources","filteredJobs","filter","job","title","toLowerCase","includes","company","description","skills","some","skill","jobType","type","salary","min","max","uniqueJobs","removeDuplicateJobs","sortedJobs","sortJobs","sort","Set","map","source","getJobDetails","jobId","jobDetail","results","successResult","find","Error","refreshCache","clear","success","message","getCacheStats","getStats","seen","key","replace","has","add","sortBy","a","b","postedDate","getNumericDays","dateStr","parseInt","split","localeCompare"],"sources":["D:/Kiro/remote-job-website/src/services/jobService.js"],"sourcesContent":["// 真实的工作数据服务\r\n// 使用公开的API和RSS feed获取远程工作数据\r\nimport { \r\n  LinkedInApiAdapter, \r\n  WWRApiAdapter, \r\n  CacheService \r\n} from './api';\r\n\r\n// 导入RemoteOK API服务\r\nimport { fetchRemoteOKJobs } from './realJobAPI';\r\n\r\n// 创建API适配器实例\r\nconst linkedInAdapter = new LinkedInApiAdapter({\r\n  clientId: process.env.REACT_APP_LINKEDIN_CLIENT_ID,\r\n  clientSecret: process.env.REACT_APP_LINKEDIN_CLIENT_SECRET\r\n});\r\n\r\nconst wwrAdapter = new WWRApiAdapter({\r\n  apiKey: process.env.REACT_APP_RSS2JSON_API_KEY\r\n});\r\n\r\n// 创建缓存服务实例\r\nconst cacheService = new CacheService({\r\n  memoryTTL: 5 * 60 * 1000, // 5分钟\r\n  storageTTL: 60 * 60 * 1000 // 1小时\r\n});\r\n\r\n// WeWorkRemotely API 集成\r\nexport const fetchWeWorkRemotelyJobs = async (searchTerm = '', category = '') => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = CacheService.generateKey('wwr_jobs', { searchTerm, category });\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached WeWorkRemotely jobs');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 调用API\r\n    console.log('Fetching WeWorkRemotely jobs with search term:', searchTerm, 'and category:', category);\r\n    const result = await wwrAdapter.searchJobs(searchTerm, category);\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, result.jobs);\r\n    \r\n    return result.jobs;\r\n  } catch (error) {\r\n    console.error('Error fetching WeWorkRemotely jobs:', error);\r\n    // 返回空数组\r\n    return [];\r\n  }\r\n};\r\n\r\n// LinkedIn Jobs API 集成\r\nexport const fetchLinkedInJobs = async (searchTerm = '', location = 'remote') => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = CacheService.generateKey('linkedin_jobs', { searchTerm, location });\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached LinkedIn jobs');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 调用API\r\n    console.log('Fetching LinkedIn jobs with search term:', searchTerm, 'and location:', location);\r\n    const result = await linkedInAdapter.searchJobs(searchTerm, { location }, 0);\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, result.jobs);\r\n    \r\n    return result.jobs;\r\n  } catch (error) {\r\n    console.error('Error fetching LinkedIn jobs:', error);\r\n    // 返回空数组\r\n    return [];\r\n  }\r\n};\r\n\r\n// 通用的远程工作搜索函数\r\nexport const searchRemoteJobs = async (searchTerm = '', filters = {}) => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = CacheService.generateKey('all_jobs', { searchTerm, ...filters });\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached remote jobs');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 并行调用多个API\r\n    const [weWorkJobs, linkedInJobs, remoteOKJobs] = await Promise.allSettled([\r\n      fetchWeWorkRemotelyJobs(searchTerm, filters.category),\r\n      fetchLinkedInJobs(searchTerm, filters.location || 'remote'),\r\n      fetchRemoteOKJobs()\r\n    ]);\r\n    \r\n    // 合并结果\r\n    const allJobs = [\r\n      ...(weWorkJobs.status === 'fulfilled' ? weWorkJobs.value : []),\r\n      ...(linkedInJobs.status === 'fulfilled' ? linkedInJobs.value : []),\r\n      ...(remoteOKJobs.status === 'fulfilled' ? remoteOKJobs : [])\r\n    ];\r\n    \r\n    // 如果所有API都失败，返回空结果\r\n    if (allJobs.length === 0) {\r\n      console.error('Failed to fetch jobs from any source');\r\n      return {\r\n        jobs: [],\r\n        total: 0,\r\n        sources: []\r\n      };\r\n    }\r\n    \r\n    // 按搜索词过滤\r\n    let filteredJobs = allJobs;\r\n    if (searchTerm) {\r\n      filteredJobs = allJobs.filter(job => \r\n        job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        job.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        (job.skills && job.skills.some(skill => \r\n          skill.toLowerCase().includes(searchTerm.toLowerCase())\r\n        ))\r\n      );\r\n    }\r\n    \r\n    // 应用其他筛选条件\r\n    if (filters.jobType) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.type.toLowerCase() === filters.jobType.toLowerCase()\r\n      );\r\n    }\r\n    \r\n    if (filters.salary) {\r\n      const { min, max } = filters.salary;\r\n      filteredJobs = filteredJobs.filter(job => \r\n        (!min || job.salary >= min) && (!max || job.salary <= max)\r\n      );\r\n    }\r\n    \r\n    // 去重和排序\r\n    const uniqueJobs = removeDuplicateJobs(filteredJobs);\r\n    const sortedJobs = sortJobs(uniqueJobs, filters.sort || 'date');\r\n    \r\n    // 获取数据来源\r\n    const sources = [...new Set(sortedJobs.map(job => job.source))];\r\n    \r\n    const result = {\r\n      jobs: sortedJobs,\r\n      total: sortedJobs.length,\r\n      sources\r\n    };\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, result);\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('Error searching remote jobs:', error);\r\n    // 返回空结果\r\n    return {\r\n      jobs: [],\r\n      total: 0,\r\n      sources: []\r\n    };\r\n  }\r\n};\r\n\r\n// 获取工作详情\r\nexport const getJobDetails = async (jobId, source) => {\r\n  try {\r\n    // 生成缓存键\r\n    const cacheKey = `job_detail_${jobId}`;\r\n    \r\n    // 检查缓存\r\n    const cachedData = await cacheService.get(cacheKey);\r\n    if (cachedData) {\r\n      console.log('Using cached job details');\r\n      return cachedData;\r\n    }\r\n    \r\n    // 根据来源选择适当的API适配器\r\n    let jobDetail;\r\n    switch (source) {\r\n      case 'LinkedIn':\r\n        jobDetail = await linkedInAdapter.getJobDetails(jobId);\r\n        break;\r\n      case 'WeWorkRemotely':\r\n        jobDetail = await wwrAdapter.getJobDetails(jobId);\r\n        break;\r\n      default:\r\n        // 如果没有指定来源或来源不支持，尝试从所有适配器获取\r\n        const results = await Promise.allSettled([\r\n          linkedInAdapter.getJobDetails(jobId),\r\n          wwrAdapter.getJobDetails(jobId)\r\n        ]);\r\n        \r\n        // 使用第一个成功的结果\r\n        const successResult = results.find(result => result.status === 'fulfilled');\r\n        if (successResult) {\r\n          jobDetail = successResult.value;\r\n        } else {\r\n          throw new Error(`Job with ID ${jobId} not found`);\r\n        }\r\n    }\r\n    \r\n    // 缓存结果\r\n    await cacheService.set(cacheKey, jobDetail);\r\n    \r\n    return jobDetail;\r\n  } catch (error) {\r\n    console.error(`Error fetching job details for ${jobId}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 刷新缓存\r\nexport const refreshCache = async () => {\r\n  try {\r\n    await cacheService.clear();\r\n    console.log('Job cache cleared');\r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Error clearing job cache:', error);\r\n    return { success: false, error: error.message };\r\n  }\r\n};\r\n\r\n// 获取缓存统计\r\nexport const getCacheStats = () => {\r\n  return cacheService.getStats();\r\n};\r\n\r\n// 去重函数\r\nconst removeDuplicateJobs = (jobs) => {\r\n  const seen = new Set();\r\n  return jobs.filter(job => {\r\n    // 使用职位名称和公司名称作为唯一标识\r\n    const key = `${job.title}-${job.company}`.toLowerCase().replace(/\\s+/g, '');\r\n    if (seen.has(key)) {\r\n      return false;\r\n    }\r\n    seen.add(key);\r\n    return true;\r\n  });\r\n};\r\n\r\n// 排序函数\r\nconst sortJobs = (jobs, sortBy = 'date') => {\r\n  const sortedJobs = [...jobs];\r\n  \r\n  switch (sortBy) {\r\n    case 'date':\r\n      // 按发布日期排序（最新的在前面）\r\n      return sortedJobs.sort((a, b) => {\r\n        // 优先显示\"Today\"\r\n        if (a.postedDate === 'Today' && b.postedDate !== 'Today') return -1;\r\n        if (a.postedDate !== 'Today' && b.postedDate === 'Today') return 1;\r\n        \r\n        // 优先显示\"Yesterday\"\r\n        if (a.postedDate === 'Yesterday' && b.postedDate !== 'Yesterday' && b.postedDate !== 'Today') return -1;\r\n        if (a.postedDate !== 'Yesterday' && a.postedDate !== 'Today' && b.postedDate === 'Yesterday') return 1;\r\n        \r\n        // 比较天数\r\n        const getNumericDays = (dateStr) => {\r\n          if (dateStr.includes('days ago')) {\r\n            return parseInt(dateStr.split(' ')[0], 10);\r\n          }\r\n          if (dateStr.includes('weeks ago')) {\r\n            return parseInt(dateStr.split(' ')[0], 10) * 7;\r\n          }\r\n          if (dateStr.includes('months ago')) {\r\n            return parseInt(dateStr.split(' ')[0], 10) * 30;\r\n          }\r\n          return 0;\r\n        };\r\n        \r\n        return getNumericDays(a.postedDate) - getNumericDays(b.postedDate);\r\n      });\r\n    \r\n    case 'salary':\r\n      // 按薪资排序（高的在前面）\r\n      return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\r\n    \r\n    case 'company':\r\n      // 按公司名称排序\r\n      return sortedJobs.sort((a, b) => a.company.localeCompare(b.company));\r\n    \r\n    case 'title':\r\n      // 按职位名称排序\r\n      return sortedJobs.sort((a, b) => a.title.localeCompare(b.title));\r\n    \r\n    default:\r\n      return sortedJobs;\r\n  }\r\n};\r\n\r\nexport default {\r\n  searchRemoteJobs,\r\n  fetchWeWorkRemotelyJobs,\r\n  fetchLinkedInJobs,\r\n  getJobDetails,\r\n  refreshCache,\r\n  getCacheStats\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}