{"ast":null,"code":"// 工作去重服务\n// 确保每个工作只出现一次，使用多种策略进行去重\nclass DeduplicationService{constructor(){// 存储已见过的工作的多种标识符\nthis.seenJobIds=new Set();this.seenJobHashes=new Set();this.seenTitleCompanyPairs=new Set();this.seenUrls=new Set();// 相似度阈值\nthis.similarityThreshold=0.85;// 去重统计\nthis.stats={totalProcessed:0,duplicatesRemoved:0,duplicatesByType:{exactId:0,titleCompany:0,similarity:0,url:0}};}/**\r\n   * 对工作列表进行去重\r\n   * @param {Array} jobs - 工作列表\r\n   * @returns {Array} - 去重后的工作列表\r\n   */deduplicateJobs(jobs){if(!Array.isArray(jobs)||jobs.length===0){return[];}console.log(`开始去重处理，输入工作数量: ${jobs.length}`);const uniqueJobs=[];for(const job of jobs){this.stats.totalProcessed++;if(this.isJobDuplicate(job)){this.stats.duplicatesRemoved++;console.log(`发现重复工作: ${job.title} at ${job.company} (来源: ${job.source})`);continue;}// 记录这个工作的各种标识符\nthis.recordJobIdentifiers(job);uniqueJobs.push(job);}console.log(`去重完成，输出工作数量: ${uniqueJobs.length}，移除重复: ${this.stats.duplicatesRemoved}`);return uniqueJobs;}/**\r\n   * 检查工作是否为重复\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否为重复\r\n   */isJobDuplicate(job){// 1. 检查精确ID匹配\nif(job.id&&this.seenJobIds.has(job.id)){this.stats.duplicatesByType.exactId++;return true;}// 2. 检查源URL匹配\nif(job.sourceUrl&&this.seenUrls.has(job.sourceUrl)){this.stats.duplicatesByType.url++;return true;}// 3. 检查标题-公司组合\nconst titleCompanyKey=this.generateTitleCompanyKey(job);if(this.seenTitleCompanyPairs.has(titleCompanyKey)){this.stats.duplicatesByType.titleCompany++;return true;}// 4. 检查工作哈希\nconst jobHash=this.generateJobHash(job);if(this.seenJobHashes.has(jobHash)){this.stats.duplicatesByType.similarity++;return true;}// 5. 检查相似度\nif(this.isSimilarToExistingJob(job)){this.stats.duplicatesByType.similarity++;return true;}return false;}/**\r\n   * 记录工作的各种标识符\r\n   * @param {Object} job - 工作对象\r\n   */recordJobIdentifiers(job){// 记录ID\nif(job.id){this.seenJobIds.add(job.id);}// 记录URL\nif(job.sourceUrl){this.seenUrls.add(job.sourceUrl);}// 记录标题-公司组合\nconst titleCompanyKey=this.generateTitleCompanyKey(job);this.seenTitleCompanyPairs.add(titleCompanyKey);// 记录工作哈希\nconst jobHash=this.generateJobHash(job);this.seenJobHashes.add(jobHash);}/**\r\n   * 生成标题-公司键\r\n   * @param {Object} job - 工作对象\r\n   * @returns {string} - 标准化的键\r\n   */generateTitleCompanyKey(job){const title=this.normalizeString(job.title||'');const company=this.normalizeString(job.company||'');return`${title}|${company}`;}/**\r\n   * 生成工作哈希\r\n   * @param {Object} job - 工作对象\r\n   * @returns {string} - 工作哈希\r\n   */generateJobHash(job){const components=[this.normalizeString(job.title||''),this.normalizeString(job.company||''),this.normalizeString(job.location||''),this.normalizeString(job.type||''),job.source||''];return components.join('|');}/**\r\n   * 标准化字符串\r\n   * @param {string} str - 输入字符串\r\n   * @returns {string} - 标准化后的字符串\r\n   */normalizeString(str){return str.toLowerCase().trim().replace(/\\s+/g,' ').replace(/[^\\w\\s]/g,'').replace(/\\b(inc|ltd|llc|corp|corporation|company|co)\\b/g,'').trim();}/**\r\n   * 检查是否与现有工作相似\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否相似\r\n   */isSimilarToExistingJob(job){const currentJobString=this.generateJobHash(job);for(const existingHash of this.seenJobHashes){const similarity=this.calculateSimilarity(currentJobString,existingHash);if(similarity>this.similarityThreshold){console.log(`发现相似工作 (${Math.round(similarity*100)}% 相似度): ${job.title} at ${job.company}`);return true;}}return false;}/**\r\n   * 计算字符串相似度\r\n   * @param {string} str1 - 字符串1\r\n   * @param {string} str2 - 字符串2\r\n   * @returns {number} - 相似度 (0-1)\r\n   */calculateSimilarity(str1,str2){if(str1===str2)return 1.0;if(str1.length===0||str2.length===0)return 0.0;const longer=str1.length>str2.length?str1:str2;const shorter=str1.length>str2.length?str2:str1;const editDistance=this.levenshteinDistance(longer,shorter);return(longer.length-editDistance)/longer.length;}/**\r\n   * 计算编辑距离\r\n   * @param {string} str1 - 字符串1\r\n   * @param {string} str2 - 字符串2\r\n   * @returns {number} - 编辑距离\r\n   */levenshteinDistance(str1,str2){const matrix=Array(str2.length+1).fill(null).map(()=>Array(str1.length+1).fill(null));for(let i=0;i<=str1.length;i++){matrix[0][i]=i;}for(let j=0;j<=str2.length;j++){matrix[j][0]=j;}for(let j=1;j<=str2.length;j++){for(let i=1;i<=str1.length;i++){const indicator=str1[i-1]===str2[j-1]?0:1;matrix[j][i]=Math.min(matrix[j][i-1]+1,// 插入\nmatrix[j-1][i]+1,// 删除\nmatrix[j-1][i-1]+indicator// 替换\n);}}return matrix[str2.length][str1.length];}/**\r\n   * 批量去重多个来源的工作\r\n   * @param {Object} jobsBySource - 按来源分组的工作\r\n   * @returns {Array} - 去重后的工作列表\r\n   */deduplicateMultipleSources(jobsBySource){console.log('开始多源去重处理');// 按优先级排序来源\nconst sourcePriority=['LinkedIn','RemoteOK','WeWorkRemotely','GitHub Jobs'];const sortedSources=Object.keys(jobsBySource).sort((a,b)=>{const aIndex=sourcePriority.indexOf(a);const bIndex=sourcePriority.indexOf(b);return(aIndex===-1?999:aIndex)-(bIndex===-1?999:bIndex);});const allJobs=[];// 按优先级处理每个来源\nfor(const source of sortedSources){const jobs=jobsBySource[source]||[];console.log(`处理来源 ${source}: ${jobs.length} 个工作`);const uniqueJobsFromSource=this.deduplicateJobs(jobs);allJobs.push(...uniqueJobsFromSource);console.log(`来源 ${source} 去重后: ${uniqueJobsFromSource.length} 个工作`);}console.log(`多源去重完成，总计: ${allJobs.length} 个唯一工作`);return allJobs;}/**\r\n   * 重置去重状态\r\n   */reset(){this.seenJobIds.clear();this.seenJobHashes.clear();this.seenTitleCompanyPairs.clear();this.seenUrls.clear();this.stats={totalProcessed:0,duplicatesRemoved:0,duplicatesByType:{exactId:0,titleCompany:0,similarity:0,url:0}};console.log('去重服务状态已重置');}/**\r\n   * 获取去重统计信息\r\n   * @returns {Object} - 统计信息\r\n   */getStats(){return{...this.stats,duplicateRate:this.stats.totalProcessed>0?(this.stats.duplicatesRemoved/this.stats.totalProcessed*100).toFixed(2)+'%':'0%'};}/**\r\n   * 设置相似度阈值\r\n   * @param {number} threshold - 阈值 (0-1)\r\n   */setSimilarityThreshold(threshold){if(threshold>=0&&threshold<=1){this.similarityThreshold=threshold;console.log(`相似度阈值已设置为: ${threshold}`);}}/**\r\n   * 检查特定工作是否已存在\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否已存在\r\n   */hasJob(job){return this.isJobDuplicate(job);}/**\r\n   * 添加工作到已知列表（不返回，只记录）\r\n   * @param {Object} job - 工作对象\r\n   */addJob(job){if(!this.isJobDuplicate(job)){this.recordJobIdentifiers(job);}}}export default DeduplicationService;","map":{"version":3,"names":["DeduplicationService","constructor","seenJobIds","Set","seenJobHashes","seenTitleCompanyPairs","seenUrls","similarityThreshold","stats","totalProcessed","duplicatesRemoved","duplicatesByType","exactId","titleCompany","similarity","url","deduplicateJobs","jobs","Array","isArray","length","console","log","uniqueJobs","job","isJobDuplicate","title","company","source","recordJobIdentifiers","push","id","has","sourceUrl","titleCompanyKey","generateTitleCompanyKey","jobHash","generateJobHash","isSimilarToExistingJob","add","normalizeString","components","location","type","join","str","toLowerCase","trim","replace","currentJobString","existingHash","calculateSimilarity","Math","round","str1","str2","longer","shorter","editDistance","levenshteinDistance","matrix","fill","map","i","j","indicator","min","deduplicateMultipleSources","jobsBySource","sourcePriority","sortedSources","Object","keys","sort","a","b","aIndex","indexOf","bIndex","allJobs","uniqueJobsFromSource","reset","clear","getStats","duplicateRate","toFixed","setSimilarityThreshold","threshold","hasJob","addJob"],"sources":["D:/Kiro/remote-job-website/src/services/DeduplicationService.js"],"sourcesContent":["// 工作去重服务\r\n// 确保每个工作只出现一次，使用多种策略进行去重\r\n\r\nclass DeduplicationService {\r\n  constructor() {\r\n    // 存储已见过的工作的多种标识符\r\n    this.seenJobIds = new Set();\r\n    this.seenJobHashes = new Set();\r\n    this.seenTitleCompanyPairs = new Set();\r\n    this.seenUrls = new Set();\r\n    \r\n    // 相似度阈值\r\n    this.similarityThreshold = 0.85;\r\n    \r\n    // 去重统计\r\n    this.stats = {\r\n      totalProcessed: 0,\r\n      duplicatesRemoved: 0,\r\n      duplicatesByType: {\r\n        exactId: 0,\r\n        titleCompany: 0,\r\n        similarity: 0,\r\n        url: 0\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 对工作列表进行去重\r\n   * @param {Array} jobs - 工作列表\r\n   * @returns {Array} - 去重后的工作列表\r\n   */\r\n  deduplicateJobs(jobs) {\r\n    if (!Array.isArray(jobs) || jobs.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    console.log(`开始去重处理，输入工作数量: ${jobs.length}`);\r\n    \r\n    const uniqueJobs = [];\r\n    \r\n    for (const job of jobs) {\r\n      this.stats.totalProcessed++;\r\n      \r\n      if (this.isJobDuplicate(job)) {\r\n        this.stats.duplicatesRemoved++;\r\n        console.log(`发现重复工作: ${job.title} at ${job.company} (来源: ${job.source})`);\r\n        continue;\r\n      }\r\n      \r\n      // 记录这个工作的各种标识符\r\n      this.recordJobIdentifiers(job);\r\n      uniqueJobs.push(job);\r\n    }\r\n    \r\n    console.log(`去重完成，输出工作数量: ${uniqueJobs.length}，移除重复: ${this.stats.duplicatesRemoved}`);\r\n    return uniqueJobs;\r\n  }\r\n\r\n  /**\r\n   * 检查工作是否为重复\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否为重复\r\n   */\r\n  isJobDuplicate(job) {\r\n    // 1. 检查精确ID匹配\r\n    if (job.id && this.seenJobIds.has(job.id)) {\r\n      this.stats.duplicatesByType.exactId++;\r\n      return true;\r\n    }\r\n\r\n    // 2. 检查源URL匹配\r\n    if (job.sourceUrl && this.seenUrls.has(job.sourceUrl)) {\r\n      this.stats.duplicatesByType.url++;\r\n      return true;\r\n    }\r\n\r\n    // 3. 检查标题-公司组合\r\n    const titleCompanyKey = this.generateTitleCompanyKey(job);\r\n    if (this.seenTitleCompanyPairs.has(titleCompanyKey)) {\r\n      this.stats.duplicatesByType.titleCompany++;\r\n      return true;\r\n    }\r\n\r\n    // 4. 检查工作哈希\r\n    const jobHash = this.generateJobHash(job);\r\n    if (this.seenJobHashes.has(jobHash)) {\r\n      this.stats.duplicatesByType.similarity++;\r\n      return true;\r\n    }\r\n\r\n    // 5. 检查相似度\r\n    if (this.isSimilarToExistingJob(job)) {\r\n      this.stats.duplicatesByType.similarity++;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 记录工作的各种标识符\r\n   * @param {Object} job - 工作对象\r\n   */\r\n  recordJobIdentifiers(job) {\r\n    // 记录ID\r\n    if (job.id) {\r\n      this.seenJobIds.add(job.id);\r\n    }\r\n\r\n    // 记录URL\r\n    if (job.sourceUrl) {\r\n      this.seenUrls.add(job.sourceUrl);\r\n    }\r\n\r\n    // 记录标题-公司组合\r\n    const titleCompanyKey = this.generateTitleCompanyKey(job);\r\n    this.seenTitleCompanyPairs.add(titleCompanyKey);\r\n\r\n    // 记录工作哈希\r\n    const jobHash = this.generateJobHash(job);\r\n    this.seenJobHashes.add(jobHash);\r\n  }\r\n\r\n  /**\r\n   * 生成标题-公司键\r\n   * @param {Object} job - 工作对象\r\n   * @returns {string} - 标准化的键\r\n   */\r\n  generateTitleCompanyKey(job) {\r\n    const title = this.normalizeString(job.title || '');\r\n    const company = this.normalizeString(job.company || '');\r\n    return `${title}|${company}`;\r\n  }\r\n\r\n  /**\r\n   * 生成工作哈希\r\n   * @param {Object} job - 工作对象\r\n   * @returns {string} - 工作哈希\r\n   */\r\n  generateJobHash(job) {\r\n    const components = [\r\n      this.normalizeString(job.title || ''),\r\n      this.normalizeString(job.company || ''),\r\n      this.normalizeString(job.location || ''),\r\n      this.normalizeString(job.type || ''),\r\n      job.source || ''\r\n    ];\r\n    \r\n    return components.join('|');\r\n  }\r\n\r\n  /**\r\n   * 标准化字符串\r\n   * @param {string} str - 输入字符串\r\n   * @returns {string} - 标准化后的字符串\r\n   */\r\n  normalizeString(str) {\r\n    return str\r\n      .toLowerCase()\r\n      .trim()\r\n      .replace(/\\s+/g, ' ')\r\n      .replace(/[^\\w\\s]/g, '')\r\n      .replace(/\\b(inc|ltd|llc|corp|corporation|company|co)\\b/g, '')\r\n      .trim();\r\n  }\r\n\r\n  /**\r\n   * 检查是否与现有工作相似\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否相似\r\n   */\r\n  isSimilarToExistingJob(job) {\r\n    const currentJobString = this.generateJobHash(job);\r\n    \r\n    for (const existingHash of this.seenJobHashes) {\r\n      const similarity = this.calculateSimilarity(currentJobString, existingHash);\r\n      if (similarity > this.similarityThreshold) {\r\n        console.log(`发现相似工作 (${Math.round(similarity * 100)}% 相似度): ${job.title} at ${job.company}`);\r\n        return true;\r\n      }\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 计算字符串相似度\r\n   * @param {string} str1 - 字符串1\r\n   * @param {string} str2 - 字符串2\r\n   * @returns {number} - 相似度 (0-1)\r\n   */\r\n  calculateSimilarity(str1, str2) {\r\n    if (str1 === str2) return 1.0;\r\n    if (str1.length === 0 || str2.length === 0) return 0.0;\r\n    \r\n    const longer = str1.length > str2.length ? str1 : str2;\r\n    const shorter = str1.length > str2.length ? str2 : str1;\r\n    \r\n    const editDistance = this.levenshteinDistance(longer, shorter);\r\n    return (longer.length - editDistance) / longer.length;\r\n  }\r\n\r\n  /**\r\n   * 计算编辑距离\r\n   * @param {string} str1 - 字符串1\r\n   * @param {string} str2 - 字符串2\r\n   * @returns {number} - 编辑距离\r\n   */\r\n  levenshteinDistance(str1, str2) {\r\n    const matrix = Array(str2.length + 1).fill(null).map(() => Array(str1.length + 1).fill(null));\r\n    \r\n    for (let i = 0; i <= str1.length; i++) {\r\n      matrix[0][i] = i;\r\n    }\r\n    \r\n    for (let j = 0; j <= str2.length; j++) {\r\n      matrix[j][0] = j;\r\n    }\r\n    \r\n    for (let j = 1; j <= str2.length; j++) {\r\n      for (let i = 1; i <= str1.length; i++) {\r\n        const indicator = str1[i - 1] === str2[j - 1] ? 0 : 1;\r\n        matrix[j][i] = Math.min(\r\n          matrix[j][i - 1] + 1,     // 插入\r\n          matrix[j - 1][i] + 1,     // 删除\r\n          matrix[j - 1][i - 1] + indicator  // 替换\r\n        );\r\n      }\r\n    }\r\n    \r\n    return matrix[str2.length][str1.length];\r\n  }\r\n\r\n  /**\r\n   * 批量去重多个来源的工作\r\n   * @param {Object} jobsBySource - 按来源分组的工作\r\n   * @returns {Array} - 去重后的工作列表\r\n   */\r\n  deduplicateMultipleSources(jobsBySource) {\r\n    console.log('开始多源去重处理');\r\n    \r\n    // 按优先级排序来源\r\n    const sourcePriority = ['LinkedIn', 'RemoteOK', 'WeWorkRemotely', 'GitHub Jobs'];\r\n    const sortedSources = Object.keys(jobsBySource).sort((a, b) => {\r\n      const aIndex = sourcePriority.indexOf(a);\r\n      const bIndex = sourcePriority.indexOf(b);\r\n      return (aIndex === -1 ? 999 : aIndex) - (bIndex === -1 ? 999 : bIndex);\r\n    });\r\n    \r\n    const allJobs = [];\r\n    \r\n    // 按优先级处理每个来源\r\n    for (const source of sortedSources) {\r\n      const jobs = jobsBySource[source] || [];\r\n      console.log(`处理来源 ${source}: ${jobs.length} 个工作`);\r\n      \r\n      const uniqueJobsFromSource = this.deduplicateJobs(jobs);\r\n      allJobs.push(...uniqueJobsFromSource);\r\n      \r\n      console.log(`来源 ${source} 去重后: ${uniqueJobsFromSource.length} 个工作`);\r\n    }\r\n    \r\n    console.log(`多源去重完成，总计: ${allJobs.length} 个唯一工作`);\r\n    return allJobs;\r\n  }\r\n\r\n  /**\r\n   * 重置去重状态\r\n   */\r\n  reset() {\r\n    this.seenJobIds.clear();\r\n    this.seenJobHashes.clear();\r\n    this.seenTitleCompanyPairs.clear();\r\n    this.seenUrls.clear();\r\n    \r\n    this.stats = {\r\n      totalProcessed: 0,\r\n      duplicatesRemoved: 0,\r\n      duplicatesByType: {\r\n        exactId: 0,\r\n        titleCompany: 0,\r\n        similarity: 0,\r\n        url: 0\r\n      }\r\n    };\r\n    \r\n    console.log('去重服务状态已重置');\r\n  }\r\n\r\n  /**\r\n   * 获取去重统计信息\r\n   * @returns {Object} - 统计信息\r\n   */\r\n  getStats() {\r\n    return {\r\n      ...this.stats,\r\n      duplicateRate: this.stats.totalProcessed > 0 \r\n        ? (this.stats.duplicatesRemoved / this.stats.totalProcessed * 100).toFixed(2) + '%'\r\n        : '0%'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 设置相似度阈值\r\n   * @param {number} threshold - 阈值 (0-1)\r\n   */\r\n  setSimilarityThreshold(threshold) {\r\n    if (threshold >= 0 && threshold <= 1) {\r\n      this.similarityThreshold = threshold;\r\n      console.log(`相似度阈值已设置为: ${threshold}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 检查特定工作是否已存在\r\n   * @param {Object} job - 工作对象\r\n   * @returns {boolean} - 是否已存在\r\n   */\r\n  hasJob(job) {\r\n    return this.isJobDuplicate(job);\r\n  }\r\n\r\n  /**\r\n   * 添加工作到已知列表（不返回，只记录）\r\n   * @param {Object} job - 工作对象\r\n   */\r\n  addJob(job) {\r\n    if (!this.isJobDuplicate(job)) {\r\n      this.recordJobIdentifiers(job);\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeduplicationService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}