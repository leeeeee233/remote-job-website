{"ast":null,"code":"// 备用工作服务 - 只使用真实数据源\nimport { fetchRealRemoteJobs } from './realJobAPI';\n\n// 简化的工作搜索服务，只使用真实数据\nexport const searchJobsWithFallback = async (searchTerm = '', filters = {}) => {\n  console.log('🔄 开始搜索真实工作数据，搜索词:', searchTerm, '筛选器:', filters);\n  try {\n    // 只从真实API获取数据\n    const result = await fetchRealRemoteJobs(searchTerm, filters);\n    if (result && result.jobs && result.jobs.length > 0) {\n      console.log('✅ 获取了', result.jobs.length, '个真实工作');\n\n      // 应用搜索和筛选\n      const filteredJobs = applySearchAndFilters(result.jobs, searchTerm, filters);\n      return {\n        jobs: filteredJobs,\n        total: filteredJobs.length,\n        sources: getDataSources(filteredJobs),\n        hasMore: false,\n        page: 0,\n        pageSize: filteredJobs.length\n      };\n    } else {\n      console.warn('⚠️ 未获取到任何真实工作数据');\n      return {\n        jobs: [],\n        total: 0,\n        sources: ['No Data Available'],\n        hasMore: false,\n        page: 0,\n        pageSize: 0\n      };\n    }\n  } catch (error) {\n    console.error('❌ 真实数据获取失败:', error);\n\n    // 如果完全失败，返回空结果\n    return {\n      jobs: [],\n      total: 0,\n      sources: ['No Data Available'],\n      hasMore: false,\n      page: 0,\n      pageSize: 0,\n      error: '无法获取工作数据，请稍后重试'\n    };\n  }\n};\n\n// 应用搜索和筛选逻辑\nconst applySearchAndFilters = (jobs, searchTerm, filters) => {\n  let filteredJobs = [...jobs];\n\n  // 搜索筛选\n  if (searchTerm && searchTerm.trim()) {\n    const term = searchTerm.toLowerCase().trim();\n    filteredJobs = filteredJobs.filter(job => {\n      return job.title.toLowerCase().includes(term) || job.company.toLowerCase().includes(term) || job.description.toLowerCase().includes(term) || job.skills && job.skills.some(skill => skill.toLowerCase().includes(term));\n    });\n  }\n\n  // 职位类型筛选\n  if (filters && Array.isArray(filters) && filters.length > 0) {\n    filteredJobs = filteredJobs.filter(job => {\n      return filters.some(filter => matchJobToFilter(job, filter));\n    });\n  }\n\n  // 按相关性和日期排序\n  return sortJobs(filteredJobs, searchTerm);\n};\n\n// 工作与筛选器匹配\nconst matchJobToFilter = (job, filter) => {\n  const title = job.title.toLowerCase();\n  const description = job.description ? job.description.toLowerCase() : '';\n  const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\n  const filterMap = {\n    'frontend-developer': ['frontend', 'front-end', 'react', 'vue', 'angular', 'javascript'],\n    'backend-developer': ['backend', 'back-end', 'api', 'server', 'node', 'python', 'java'],\n    'fullstack-developer': ['full stack', 'fullstack', 'full-stack'],\n    'ux-designer': ['ux designer', 'user experience', 'ux'],\n    'ui-designer': ['ui designer', 'user interface', 'ui'],\n    'product-designer': ['product designer', 'product design'],\n    'data-scientist': ['data scientist', 'machine learning', 'data science'],\n    'devops-engineer': ['devops', 'infrastructure', 'cloud', 'kubernetes'],\n    'mobile-developer': ['mobile', 'ios', 'android', 'react native'],\n    'marketing-specialist': ['marketing', 'content marketing', 'digital marketing'],\n    'project-manager': ['project manager', 'program manager', 'scrum master']\n  };\n  const keywords = filterMap[filter] || [];\n  return keywords.some(keyword => title.includes(keyword) || description.includes(keyword) || skills.includes(keyword));\n};\n\n// 工作排序\nconst sortJobs = (jobs, searchTerm) => {\n  return jobs.sort((a, b) => {\n    // 如果有搜索词，按相关性排序\n    if (searchTerm) {\n      const scoreA = calculateRelevanceScore(a, searchTerm);\n      const scoreB = calculateRelevanceScore(b, searchTerm);\n      if (scoreA !== scoreB) return scoreB - scoreA;\n    }\n\n    // 按发布日期排序\n    const dateOrder = ['Today', 'Yesterday', '2 days ago', '3 days ago', '4 days ago', '5 days ago', '6 days ago', '1 week ago'];\n    const indexA = dateOrder.indexOf(a.postedDate);\n    const indexB = dateOrder.indexOf(b.postedDate);\n    if (indexA !== -1 && indexB !== -1) {\n      return indexA - indexB;\n    }\n    if (indexA !== -1) return -1;\n    if (indexB !== -1) return 1;\n    return 0;\n  });\n};\n\n// 计算相关性分数\nconst calculateRelevanceScore = (job, searchTerm) => {\n  if (!searchTerm) return 0;\n  const term = searchTerm.toLowerCase();\n  let score = 0;\n\n  // 标题匹配（最高权重）\n  if (job.title.toLowerCase().includes(term)) score += 10;\n\n  // 公司匹配\n  if (job.company.toLowerCase().includes(term)) score += 5;\n\n  // 技能匹配\n  if (job.skills && job.skills.some(skill => skill.toLowerCase().includes(term))) score += 8;\n\n  // 描述匹配\n  if (job.description && job.description.toLowerCase().includes(term)) score += 3;\n  return score;\n};\n\n// 获取数据源\nconst getDataSources = jobs => {\n  const sources = [...new Set(jobs.map(job => job.source || 'Unknown Source'))];\n  return sources;\n};\nexport default {\n  searchJobsWithFallback\n};","map":{"version":3,"names":["fetchRealRemoteJobs","searchJobsWithFallback","searchTerm","filters","console","log","result","jobs","length","filteredJobs","applySearchAndFilters","total","sources","getDataSources","hasMore","page","pageSize","warn","error","trim","term","toLowerCase","filter","job","title","includes","company","description","skills","some","skill","Array","isArray","matchJobToFilter","sortJobs","join","filterMap","keywords","keyword","sort","a","b","scoreA","calculateRelevanceScore","scoreB","dateOrder","indexA","indexOf","postedDate","indexB","score","Set","map","source"],"sources":["D:/Kiro/remote-job-website/src/services/fallbackJobService.js"],"sourcesContent":["// 备用工作服务 - 只使用真实数据源\r\nimport { fetchRealRemoteJobs } from './realJobAPI';\r\n\r\n// 简化的工作搜索服务，只使用真实数据\r\nexport const searchJobsWithFallback = async (searchTerm = '', filters = {}) => {\r\n  console.log('🔄 开始搜索真实工作数据，搜索词:', searchTerm, '筛选器:', filters);\r\n  \r\n  try {\r\n    // 只从真实API获取数据\r\n    const result = await fetchRealRemoteJobs(searchTerm, filters);\r\n    \r\n    if (result && result.jobs && result.jobs.length > 0) {\r\n      console.log('✅ 获取了', result.jobs.length, '个真实工作');\r\n      \r\n      // 应用搜索和筛选\r\n      const filteredJobs = applySearchAndFilters(result.jobs, searchTerm, filters);\r\n      \r\n      return {\r\n        jobs: filteredJobs,\r\n        total: filteredJobs.length,\r\n        sources: getDataSources(filteredJobs),\r\n        hasMore: false,\r\n        page: 0,\r\n        pageSize: filteredJobs.length\r\n      };\r\n    } else {\r\n      console.warn('⚠️ 未获取到任何真实工作数据');\r\n      return {\r\n        jobs: [],\r\n        total: 0,\r\n        sources: ['No Data Available'],\r\n        hasMore: false,\r\n        page: 0,\r\n        pageSize: 0\r\n      };\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('❌ 真实数据获取失败:', error);\r\n    \r\n    // 如果完全失败，返回空结果\r\n    return {\r\n      jobs: [],\r\n      total: 0,\r\n      sources: ['No Data Available'],\r\n      hasMore: false,\r\n      page: 0,\r\n      pageSize: 0,\r\n      error: '无法获取工作数据，请稍后重试'\r\n    };\r\n  }\r\n};\r\n\r\n// 应用搜索和筛选逻辑\r\nconst applySearchAndFilters = (jobs, searchTerm, filters) => {\r\n  let filteredJobs = [...jobs];\r\n  \r\n  // 搜索筛选\r\n  if (searchTerm && searchTerm.trim()) {\r\n    const term = searchTerm.toLowerCase().trim();\r\n    filteredJobs = filteredJobs.filter(job => {\r\n      return (\r\n        job.title.toLowerCase().includes(term) ||\r\n        job.company.toLowerCase().includes(term) ||\r\n        job.description.toLowerCase().includes(term) ||\r\n        (job.skills && job.skills.some(skill => skill.toLowerCase().includes(term)))\r\n      );\r\n    });\r\n  }\r\n  \r\n  // 职位类型筛选\r\n  if (filters && Array.isArray(filters) && filters.length > 0) {\r\n    filteredJobs = filteredJobs.filter(job => {\r\n      return filters.some(filter => matchJobToFilter(job, filter));\r\n    });\r\n  }\r\n  \r\n  // 按相关性和日期排序\r\n  return sortJobs(filteredJobs, searchTerm);\r\n};\r\n\r\n// 工作与筛选器匹配\r\nconst matchJobToFilter = (job, filter) => {\r\n  const title = job.title.toLowerCase();\r\n  const description = job.description ? job.description.toLowerCase() : '';\r\n  const skills = job.skills ? job.skills.join(' ').toLowerCase() : '';\r\n  \r\n  const filterMap = {\r\n    'frontend-developer': ['frontend', 'front-end', 'react', 'vue', 'angular', 'javascript'],\r\n    'backend-developer': ['backend', 'back-end', 'api', 'server', 'node', 'python', 'java'],\r\n    'fullstack-developer': ['full stack', 'fullstack', 'full-stack'],\r\n    'ux-designer': ['ux designer', 'user experience', 'ux'],\r\n    'ui-designer': ['ui designer', 'user interface', 'ui'],\r\n    'product-designer': ['product designer', 'product design'],\r\n    'data-scientist': ['data scientist', 'machine learning', 'data science'],\r\n    'devops-engineer': ['devops', 'infrastructure', 'cloud', 'kubernetes'],\r\n    'mobile-developer': ['mobile', 'ios', 'android', 'react native'],\r\n    'marketing-specialist': ['marketing', 'content marketing', 'digital marketing'],\r\n    'project-manager': ['project manager', 'program manager', 'scrum master']\r\n  };\r\n  \r\n  const keywords = filterMap[filter] || [];\r\n  return keywords.some(keyword => \r\n    title.includes(keyword) || description.includes(keyword) || skills.includes(keyword)\r\n  );\r\n};\r\n\r\n// 工作排序\r\nconst sortJobs = (jobs, searchTerm) => {\r\n  return jobs.sort((a, b) => {\r\n    // 如果有搜索词，按相关性排序\r\n    if (searchTerm) {\r\n      const scoreA = calculateRelevanceScore(a, searchTerm);\r\n      const scoreB = calculateRelevanceScore(b, searchTerm);\r\n      if (scoreA !== scoreB) return scoreB - scoreA;\r\n    }\r\n    \r\n    // 按发布日期排序\r\n    const dateOrder = ['Today', 'Yesterday', '2 days ago', '3 days ago', '4 days ago', '5 days ago', '6 days ago', '1 week ago'];\r\n    const indexA = dateOrder.indexOf(a.postedDate);\r\n    const indexB = dateOrder.indexOf(b.postedDate);\r\n    \r\n    if (indexA !== -1 && indexB !== -1) {\r\n      return indexA - indexB;\r\n    }\r\n    if (indexA !== -1) return -1;\r\n    if (indexB !== -1) return 1;\r\n    \r\n    return 0;\r\n  });\r\n};\r\n\r\n// 计算相关性分数\r\nconst calculateRelevanceScore = (job, searchTerm) => {\r\n  if (!searchTerm) return 0;\r\n  \r\n  const term = searchTerm.toLowerCase();\r\n  let score = 0;\r\n  \r\n  // 标题匹配（最高权重）\r\n  if (job.title.toLowerCase().includes(term)) score += 10;\r\n  \r\n  // 公司匹配\r\n  if (job.company.toLowerCase().includes(term)) score += 5;\r\n  \r\n  // 技能匹配\r\n  if (job.skills && job.skills.some(skill => skill.toLowerCase().includes(term))) score += 8;\r\n  \r\n  // 描述匹配\r\n  if (job.description && job.description.toLowerCase().includes(term)) score += 3;\r\n  \r\n  return score;\r\n};\r\n\r\n// 获取数据源\r\nconst getDataSources = (jobs) => {\r\n  const sources = [...new Set(jobs.map(job => job.source || 'Unknown Source'))];\r\n  return sources;\r\n};\r\n\r\nexport default {\r\n  searchJobsWithFallback\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}