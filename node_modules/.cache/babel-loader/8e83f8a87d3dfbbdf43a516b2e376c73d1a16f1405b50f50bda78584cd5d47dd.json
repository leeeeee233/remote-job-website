{"ast":null,"code":"// 实时工作数据刷新服务\nimport{fetchRealRemoteJobs,fetchRemoteOKJobs,fetchWeWorkRemotelyJobs}from'./realJobAPI';import{mockJobs}from'./mockData';class RealTimeJobService{constructor(){this.jobs=[];this.lastUpdate=null;this.updateInterval=null;this.listeners=new Set();this.isUpdating=false;this.updateFrequency=5*60*1000;// 5分钟更新一次\nthis.sources=[];this.stats={totalUpdates:0,successfulUpdates:0,failedUpdates:0,lastError:null};}// 开始实时更新\nstartRealTimeUpdates(){console.log('🚀 启动实时工作数据更新服务');// 立即执行一次更新\nthis.updateJobs();// 设置定期更新\nthis.updateInterval=setInterval(()=>{this.updateJobs();},this.updateFrequency);return this;}// 停止实时更新\nstopRealTimeUpdates(){console.log('⏹️ 停止实时工作数据更新服务');if(this.updateInterval){clearInterval(this.updateInterval);this.updateInterval=null;}return this;}// 手动触发更新\nasync forceUpdate(){console.log('🔄 手动触发工作数据更新');return await this.updateJobs(true);}// 更新工作数据\nasync updateJobs(){let force=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(this.isUpdating&&!force){console.log('⏳ 更新正在进行中，跳过此次更新');return;}this.isUpdating=true;this.stats.totalUpdates++;try{console.log('🔄 开始获取最新工作数据...');// 并行调用多个数据源\nconst dataPromises=[this.fetchFromRemoteOK(),this.fetchFromWeWorkRemotely(),this.fetchMockData()];const results=await Promise.allSettled(dataPromises);// 合并所有成功的结果\nlet newJobs=[];let activeSources=[];results.forEach((result,index)=>{if(result.status==='fulfilled'&&result.value.jobs.length>0){newJobs=[...newJobs,...result.value.jobs];activeSources.push(result.value.source);console.log(`✅ ${result.value.source}: ${result.value.jobs.length} 个工作`);}else{var _result$reason;const sources=['RemoteOK','WeWorkRemotely','Mock Data'];console.warn(`❌ ${sources[index]} 获取失败:`,(_result$reason=result.reason)===null||_result$reason===void 0?void 0:_result$reason.message);}});// 去重处理\nconst uniqueJobs=this.deduplicateJobs(newJobs);// 添加时间戳和新工作标记\nconst jobsWithTimestamp=uniqueJobs.map(job=>({...job,fetchedAt:new Date().toISOString(),isNew:this.isNewJob(job)}));// 更新内部状态\nthis.jobs=jobsWithTimestamp;this.sources=activeSources;this.lastUpdate=new Date();this.stats.successfulUpdates++;this.stats.lastError=null;console.log(`✅ 数据更新完成: ${uniqueJobs.length} 个唯一工作`);console.log(`📊 数据源: ${activeSources.join(', ')}`);// 通知所有监听器\nthis.notifyListeners({jobs:this.jobs,sources:this.sources,lastUpdate:this.lastUpdate,stats:this.getStats()});return{success:true,jobs:this.jobs,sources:this.sources,count:this.jobs.length};}catch(error){console.error('❌ 工作数据更新失败:',error);this.stats.failedUpdates++;this.stats.lastError=error.message;// 如果完全失败，至少返回模拟数据\nif(this.jobs.length===0){this.jobs=mockJobs.map(job=>({...job,fetchedAt:new Date().toISOString(),isNew:false}));this.sources=['Mock Data'];}return{success:false,error:error.message,jobs:this.jobs,sources:this.sources};}finally{this.isUpdating=false;}}// 从RemoteOK获取数据\nasync fetchFromRemoteOK(){try{const jobs=await fetchRemoteOKJobs();return{jobs:jobs.map(job=>({...job,dataSource:'RemoteOK'})),source:'RemoteOK'};}catch(error){throw new Error(`RemoteOK API 失败: ${error.message}`);}}// 从WeWorkRemotely获取数据\nasync fetchFromWeWorkRemotely(){try{const jobs=await fetchWeWorkRemotelyJobs();return{jobs:jobs.map(job=>({...job,dataSource:'WeWorkRemotely'})),source:'WeWorkRemotely'};}catch(error){throw new Error(`WeWorkRemotely API 失败: ${error.message}`);}}// 获取模拟数据作为备用\nasync fetchMockData(){return{jobs:mockJobs.map(job=>({...job,dataSource:'Mock Data',fetchedAt:new Date().toISOString()})),source:'Mock Data'};}// 去重处理\ndeduplicateJobs(jobs){const seen=new Map();const uniqueJobs=[];for(const job of jobs){// 创建唯一标识符\nconst key=`${job.title.toLowerCase().trim()}-${job.company.toLowerCase().trim()}`;if(!seen.has(key)){seen.set(key,true);uniqueJobs.push(job);}else{console.log(`🔄 去重: ${job.title} @ ${job.company}`);}}return uniqueJobs;}// 检查是否为新工作\nisNewJob(job){// 简单的新工作检测：发布时间为今天\nreturn job.postedDate==='Today';}// 搜索工作\nsearchJobs(){let searchTerm=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';let filters=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let filteredJobs=[...this.jobs];// 搜索词过滤\nif(searchTerm&&searchTerm.trim()){const term=searchTerm.toLowerCase().trim();filteredJobs=filteredJobs.filter(job=>{return job.title.toLowerCase().includes(term)||job.company.toLowerCase().includes(term)||job.description.toLowerCase().includes(term)||job.skills&&job.skills.some(skill=>skill.toLowerCase().includes(term));});}// 应用筛选器\nif(filters.jobType){filteredJobs=filteredJobs.filter(job=>job.type&&job.type.toLowerCase()===filters.jobType.toLowerCase());}if(filters.team){filteredJobs=filteredJobs.filter(job=>job.team&&job.team.toLowerCase()===filters.team.toLowerCase());}if(filters.salary){const{min,max}=filters.salary;filteredJobs=filteredJobs.filter(job=>(!min||job.salary>=min)&&(!max||job.salary<=max));}// 排序\nfilteredJobs=this.sortJobs(filteredJobs,filters.sortBy||'date');return{jobs:filteredJobs,total:filteredJobs.length,sources:this.sources,lastUpdate:this.lastUpdate,hasMore:false};}// 排序工作\nsortJobs(jobs){let sortBy=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'date';const sortedJobs=[...jobs];switch(sortBy){case'date':return sortedJobs.sort((a,b)=>{// 新工作优先\nif(a.isNew&&!b.isNew)return-1;if(!a.isNew&&b.isNew)return 1;// 按发布日期排序\nconst dateOrder=['Today','Yesterday','2 days ago','3 days ago','1 week ago'];const indexA=dateOrder.indexOf(a.postedDate);const indexB=dateOrder.indexOf(b.postedDate);if(indexA!==-1&&indexB!==-1)return indexA-indexB;if(indexA!==-1)return-1;if(indexB!==-1)return 1;return 0;});case'salary':return sortedJobs.sort((a,b)=>(b.salary||0)-(a.salary||0));case'company':return sortedJobs.sort((a,b)=>a.company.localeCompare(b.company));default:return sortedJobs;}}// 添加数据更新监听器\naddUpdateListener(callback){this.listeners.add(callback);return()=>this.listeners.delete(callback);}// 通知所有监听器\nnotifyListeners(data){this.listeners.forEach(callback=>{try{callback(data);}catch(error){console.error('监听器回调错误:',error);}});}// 获取统计信息\ngetStats(){return{...this.stats,totalJobs:this.jobs.length,newJobs:this.jobs.filter(job=>job.isNew).length,sources:this.sources,lastUpdate:this.lastUpdate,isUpdating:this.isUpdating,updateFrequency:this.updateFrequency};}// 设置更新频率\nsetUpdateFrequency(minutes){this.updateFrequency=minutes*60*1000;// 如果正在运行，重新启动定时器\nif(this.updateInterval){this.stopRealTimeUpdates();this.startRealTimeUpdates();}console.log(`⏰ 更新频率设置为 ${minutes} 分钟`);}// 获取当前工作数据\ngetCurrentJobs(){return{jobs:this.jobs,sources:this.sources,lastUpdate:this.lastUpdate,stats:this.getStats()};}}// 创建全局实例\nconst realTimeJobService=new RealTimeJobService();export default realTimeJobService;","map":{"version":3,"names":["fetchRealRemoteJobs","fetchRemoteOKJobs","fetchWeWorkRemotelyJobs","mockJobs","RealTimeJobService","constructor","jobs","lastUpdate","updateInterval","listeners","Set","isUpdating","updateFrequency","sources","stats","totalUpdates","successfulUpdates","failedUpdates","lastError","startRealTimeUpdates","console","log","updateJobs","setInterval","stopRealTimeUpdates","clearInterval","forceUpdate","force","arguments","length","undefined","dataPromises","fetchFromRemoteOK","fetchFromWeWorkRemotely","fetchMockData","results","Promise","allSettled","newJobs","activeSources","forEach","result","index","status","value","push","source","_result$reason","warn","reason","message","uniqueJobs","deduplicateJobs","jobsWithTimestamp","map","job","fetchedAt","Date","toISOString","isNew","isNewJob","join","notifyListeners","getStats","success","count","error","dataSource","Error","seen","Map","key","title","toLowerCase","trim","company","has","set","postedDate","searchJobs","searchTerm","filters","filteredJobs","term","filter","includes","description","skills","some","skill","jobType","type","team","salary","min","max","sortJobs","sortBy","total","hasMore","sortedJobs","sort","a","b","dateOrder","indexA","indexOf","indexB","localeCompare","addUpdateListener","callback","add","delete","data","totalJobs","setUpdateFrequency","minutes","getCurrentJobs","realTimeJobService"],"sources":["D:/Kiro/remote-job-website/src/services/RealTimeJobService.js"],"sourcesContent":["// 实时工作数据刷新服务\r\nimport { fetchRealRemoteJobs, fetchRemoteOKJobs, fetchWeWorkRemotelyJobs } from './realJobAPI';\r\nimport { mockJobs } from './mockData';\r\n\r\nclass RealTimeJobService {\r\n  constructor() {\r\n    this.jobs = [];\r\n    this.lastUpdate = null;\r\n    this.updateInterval = null;\r\n    this.listeners = new Set();\r\n    this.isUpdating = false;\r\n    this.updateFrequency = 5 * 60 * 1000; // 5分钟更新一次\r\n    this.sources = [];\r\n    this.stats = {\r\n      totalUpdates: 0,\r\n      successfulUpdates: 0,\r\n      failedUpdates: 0,\r\n      lastError: null\r\n    };\r\n  }\r\n\r\n  // 开始实时更新\r\n  startRealTimeUpdates() {\r\n    console.log('🚀 启动实时工作数据更新服务');\r\n    \r\n    // 立即执行一次更新\r\n    this.updateJobs();\r\n    \r\n    // 设置定期更新\r\n    this.updateInterval = setInterval(() => {\r\n      this.updateJobs();\r\n    }, this.updateFrequency);\r\n    \r\n    return this;\r\n  }\r\n\r\n  // 停止实时更新\r\n  stopRealTimeUpdates() {\r\n    console.log('⏹️ 停止实时工作数据更新服务');\r\n    \r\n    if (this.updateInterval) {\r\n      clearInterval(this.updateInterval);\r\n      this.updateInterval = null;\r\n    }\r\n    \r\n    return this;\r\n  }\r\n\r\n  // 手动触发更新\r\n  async forceUpdate() {\r\n    console.log('🔄 手动触发工作数据更新');\r\n    return await this.updateJobs(true);\r\n  }\r\n\r\n  // 更新工作数据\r\n  async updateJobs(force = false) {\r\n    if (this.isUpdating && !force) {\r\n      console.log('⏳ 更新正在进行中，跳过此次更新');\r\n      return;\r\n    }\r\n\r\n    this.isUpdating = true;\r\n    this.stats.totalUpdates++;\r\n    \r\n    try {\r\n      console.log('🔄 开始获取最新工作数据...');\r\n      \r\n      // 并行调用多个数据源\r\n      const dataPromises = [\r\n        this.fetchFromRemoteOK(),\r\n        this.fetchFromWeWorkRemotely(),\r\n        this.fetchMockData()\r\n      ];\r\n\r\n      const results = await Promise.allSettled(dataPromises);\r\n      \r\n      // 合并所有成功的结果\r\n      let newJobs = [];\r\n      let activeSources = [];\r\n      \r\n      results.forEach((result, index) => {\r\n        if (result.status === 'fulfilled' && result.value.jobs.length > 0) {\r\n          newJobs = [...newJobs, ...result.value.jobs];\r\n          activeSources.push(result.value.source);\r\n          console.log(`✅ ${result.value.source}: ${result.value.jobs.length} 个工作`);\r\n        } else {\r\n          const sources = ['RemoteOK', 'WeWorkRemotely', 'Mock Data'];\r\n          console.warn(`❌ ${sources[index]} 获取失败:`, result.reason?.message);\r\n        }\r\n      });\r\n\r\n      // 去重处理\r\n      const uniqueJobs = this.deduplicateJobs(newJobs);\r\n      \r\n      // 添加时间戳和新工作标记\r\n      const jobsWithTimestamp = uniqueJobs.map(job => ({\r\n        ...job,\r\n        fetchedAt: new Date().toISOString(),\r\n        isNew: this.isNewJob(job)\r\n      }));\r\n\r\n      // 更新内部状态\r\n      this.jobs = jobsWithTimestamp;\r\n      this.sources = activeSources;\r\n      this.lastUpdate = new Date();\r\n      this.stats.successfulUpdates++;\r\n      this.stats.lastError = null;\r\n\r\n      console.log(`✅ 数据更新完成: ${uniqueJobs.length} 个唯一工作`);\r\n      console.log(`📊 数据源: ${activeSources.join(', ')}`);\r\n\r\n      // 通知所有监听器\r\n      this.notifyListeners({\r\n        jobs: this.jobs,\r\n        sources: this.sources,\r\n        lastUpdate: this.lastUpdate,\r\n        stats: this.getStats()\r\n      });\r\n\r\n      return {\r\n        success: true,\r\n        jobs: this.jobs,\r\n        sources: this.sources,\r\n        count: this.jobs.length\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('❌ 工作数据更新失败:', error);\r\n      this.stats.failedUpdates++;\r\n      this.stats.lastError = error.message;\r\n      \r\n      // 如果完全失败，至少返回模拟数据\r\n      if (this.jobs.length === 0) {\r\n        this.jobs = mockJobs.map(job => ({\r\n          ...job,\r\n          fetchedAt: new Date().toISOString(),\r\n          isNew: false\r\n        }));\r\n        this.sources = ['Mock Data'];\r\n      }\r\n\r\n      return {\r\n        success: false,\r\n        error: error.message,\r\n        jobs: this.jobs,\r\n        sources: this.sources\r\n      };\r\n    } finally {\r\n      this.isUpdating = false;\r\n    }\r\n  }\r\n\r\n  // 从RemoteOK获取数据\r\n  async fetchFromRemoteOK() {\r\n    try {\r\n      const jobs = await fetchRemoteOKJobs();\r\n      return {\r\n        jobs: jobs.map(job => ({ ...job, dataSource: 'RemoteOK' })),\r\n        source: 'RemoteOK'\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`RemoteOK API 失败: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // 从WeWorkRemotely获取数据\r\n  async fetchFromWeWorkRemotely() {\r\n    try {\r\n      const jobs = await fetchWeWorkRemotelyJobs();\r\n      return {\r\n        jobs: jobs.map(job => ({ ...job, dataSource: 'WeWorkRemotely' })),\r\n        source: 'WeWorkRemotely'\r\n      };\r\n    } catch (error) {\r\n      throw new Error(`WeWorkRemotely API 失败: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  // 获取模拟数据作为备用\r\n  async fetchMockData() {\r\n    return {\r\n      jobs: mockJobs.map(job => ({ \r\n        ...job, \r\n        dataSource: 'Mock Data',\r\n        fetchedAt: new Date().toISOString()\r\n      })),\r\n      source: 'Mock Data'\r\n    };\r\n  }\r\n\r\n  // 去重处理\r\n  deduplicateJobs(jobs) {\r\n    const seen = new Map();\r\n    const uniqueJobs = [];\r\n\r\n    for (const job of jobs) {\r\n      // 创建唯一标识符\r\n      const key = `${job.title.toLowerCase().trim()}-${job.company.toLowerCase().trim()}`;\r\n      \r\n      if (!seen.has(key)) {\r\n        seen.set(key, true);\r\n        uniqueJobs.push(job);\r\n      } else {\r\n        console.log(`🔄 去重: ${job.title} @ ${job.company}`);\r\n      }\r\n    }\r\n\r\n    return uniqueJobs;\r\n  }\r\n\r\n  // 检查是否为新工作\r\n  isNewJob(job) {\r\n    // 简单的新工作检测：发布时间为今天\r\n    return job.postedDate === 'Today';\r\n  }\r\n\r\n  // 搜索工作\r\n  searchJobs(searchTerm = '', filters = {}) {\r\n    let filteredJobs = [...this.jobs];\r\n\r\n    // 搜索词过滤\r\n    if (searchTerm && searchTerm.trim()) {\r\n      const term = searchTerm.toLowerCase().trim();\r\n      filteredJobs = filteredJobs.filter(job => {\r\n        return (\r\n          job.title.toLowerCase().includes(term) ||\r\n          job.company.toLowerCase().includes(term) ||\r\n          job.description.toLowerCase().includes(term) ||\r\n          (job.skills && job.skills.some(skill => skill.toLowerCase().includes(term)))\r\n        );\r\n      });\r\n    }\r\n\r\n    // 应用筛选器\r\n    if (filters.jobType) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.type && job.type.toLowerCase() === filters.jobType.toLowerCase()\r\n      );\r\n    }\r\n\r\n    if (filters.team) {\r\n      filteredJobs = filteredJobs.filter(job => \r\n        job.team && job.team.toLowerCase() === filters.team.toLowerCase()\r\n      );\r\n    }\r\n\r\n    if (filters.salary) {\r\n      const { min, max } = filters.salary;\r\n      filteredJobs = filteredJobs.filter(job => \r\n        (!min || job.salary >= min) && (!max || job.salary <= max)\r\n      );\r\n    }\r\n\r\n    // 排序\r\n    filteredJobs = this.sortJobs(filteredJobs, filters.sortBy || 'date');\r\n\r\n    return {\r\n      jobs: filteredJobs,\r\n      total: filteredJobs.length,\r\n      sources: this.sources,\r\n      lastUpdate: this.lastUpdate,\r\n      hasMore: false\r\n    };\r\n  }\r\n\r\n  // 排序工作\r\n  sortJobs(jobs, sortBy = 'date') {\r\n    const sortedJobs = [...jobs];\r\n    \r\n    switch (sortBy) {\r\n      case 'date':\r\n        return sortedJobs.sort((a, b) => {\r\n          // 新工作优先\r\n          if (a.isNew && !b.isNew) return -1;\r\n          if (!a.isNew && b.isNew) return 1;\r\n          \r\n          // 按发布日期排序\r\n          const dateOrder = ['Today', 'Yesterday', '2 days ago', '3 days ago', '1 week ago'];\r\n          const indexA = dateOrder.indexOf(a.postedDate);\r\n          const indexB = dateOrder.indexOf(b.postedDate);\r\n          \r\n          if (indexA !== -1 && indexB !== -1) return indexA - indexB;\r\n          if (indexA !== -1) return -1;\r\n          if (indexB !== -1) return 1;\r\n          \r\n          return 0;\r\n        });\r\n      \r\n      case 'salary':\r\n        return sortedJobs.sort((a, b) => (b.salary || 0) - (a.salary || 0));\r\n      \r\n      case 'company':\r\n        return sortedJobs.sort((a, b) => a.company.localeCompare(b.company));\r\n      \r\n      default:\r\n        return sortedJobs;\r\n    }\r\n  }\r\n\r\n  // 添加数据更新监听器\r\n  addUpdateListener(callback) {\r\n    this.listeners.add(callback);\r\n    return () => this.listeners.delete(callback);\r\n  }\r\n\r\n  // 通知所有监听器\r\n  notifyListeners(data) {\r\n    this.listeners.forEach(callback => {\r\n      try {\r\n        callback(data);\r\n      } catch (error) {\r\n        console.error('监听器回调错误:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  // 获取统计信息\r\n  getStats() {\r\n    return {\r\n      ...this.stats,\r\n      totalJobs: this.jobs.length,\r\n      newJobs: this.jobs.filter(job => job.isNew).length,\r\n      sources: this.sources,\r\n      lastUpdate: this.lastUpdate,\r\n      isUpdating: this.isUpdating,\r\n      updateFrequency: this.updateFrequency\r\n    };\r\n  }\r\n\r\n  // 设置更新频率\r\n  setUpdateFrequency(minutes) {\r\n    this.updateFrequency = minutes * 60 * 1000;\r\n    \r\n    // 如果正在运行，重新启动定时器\r\n    if (this.updateInterval) {\r\n      this.stopRealTimeUpdates();\r\n      this.startRealTimeUpdates();\r\n    }\r\n    \r\n    console.log(`⏰ 更新频率设置为 ${minutes} 分钟`);\r\n  }\r\n\r\n  // 获取当前工作数据\r\n  getCurrentJobs() {\r\n    return {\r\n      jobs: this.jobs,\r\n      sources: this.sources,\r\n      lastUpdate: this.lastUpdate,\r\n      stats: this.getStats()\r\n    };\r\n  }\r\n}\r\n\r\n// 创建全局实例\r\nconst realTimeJobService = new RealTimeJobService();\r\n\r\nexport default realTimeJobService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}