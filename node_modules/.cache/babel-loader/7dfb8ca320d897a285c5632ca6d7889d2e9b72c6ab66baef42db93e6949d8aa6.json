{"ast":null,"code":"// API适配器基类\n// 提供通用的API请求方法和错误处理\nclass ApiAdapter{constructor(baseUrl){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};this.baseUrl=baseUrl;this.options={maxRetries:3,retryDelay:1000,timeout:10000,...options};}/**\r\n   * 发送HTTP请求，支持重试和超时\r\n   * @param {string} endpoint - API端点\r\n   * @param {Object} options - 请求选项\r\n   * @param {number} retryCount - 当前重试次数\r\n   * @returns {Promise<Object>} - 响应数据\r\n   */async request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};let retryCount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;const url=endpoint.startsWith('http')?endpoint:`${this.baseUrl}${endpoint}`;const fetchOptions={...options,headers:{'Content-Type':'application/json',...options.headers},signal:AbortSignal.timeout(this.options.timeout)};try{const response=await fetch(url,fetchOptions);if(!response.ok){throw new Error(`API request failed with status ${response.status}: ${response.statusText}`);}return await response.json();}catch(error){// 处理超时和网络错误\nif(error.name==='AbortError'){console.error(`Request timeout for ${url}`);}else{console.error(`Request error for ${url}:`,error);}// 实现重试逻辑\nif(retryCount<this.options.maxRetries){const delay=this.options.retryDelay*Math.pow(2,retryCount);console.log(`Retrying request to ${url} in ${delay}ms (${retryCount+1}/${this.options.maxRetries})`);await new Promise(resolve=>setTimeout(resolve,delay));return this.request(endpoint,options,retryCount+1);}throw error;}}/**\r\n   * 处理API错误\r\n   * @param {Error} error - 错误对象\r\n   * @param {string} source - 错误来源\r\n   * @returns {Object} - 标准化的错误对象\r\n   */handleError(error,source){const errorInfo={message:error.message||'Unknown error occurred',source:source,timestamp:new Date().toISOString(),isRetryable:this.isRetryableError(error)};console.error(`API Error [${source}]:`,errorInfo);return errorInfo;}/**\r\n   * 判断错误是否可重试\r\n   * @param {Error} error - 错误对象\r\n   * @returns {boolean} - 是否可重试\r\n   */isRetryableError(error){// 网络错误、超时和服务器错误通常是可重试的\nif(error.name==='AbortError')return true;if(error.message&&error.message.includes('network'))return true;// 检查HTTP状态码\nif(error.status){// 5xx错误通常是服务器问题，可以重试\nreturn error.status>=500&&error.status<600;}return false;}/**\r\n   * 将API特定的工作数据转换为统一格式\r\n   * 子类需要实现此方法\r\n   * @param {Object} apiJob - API返回的工作数据\r\n   * @returns {Object} - 统一格式的工作数据\r\n   */transformJob(apiJob){throw new Error('transformJob method must be implemented by subclass');}/**\r\n   * 将API特定的工作详情转换为统一格式\r\n   * 子类需要实现此方法\r\n   * @param {Object} apiJobDetail - API返回的工作详情\r\n   * @returns {Object} - 统一格式的工作详情\r\n   */transformJobDetail(apiJobDetail){throw new Error('transformJobDetail method must be implemented by subclass');}}export default ApiAdapter;","map":{"version":3,"names":["ApiAdapter","constructor","baseUrl","options","arguments","length","undefined","maxRetries","retryDelay","timeout","request","endpoint","retryCount","url","startsWith","fetchOptions","headers","signal","AbortSignal","response","fetch","ok","Error","status","statusText","json","error","name","console","delay","Math","pow","log","Promise","resolve","setTimeout","handleError","source","errorInfo","message","timestamp","Date","toISOString","isRetryable","isRetryableError","includes","transformJob","apiJob","transformJobDetail","apiJobDetail"],"sources":["D:/Kiro/remote-job-website/src/services/api/ApiAdapter.js"],"sourcesContent":["// API适配器基类\r\n// 提供通用的API请求方法和错误处理\r\n\r\nclass ApiAdapter {\r\n  constructor(baseUrl, options = {}) {\r\n    this.baseUrl = baseUrl;\r\n    this.options = {\r\n      maxRetries: 3,\r\n      retryDelay: 1000,\r\n      timeout: 10000,\r\n      ...options\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 发送HTTP请求，支持重试和超时\r\n   * @param {string} endpoint - API端点\r\n   * @param {Object} options - 请求选项\r\n   * @param {number} retryCount - 当前重试次数\r\n   * @returns {Promise<Object>} - 响应数据\r\n   */\r\n  async request(endpoint, options = {}, retryCount = 0) {\r\n    const url = endpoint.startsWith('http') ? endpoint : `${this.baseUrl}${endpoint}`;\r\n    \r\n    const fetchOptions = {\r\n      ...options,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers\r\n      },\r\n      signal: AbortSignal.timeout(this.options.timeout)\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, fetchOptions);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`API request failed with status ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      return await response.json();\r\n    } catch (error) {\r\n      // 处理超时和网络错误\r\n      if (error.name === 'AbortError') {\r\n        console.error(`Request timeout for ${url}`);\r\n      } else {\r\n        console.error(`Request error for ${url}:`, error);\r\n      }\r\n      \r\n      // 实现重试逻辑\r\n      if (retryCount < this.options.maxRetries) {\r\n        const delay = this.options.retryDelay * Math.pow(2, retryCount);\r\n        console.log(`Retrying request to ${url} in ${delay}ms (${retryCount + 1}/${this.options.maxRetries})`);\r\n        \r\n        await new Promise(resolve => setTimeout(resolve, delay));\r\n        return this.request(endpoint, options, retryCount + 1);\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 处理API错误\r\n   * @param {Error} error - 错误对象\r\n   * @param {string} source - 错误来源\r\n   * @returns {Object} - 标准化的错误对象\r\n   */\r\n  handleError(error, source) {\r\n    const errorInfo = {\r\n      message: error.message || 'Unknown error occurred',\r\n      source: source,\r\n      timestamp: new Date().toISOString(),\r\n      isRetryable: this.isRetryableError(error)\r\n    };\r\n    \r\n    console.error(`API Error [${source}]:`, errorInfo);\r\n    \r\n    return errorInfo;\r\n  }\r\n\r\n  /**\r\n   * 判断错误是否可重试\r\n   * @param {Error} error - 错误对象\r\n   * @returns {boolean} - 是否可重试\r\n   */\r\n  isRetryableError(error) {\r\n    // 网络错误、超时和服务器错误通常是可重试的\r\n    if (error.name === 'AbortError') return true;\r\n    if (error.message && error.message.includes('network')) return true;\r\n    \r\n    // 检查HTTP状态码\r\n    if (error.status) {\r\n      // 5xx错误通常是服务器问题，可以重试\r\n      return error.status >= 500 && error.status < 600;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * 将API特定的工作数据转换为统一格式\r\n   * 子类需要实现此方法\r\n   * @param {Object} apiJob - API返回的工作数据\r\n   * @returns {Object} - 统一格式的工作数据\r\n   */\r\n  transformJob(apiJob) {\r\n    throw new Error('transformJob method must be implemented by subclass');\r\n  }\r\n\r\n  /**\r\n   * 将API特定的工作详情转换为统一格式\r\n   * 子类需要实现此方法\r\n   * @param {Object} apiJobDetail - API返回的工作详情\r\n   * @returns {Object} - 统一格式的工作详情\r\n   */\r\n  transformJobDetail(apiJobDetail) {\r\n    throw new Error('transformJobDetail method must be implemented by subclass');\r\n  }\r\n}\r\n\r\nexport default ApiAdapter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}