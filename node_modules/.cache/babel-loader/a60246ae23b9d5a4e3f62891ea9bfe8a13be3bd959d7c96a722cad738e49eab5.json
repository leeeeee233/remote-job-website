{"ast":null,"code":"// API响应转换器\n// 将不同API的响应格式转换为统一的工作数据模型\n\n/**\r\n * 统一的工作数据模型\r\n * @typedef {Object} JobInfo\r\n * @property {string} id - 工作ID\r\n * @property {string} title - 职位名称\r\n * @property {string} company - 公司名称\r\n * @property {string} companyLogo - 公司logo URL\r\n * @property {string} location - 工作地点\r\n * @property {string} type - 工作类型（全职、兼职等）\r\n * @property {number} salary - 估算薪资（千美元/年）\r\n * @property {string} team - 团队类型（前端、后端等）\r\n * @property {string} postedDate - 发布日期（相对时间）\r\n * @property {number} views - 浏览次数\r\n * @property {number} applicants - 申请人数\r\n * @property {string} description - 工作描述\r\n * @property {string[]} skills - 所需技能\r\n * @property {string} source - 数据来源\r\n * @property {string} sourceUrl - 原始工作链接\r\n * @property {string} sourceId - 来源系统中的ID\r\n */\n\n/**\r\n * 统一的工作详情模型\r\n * @typedef {Object} JobDetail\r\n * @property {string[]} minimumQualifications - 最低资格要求\r\n * @property {string[]} preferredQualifications - 优先资格要求\r\n * @property {string} aboutJob - 关于工作的详细描述\r\n * @property {string} companyInfo - 公司信息\r\n * @property {string[]} benefits - 福利待遇\r\n * @property {string} applicationUrl - 申请链接\r\n */\n\n/**\r\n * 格式化发布日期为相对时间\r\n * @param {string} dateString - 日期字符串\r\n * @returns {string} - 格式化后的相对时间\r\n */\nexport const formatRelativeDate = dateString => {\n  if (!dateString) return 'Recently';\n  const date = new Date(dateString);\n  const now = new Date();\n  const diffTime = Math.abs(now - date);\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  if (diffDays === 0) return 'Today';\n  if (diffDays === 1) return 'Yesterday';\n  if (diffDays <= 7) return `${diffDays} days ago`;\n  if (diffDays <= 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\n  return `${Math.ceil(diffDays / 30)} months ago`;\n};\n\n/**\r\n * 从文本中提取技能\r\n * @param {string} text - 文本内容\r\n * @returns {string[]} - 提取的技能列表\r\n */\nexport const extractSkills = text => {\n  const commonSkills = ['JavaScript', 'Python', 'React', 'Node.js', 'TypeScript', 'Angular', 'Vue.js', 'Java', 'C#', '.NET', 'MongoDB', 'PostgreSQL', 'MySQL', 'AWS', 'Azure', 'Docker', 'Kubernetes', 'CI/CD', 'DevOps', 'Git', 'Linux', 'Figma', 'Sketch', 'Adobe XD', 'UI/UX', 'CSS', 'HTML', 'REST API', 'GraphQL'];\n  if (!text || typeof text !== 'string') {\n    return ['Remote Work'];\n  }\n  const foundSkills = commonSkills.filter(skill => text.toLowerCase().includes(skill.toLowerCase()));\n  return foundSkills.length > 0 ? foundSkills.slice(0, 5) : ['Remote Work'];\n};\n\n/**\r\n * 从职位名称中提取团队类型\r\n * @param {string} title - 职位名称\r\n * @returns {string} - 团队类型\r\n */\nexport const extractTeam = title => {\n  if (!title || typeof title !== 'string') {\n    return 'Engineering';\n  }\n  const teams = {\n    'Frontend': ['Frontend', 'Front-end', 'Front End', 'UI', 'React', 'Angular', 'Vue', 'JavaScript'],\n    'UX/UI': ['UX', 'UI', 'User Experience', 'User Interface', 'Designer', 'Design'],\n    'Backend': ['Backend', 'Back-end', 'Back End', 'API', 'Server', 'Java', 'Python', 'Ruby', 'PHP', 'Node'],\n    'Full Stack': ['Full Stack', 'Fullstack', 'Full-stack'],\n    'DevOps': ['DevOps', 'SRE', 'Infrastructure', 'Cloud', 'AWS', 'Azure', 'GCP', 'Kubernetes', 'Docker'],\n    'Mobile': ['Mobile', 'iOS', 'Android', 'React Native', 'Flutter', 'Swift', 'Kotlin'],\n    'Data': ['Data', 'Analytics', 'Machine Learning', 'AI', 'ML', 'Data Science', 'Big Data'],\n    'Product': ['Product', 'PM', 'Product Manager', 'Product Owner'],\n    'QA': ['QA', 'Test', 'Testing', 'Quality'],\n    'Security': ['Security', 'Cyber', 'InfoSec']\n  };\n  for (const [team, keywords] of Object.entries(teams)) {\n    if (keywords.some(keyword => title.includes(keyword))) {\n      return team;\n    }\n  }\n  return 'Engineering';\n};\n\n/**\r\n * 估算职位薪资\r\n * @param {string} title - 职位名称\r\n * @returns {number} - 估算薪资（千美元/年）\r\n */\nexport const estimateSalary = title => {\n  if (!title || typeof title !== 'string') {\n    return 100;\n  }\n\n  // 基于职位名称估算薪资范围\n  const seniorKeywords = ['Senior', 'Sr', 'Lead', 'Principal', 'Staff', 'Architect'];\n  const midKeywords = ['II', '2', 'Mid', 'Intermediate'];\n  const juniorKeywords = ['Junior', 'Jr', 'Entry', 'Associate', 'Intern'];\n  const isSenior = seniorKeywords.some(key => title.includes(key));\n  const isMid = midKeywords.some(key => title.includes(key));\n  const isJunior = juniorKeywords.some(key => title.includes(key));\n\n  // 基础薪资范围\n  let baseSalary;\n  if (title.includes('Manager') || title.includes('Director')) {\n    baseSalary = 130;\n  } else if (title.includes('Architect') || title.includes('Principal')) {\n    baseSalary = 140;\n  } else if (title.includes('DevOps') || title.includes('SRE')) {\n    baseSalary = 125;\n  } else if (title.includes('Data') || title.includes('Machine Learning')) {\n    baseSalary = 110;\n  } else if (title.includes('UI') || title.includes('UX') || title.includes('Design')) {\n    baseSalary = 115;\n  } else if (title.includes('Mobile') || title.includes('iOS') || title.includes('Android')) {\n    baseSalary = 120;\n  } else {\n    baseSalary = 100;\n  }\n\n  // 根据级别调整薪资\n  if (isSenior) {\n    return baseSalary + 20;\n  } else if (isMid) {\n    return baseSalary;\n  } else if (isJunior) {\n    return baseSalary - 30;\n  } else {\n    return baseSalary;\n  }\n};\n\n/**\r\n * 生成随机的浏览量和申请人数\r\n * @returns {Object} - 包含views和applicants的对象\r\n */\nexport const generateRandomStats = () => {\n  return {\n    views: Math.floor(Math.random() * 500) + 50,\n    applicants: Math.floor(Math.random() * 50) + 5\n  };\n};\n\n/**\r\n * 从HTML描述中提取纯文本\r\n * @param {string} html - HTML描述\r\n * @returns {string} - 提取的纯文本\r\n */\nexport const extractTextFromHtml = html => {\n  if (!html || typeof html !== 'string') {\n    return '';\n  }\n\n  // 创建临时DOM元素\n  const tempDiv = document.createElement('div');\n  tempDiv.innerHTML = html;\n\n  // 获取纯文本\n  return tempDiv.textContent || tempDiv.innerText || '';\n};\n\n/**\r\n * 从描述中提取资格要求\r\n * @param {string} description - 工作描述\r\n * @returns {Object} - 包含最低和优先资格要求的对象\r\n */\nexport const extractQualifications = description => {\n  if (!description || typeof description !== 'string') {\n    return {\n      minimumQualifications: [],\n      preferredQualifications: []\n    };\n  }\n  const minimumSections = ['requirements', 'qualifications', 'what you need', 'what we require', 'minimum qualifications', 'basic qualifications', 'required skills'];\n  const preferredSections = ['preferred', 'bonus', 'nice to have', 'desired', 'plus', 'preferred qualifications', 'additional skills'];\n  const lines = description.split('\\n');\n  const minimumQualifications = [];\n  const preferredQualifications = [];\n  let currentSection = null;\n  for (const line of lines) {\n    const lowerLine = line.toLowerCase();\n\n    // 检查是否是最低要求部分\n    if (minimumSections.some(section => lowerLine.includes(section))) {\n      currentSection = 'minimum';\n      continue;\n    }\n\n    // 检查是否是优先要求部分\n    if (preferredSections.some(section => lowerLine.includes(section))) {\n      currentSection = 'preferred';\n      continue;\n    }\n\n    // 如果是列表项，添加到相应部分\n    if (line.trim().startsWith('•') || line.trim().startsWith('-') || line.trim().match(/^\\d+\\./)) {\n      const item = line.trim().replace(/^[•\\-\\d.]+\\s*/, '');\n      if (item && currentSection === 'minimum') {\n        minimumQualifications.push(item);\n      } else if (item && currentSection === 'preferred') {\n        preferredQualifications.push(item);\n      }\n    }\n  }\n  return {\n    minimumQualifications: minimumQualifications.length > 0 ? minimumQualifications : [],\n    preferredQualifications: preferredQualifications.length > 0 ? preferredQualifications : []\n  };\n};\nexport default {\n  formatRelativeDate,\n  extractSkills,\n  extractTeam,\n  estimateSalary,\n  generateRandomStats,\n  extractTextFromHtml,\n  extractQualifications\n};","map":{"version":3,"names":["formatRelativeDate","dateString","date","Date","now","diffTime","Math","abs","diffDays","floor","ceil","extractSkills","text","commonSkills","foundSkills","filter","skill","toLowerCase","includes","length","slice","extractTeam","title","teams","team","keywords","Object","entries","some","keyword","estimateSalary","seniorKeywords","midKeywords","juniorKeywords","isSenior","key","isMid","isJunior","baseSalary","generateRandomStats","views","random","applicants","extractTextFromHtml","html","tempDiv","document","createElement","innerHTML","textContent","innerText","extractQualifications","description","minimumQualifications","preferredQualifications","minimumSections","preferredSections","lines","split","currentSection","line","lowerLine","section","trim","startsWith","match","item","replace","push"],"sources":["D:/Kiro/remote-job-website/src/services/api/responseTransformer.js"],"sourcesContent":["// API响应转换器\r\n// 将不同API的响应格式转换为统一的工作数据模型\r\n\r\n/**\r\n * 统一的工作数据模型\r\n * @typedef {Object} JobInfo\r\n * @property {string} id - 工作ID\r\n * @property {string} title - 职位名称\r\n * @property {string} company - 公司名称\r\n * @property {string} companyLogo - 公司logo URL\r\n * @property {string} location - 工作地点\r\n * @property {string} type - 工作类型（全职、兼职等）\r\n * @property {number} salary - 估算薪资（千美元/年）\r\n * @property {string} team - 团队类型（前端、后端等）\r\n * @property {string} postedDate - 发布日期（相对时间）\r\n * @property {number} views - 浏览次数\r\n * @property {number} applicants - 申请人数\r\n * @property {string} description - 工作描述\r\n * @property {string[]} skills - 所需技能\r\n * @property {string} source - 数据来源\r\n * @property {string} sourceUrl - 原始工作链接\r\n * @property {string} sourceId - 来源系统中的ID\r\n */\r\n\r\n/**\r\n * 统一的工作详情模型\r\n * @typedef {Object} JobDetail\r\n * @property {string[]} minimumQualifications - 最低资格要求\r\n * @property {string[]} preferredQualifications - 优先资格要求\r\n * @property {string} aboutJob - 关于工作的详细描述\r\n * @property {string} companyInfo - 公司信息\r\n * @property {string[]} benefits - 福利待遇\r\n * @property {string} applicationUrl - 申请链接\r\n */\r\n\r\n/**\r\n * 格式化发布日期为相对时间\r\n * @param {string} dateString - 日期字符串\r\n * @returns {string} - 格式化后的相对时间\r\n */\r\nexport const formatRelativeDate = (dateString) => {\r\n  if (!dateString) return 'Recently';\r\n  \r\n  const date = new Date(dateString);\r\n  const now = new Date();\r\n  const diffTime = Math.abs(now - date);\r\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n  if (diffDays === 0) return 'Today';\r\n  if (diffDays === 1) return 'Yesterday';\r\n  if (diffDays <= 7) return `${diffDays} days ago`;\r\n  if (diffDays <= 30) return `${Math.ceil(diffDays / 7)} weeks ago`;\r\n  return `${Math.ceil(diffDays / 30)} months ago`;\r\n};\r\n\r\n/**\r\n * 从文本中提取技能\r\n * @param {string} text - 文本内容\r\n * @returns {string[]} - 提取的技能列表\r\n */\r\nexport const extractSkills = (text) => {\r\n  const commonSkills = [\r\n    'JavaScript', 'Python', 'React', 'Node.js', 'TypeScript', 'Angular', 'Vue.js', 'Java', 'C#', '.NET',\r\n    'MongoDB', 'PostgreSQL', 'MySQL', 'AWS', 'Azure', 'Docker', 'Kubernetes', 'CI/CD', 'DevOps',\r\n    'Git', 'Linux', 'Figma', 'Sketch', 'Adobe XD', 'UI/UX', 'CSS', 'HTML', 'REST API', 'GraphQL'\r\n  ];\r\n\r\n  if (!text || typeof text !== 'string') {\r\n    return ['Remote Work'];\r\n  }\r\n\r\n  const foundSkills = commonSkills.filter(skill => \r\n    text.toLowerCase().includes(skill.toLowerCase())\r\n  );\r\n  \r\n  return foundSkills.length > 0 ? foundSkills.slice(0, 5) : ['Remote Work'];\r\n};\r\n\r\n/**\r\n * 从职位名称中提取团队类型\r\n * @param {string} title - 职位名称\r\n * @returns {string} - 团队类型\r\n */\r\nexport const extractTeam = (title) => {\r\n  if (!title || typeof title !== 'string') {\r\n    return 'Engineering';\r\n  }\r\n\r\n  const teams = {\r\n    'Frontend': ['Frontend', 'Front-end', 'Front End', 'UI', 'React', 'Angular', 'Vue', 'JavaScript'],\r\n    'UX/UI': ['UX', 'UI', 'User Experience', 'User Interface', 'Designer', 'Design'],\r\n    'Backend': ['Backend', 'Back-end', 'Back End', 'API', 'Server', 'Java', 'Python', 'Ruby', 'PHP', 'Node'],\r\n    'Full Stack': ['Full Stack', 'Fullstack', 'Full-stack'],\r\n    'DevOps': ['DevOps', 'SRE', 'Infrastructure', 'Cloud', 'AWS', 'Azure', 'GCP', 'Kubernetes', 'Docker'],\r\n    'Mobile': ['Mobile', 'iOS', 'Android', 'React Native', 'Flutter', 'Swift', 'Kotlin'],\r\n    'Data': ['Data', 'Analytics', 'Machine Learning', 'AI', 'ML', 'Data Science', 'Big Data'],\r\n    'Product': ['Product', 'PM', 'Product Manager', 'Product Owner'],\r\n    'QA': ['QA', 'Test', 'Testing', 'Quality'],\r\n    'Security': ['Security', 'Cyber', 'InfoSec']\r\n  };\r\n  \r\n  for (const [team, keywords] of Object.entries(teams)) {\r\n    if (keywords.some(keyword => title.includes(keyword))) {\r\n      return team;\r\n    }\r\n  }\r\n  \r\n  return 'Engineering';\r\n};\r\n\r\n/**\r\n * 估算职位薪资\r\n * @param {string} title - 职位名称\r\n * @returns {number} - 估算薪资（千美元/年）\r\n */\r\nexport const estimateSalary = (title) => {\r\n  if (!title || typeof title !== 'string') {\r\n    return 100;\r\n  }\r\n\r\n  // 基于职位名称估算薪资范围\r\n  const seniorKeywords = ['Senior', 'Sr', 'Lead', 'Principal', 'Staff', 'Architect'];\r\n  const midKeywords = ['II', '2', 'Mid', 'Intermediate'];\r\n  const juniorKeywords = ['Junior', 'Jr', 'Entry', 'Associate', 'Intern'];\r\n  \r\n  const isSenior = seniorKeywords.some(key => title.includes(key));\r\n  const isMid = midKeywords.some(key => title.includes(key));\r\n  const isJunior = juniorKeywords.some(key => title.includes(key));\r\n  \r\n  // 基础薪资范围\r\n  let baseSalary;\r\n  if (title.includes('Manager') || title.includes('Director')) {\r\n    baseSalary = 130;\r\n  } else if (title.includes('Architect') || title.includes('Principal')) {\r\n    baseSalary = 140;\r\n  } else if (title.includes('DevOps') || title.includes('SRE')) {\r\n    baseSalary = 125;\r\n  } else if (title.includes('Data') || title.includes('Machine Learning')) {\r\n    baseSalary = 110;\r\n  } else if (title.includes('UI') || title.includes('UX') || title.includes('Design')) {\r\n    baseSalary = 115;\r\n  } else if (title.includes('Mobile') || title.includes('iOS') || title.includes('Android')) {\r\n    baseSalary = 120;\r\n  } else {\r\n    baseSalary = 100;\r\n  }\r\n  \r\n  // 根据级别调整薪资\r\n  if (isSenior) {\r\n    return baseSalary + 20;\r\n  } else if (isMid) {\r\n    return baseSalary;\r\n  } else if (isJunior) {\r\n    return baseSalary - 30;\r\n  } else {\r\n    return baseSalary;\r\n  }\r\n};\r\n\r\n/**\r\n * 生成随机的浏览量和申请人数\r\n * @returns {Object} - 包含views和applicants的对象\r\n */\r\nexport const generateRandomStats = () => {\r\n  return {\r\n    views: Math.floor(Math.random() * 500) + 50,\r\n    applicants: Math.floor(Math.random() * 50) + 5\r\n  };\r\n};\r\n\r\n/**\r\n * 从HTML描述中提取纯文本\r\n * @param {string} html - HTML描述\r\n * @returns {string} - 提取的纯文本\r\n */\r\nexport const extractTextFromHtml = (html) => {\r\n  if (!html || typeof html !== 'string') {\r\n    return '';\r\n  }\r\n  \r\n  // 创建临时DOM元素\r\n  const tempDiv = document.createElement('div');\r\n  tempDiv.innerHTML = html;\r\n  \r\n  // 获取纯文本\r\n  return tempDiv.textContent || tempDiv.innerText || '';\r\n};\r\n\r\n/**\r\n * 从描述中提取资格要求\r\n * @param {string} description - 工作描述\r\n * @returns {Object} - 包含最低和优先资格要求的对象\r\n */\r\nexport const extractQualifications = (description) => {\r\n  if (!description || typeof description !== 'string') {\r\n    return {\r\n      minimumQualifications: [],\r\n      preferredQualifications: []\r\n    };\r\n  }\r\n  \r\n  const minimumSections = [\r\n    'requirements', 'qualifications', 'what you need', 'what we require',\r\n    'minimum qualifications', 'basic qualifications', 'required skills'\r\n  ];\r\n  \r\n  const preferredSections = [\r\n    'preferred', 'bonus', 'nice to have', 'desired', 'plus',\r\n    'preferred qualifications', 'additional skills'\r\n  ];\r\n  \r\n  const lines = description.split('\\n');\r\n  const minimumQualifications = [];\r\n  const preferredQualifications = [];\r\n  \r\n  let currentSection = null;\r\n  \r\n  for (const line of lines) {\r\n    const lowerLine = line.toLowerCase();\r\n    \r\n    // 检查是否是最低要求部分\r\n    if (minimumSections.some(section => lowerLine.includes(section))) {\r\n      currentSection = 'minimum';\r\n      continue;\r\n    }\r\n    \r\n    // 检查是否是优先要求部分\r\n    if (preferredSections.some(section => lowerLine.includes(section))) {\r\n      currentSection = 'preferred';\r\n      continue;\r\n    }\r\n    \r\n    // 如果是列表项，添加到相应部分\r\n    if (line.trim().startsWith('•') || line.trim().startsWith('-') || line.trim().match(/^\\d+\\./)) {\r\n      const item = line.trim().replace(/^[•\\-\\d.]+\\s*/, '');\r\n      \r\n      if (item && currentSection === 'minimum') {\r\n        minimumQualifications.push(item);\r\n      } else if (item && currentSection === 'preferred') {\r\n        preferredQualifications.push(item);\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    minimumQualifications: minimumQualifications.length > 0 ? minimumQualifications : [],\r\n    preferredQualifications: preferredQualifications.length > 0 ? preferredQualifications : []\r\n  };\r\n};\r\n\r\nexport default {\r\n  formatRelativeDate,\r\n  extractSkills,\r\n  extractTeam,\r\n  estimateSalary,\r\n  generateRandomStats,\r\n  extractTextFromHtml,\r\n  extractQualifications\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}