{"ast":null,"code":"// 缓存服务\n// 提供内存缓存和本地存储缓存功能\nclass CacheService{constructor(){let options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};this.options={memoryTTL:5*60*1000,// 内存缓存默认5分钟\nstorageTTL:60*60*1000,// 本地存储缓存默认1小时\nprefix:'job_api_cache_',...options};// 内存缓存\nthis.memoryCache=new Map();// 缓存统计\nthis.stats={hits:0,misses:0,memoryHits:0,storageHits:0};}/**\r\n   * 生成缓存键\r\n   * @param {string} key - 原始键\r\n   * @returns {string} - 带前缀的缓存键\r\n   */getCacheKey(key){return`${this.options.prefix}${key}`;}/**\r\n   * 从缓存中获取数据\r\n   * @param {string} key - 缓存键\r\n   * @returns {Promise<any>} - 缓存数据，如果不存在则返回null\r\n   */async get(key){const cacheKey=this.getCacheKey(key);// 首先检查内存缓存\nif(this.memoryCache.has(cacheKey)){const cacheItem=this.memoryCache.get(cacheKey);// 检查是否过期\nif(cacheItem.expiry>Date.now()){this.stats.hits++;this.stats.memoryHits++;return cacheItem.value;}else{// 过期则删除\nthis.memoryCache.delete(cacheKey);}}// 然后检查本地存储\ntry{const storageItem=localStorage.getItem(cacheKey);if(storageItem){const cacheItem=JSON.parse(storageItem);// 检查是否过期\nif(cacheItem.expiry>Date.now()){// 同时更新内存缓存\nthis.memoryCache.set(cacheKey,cacheItem);this.stats.hits++;this.stats.storageHits++;return cacheItem.value;}else{// 过期则删除\nlocalStorage.removeItem(cacheKey);}}}catch(error){console.error('Error reading from localStorage:',error);}// 缓存未命中\nthis.stats.misses++;return null;}/**\r\n   * 将数据存入缓存\r\n   * @param {string} key - 缓存键\r\n   * @param {any} value - 缓存数据\r\n   * @param {number} ttl - 过期时间（毫秒），如果不指定则使用默认值\r\n   * @returns {Promise<void>}\r\n   */async set(key,value,ttl){const cacheKey=this.getCacheKey(key);const memoryTTL=ttl||this.options.memoryTTL;const storageTTL=ttl||this.options.storageTTL;const now=Date.now();// 设置内存缓存\nconst memoryCacheItem={value,expiry:now+memoryTTL,created:now};this.memoryCache.set(cacheKey,memoryCacheItem);// 设置本地存储缓存\ntry{const storageCacheItem={value,expiry:now+storageTTL,created:now};localStorage.setItem(cacheKey,JSON.stringify(storageCacheItem));}catch(error){console.error('Error writing to localStorage:',error);}}/**\r\n   * 使缓存项失效\r\n   * @param {string} key - 缓存键\r\n   * @returns {Promise<void>}\r\n   */async invalidate(key){const cacheKey=this.getCacheKey(key);// 删除内存缓存\nthis.memoryCache.delete(cacheKey);// 删除本地存储缓存\ntry{localStorage.removeItem(cacheKey);}catch(error){console.error('Error removing item from localStorage:',error);}}/**\r\n   * 清除所有缓存\r\n   * @returns {Promise<void>}\r\n   */async clear(){// 清除内存缓存\nthis.memoryCache.clear();// 清除本地存储缓存\ntry{const keysToRemove=[];for(let i=0;i<localStorage.length;i++){const key=localStorage.key(i);if(key.startsWith(this.options.prefix)){keysToRemove.push(key);}}keysToRemove.forEach(key=>localStorage.removeItem(key));}catch(error){console.error('Error clearing localStorage:',error);}// 重置统计\nthis.resetStats();}/**\r\n   * 重置缓存统计\r\n   */resetStats(){this.stats={hits:0,misses:0,memoryHits:0,storageHits:0};}/**\r\n   * 获取缓存统计\r\n   * @returns {Object} - 缓存统计\r\n   */getStats(){const total=this.stats.hits+this.stats.misses;const hitRate=total>0?this.stats.hits/total*100:0;return{...this.stats,total,hitRate:hitRate.toFixed(2)+'%',memoryItems:this.memoryCache.size,memoryUsage:this.estimateMemoryUsage()};}/**\r\n   * 估算内存缓存使用量\r\n   * @returns {string} - 格式化的内存使用量\r\n   */estimateMemoryUsage(){let totalSize=0;this.memoryCache.forEach((value,key)=>{// 估算键的大小\ntotalSize+=key.length*2;// 每个字符约2字节\n// 估算值的大小\ntry{const jsonSize=JSON.stringify(value).length*2;totalSize+=jsonSize;}catch(e){// 如果无法序列化，使用粗略估计\ntotalSize+=1024;// 假设1KB\n}});// 格式化大小\nif(totalSize<1024){return`${totalSize} B`;}else if(totalSize<1024*1024){return`${(totalSize/1024).toFixed(2)} KB`;}else{return`${(totalSize/(1024*1024)).toFixed(2)} MB`;}}/**\r\n   * 生成基于搜索参数的缓存键\r\n   * @param {string} baseKey - 基础键\r\n   * @param {Object} params - 搜索参数\r\n   * @returns {string} - 缓存键\r\n   */static generateKey(baseKey){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!params||Object.keys(params).length===0){return baseKey;}// 对参数进行排序，确保相同参数生成相同的键\nconst sortedParams=Object.entries(params).filter(_ref=>{let[_,value]=_ref;return value!==undefined&&value!==null&&value!=='';}).sort((_ref2,_ref3)=>{let[keyA]=_ref2;let[keyB]=_ref3;return keyA.localeCompare(keyB);}).map(_ref4=>{let[key,value]=_ref4;return`${key}=${value}`;}).join('&');return sortedParams?`${baseKey}?${sortedParams}`:baseKey;}}export default CacheService;","map":{"version":3,"names":["CacheService","constructor","options","arguments","length","undefined","memoryTTL","storageTTL","prefix","memoryCache","Map","stats","hits","misses","memoryHits","storageHits","getCacheKey","key","get","cacheKey","has","cacheItem","expiry","Date","now","value","delete","storageItem","localStorage","getItem","JSON","parse","set","removeItem","error","console","ttl","memoryCacheItem","created","storageCacheItem","setItem","stringify","invalidate","clear","keysToRemove","i","startsWith","push","forEach","resetStats","getStats","total","hitRate","toFixed","memoryItems","size","memoryUsage","estimateMemoryUsage","totalSize","jsonSize","e","generateKey","baseKey","params","Object","keys","sortedParams","entries","filter","_ref","_","sort","_ref2","_ref3","keyA","keyB","localeCompare","map","_ref4","join"],"sources":["D:/Kiro/remote-job-website/src/services/api/CacheService.js"],"sourcesContent":["// 缓存服务\r\n// 提供内存缓存和本地存储缓存功能\r\n\r\nclass CacheService {\r\n  constructor(options = {}) {\r\n    this.options = {\r\n      memoryTTL: 5 * 60 * 1000, // 内存缓存默认5分钟\r\n      storageTTL: 60 * 60 * 1000, // 本地存储缓存默认1小时\r\n      prefix: 'job_api_cache_',\r\n      ...options\r\n    };\r\n    \r\n    // 内存缓存\r\n    this.memoryCache = new Map();\r\n    \r\n    // 缓存统计\r\n    this.stats = {\r\n      hits: 0,\r\n      misses: 0,\r\n      memoryHits: 0,\r\n      storageHits: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 生成缓存键\r\n   * @param {string} key - 原始键\r\n   * @returns {string} - 带前缀的缓存键\r\n   */\r\n  getCacheKey(key) {\r\n    return `${this.options.prefix}${key}`;\r\n  }\r\n\r\n  /**\r\n   * 从缓存中获取数据\r\n   * @param {string} key - 缓存键\r\n   * @returns {Promise<any>} - 缓存数据，如果不存在则返回null\r\n   */\r\n  async get(key) {\r\n    const cacheKey = this.getCacheKey(key);\r\n    \r\n    // 首先检查内存缓存\r\n    if (this.memoryCache.has(cacheKey)) {\r\n      const cacheItem = this.memoryCache.get(cacheKey);\r\n      \r\n      // 检查是否过期\r\n      if (cacheItem.expiry > Date.now()) {\r\n        this.stats.hits++;\r\n        this.stats.memoryHits++;\r\n        return cacheItem.value;\r\n      } else {\r\n        // 过期则删除\r\n        this.memoryCache.delete(cacheKey);\r\n      }\r\n    }\r\n    \r\n    // 然后检查本地存储\r\n    try {\r\n      const storageItem = localStorage.getItem(cacheKey);\r\n      \r\n      if (storageItem) {\r\n        const cacheItem = JSON.parse(storageItem);\r\n        \r\n        // 检查是否过期\r\n        if (cacheItem.expiry > Date.now()) {\r\n          // 同时更新内存缓存\r\n          this.memoryCache.set(cacheKey, cacheItem);\r\n          \r\n          this.stats.hits++;\r\n          this.stats.storageHits++;\r\n          return cacheItem.value;\r\n        } else {\r\n          // 过期则删除\r\n          localStorage.removeItem(cacheKey);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error reading from localStorage:', error);\r\n    }\r\n    \r\n    // 缓存未命中\r\n    this.stats.misses++;\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * 将数据存入缓存\r\n   * @param {string} key - 缓存键\r\n   * @param {any} value - 缓存数据\r\n   * @param {number} ttl - 过期时间（毫秒），如果不指定则使用默认值\r\n   * @returns {Promise<void>}\r\n   */\r\n  async set(key, value, ttl) {\r\n    const cacheKey = this.getCacheKey(key);\r\n    const memoryTTL = ttl || this.options.memoryTTL;\r\n    const storageTTL = ttl || this.options.storageTTL;\r\n    \r\n    const now = Date.now();\r\n    \r\n    // 设置内存缓存\r\n    const memoryCacheItem = {\r\n      value,\r\n      expiry: now + memoryTTL,\r\n      created: now\r\n    };\r\n    \r\n    this.memoryCache.set(cacheKey, memoryCacheItem);\r\n    \r\n    // 设置本地存储缓存\r\n    try {\r\n      const storageCacheItem = {\r\n        value,\r\n        expiry: now + storageTTL,\r\n        created: now\r\n      };\r\n      \r\n      localStorage.setItem(cacheKey, JSON.stringify(storageCacheItem));\r\n    } catch (error) {\r\n      console.error('Error writing to localStorage:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 使缓存项失效\r\n   * @param {string} key - 缓存键\r\n   * @returns {Promise<void>}\r\n   */\r\n  async invalidate(key) {\r\n    const cacheKey = this.getCacheKey(key);\r\n    \r\n    // 删除内存缓存\r\n    this.memoryCache.delete(cacheKey);\r\n    \r\n    // 删除本地存储缓存\r\n    try {\r\n      localStorage.removeItem(cacheKey);\r\n    } catch (error) {\r\n      console.error('Error removing item from localStorage:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 清除所有缓存\r\n   * @returns {Promise<void>}\r\n   */\r\n  async clear() {\r\n    // 清除内存缓存\r\n    this.memoryCache.clear();\r\n    \r\n    // 清除本地存储缓存\r\n    try {\r\n      const keysToRemove = [];\r\n      \r\n      for (let i = 0; i < localStorage.length; i++) {\r\n        const key = localStorage.key(i);\r\n        if (key.startsWith(this.options.prefix)) {\r\n          keysToRemove.push(key);\r\n        }\r\n      }\r\n      \r\n      keysToRemove.forEach(key => localStorage.removeItem(key));\r\n    } catch (error) {\r\n      console.error('Error clearing localStorage:', error);\r\n    }\r\n    \r\n    // 重置统计\r\n    this.resetStats();\r\n  }\r\n\r\n  /**\r\n   * 重置缓存统计\r\n   */\r\n  resetStats() {\r\n    this.stats = {\r\n      hits: 0,\r\n      misses: 0,\r\n      memoryHits: 0,\r\n      storageHits: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 获取缓存统计\r\n   * @returns {Object} - 缓存统计\r\n   */\r\n  getStats() {\r\n    const total = this.stats.hits + this.stats.misses;\r\n    const hitRate = total > 0 ? (this.stats.hits / total) * 100 : 0;\r\n    \r\n    return {\r\n      ...this.stats,\r\n      total,\r\n      hitRate: hitRate.toFixed(2) + '%',\r\n      memoryItems: this.memoryCache.size,\r\n      memoryUsage: this.estimateMemoryUsage()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 估算内存缓存使用量\r\n   * @returns {string} - 格式化的内存使用量\r\n   */\r\n  estimateMemoryUsage() {\r\n    let totalSize = 0;\r\n    \r\n    this.memoryCache.forEach((value, key) => {\r\n      // 估算键的大小\r\n      totalSize += key.length * 2; // 每个字符约2字节\r\n      \r\n      // 估算值的大小\r\n      try {\r\n        const jsonSize = JSON.stringify(value).length * 2;\r\n        totalSize += jsonSize;\r\n      } catch (e) {\r\n        // 如果无法序列化，使用粗略估计\r\n        totalSize += 1024; // 假设1KB\r\n      }\r\n    });\r\n    \r\n    // 格式化大小\r\n    if (totalSize < 1024) {\r\n      return `${totalSize} B`;\r\n    } else if (totalSize < 1024 * 1024) {\r\n      return `${(totalSize / 1024).toFixed(2)} KB`;\r\n    } else {\r\n      return `${(totalSize / (1024 * 1024)).toFixed(2)} MB`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 生成基于搜索参数的缓存键\r\n   * @param {string} baseKey - 基础键\r\n   * @param {Object} params - 搜索参数\r\n   * @returns {string} - 缓存键\r\n   */\r\n  static generateKey(baseKey, params = {}) {\r\n    if (!params || Object.keys(params).length === 0) {\r\n      return baseKey;\r\n    }\r\n    \r\n    // 对参数进行排序，确保相同参数生成相同的键\r\n    const sortedParams = Object.entries(params)\r\n      .filter(([_, value]) => value !== undefined && value !== null && value !== '')\r\n      .sort(([keyA], [keyB]) => keyA.localeCompare(keyB))\r\n      .map(([key, value]) => `${key}=${value}`)\r\n      .join('&');\r\n    \r\n    return sortedParams ? `${baseKey}?${sortedParams}` : baseKey;\r\n  }\r\n}\r\n\r\nexport default CacheService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}